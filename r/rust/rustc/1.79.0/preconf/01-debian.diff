--- ./rustc-1.79.0-src/Cargo.toml	1153704088.000000000
+++ ./Cargo.toml	1718794562.507877164
@@ -20,23 +20,16 @@ members = [
   "src/tools/tidy",
   "src/tools/tier-check",
   "src/tools/build-manifest",
-  "src/tools/remote-test-client",
-  "src/tools/remote-test-server",
   "src/tools/rust-installer",
   "src/tools/rust-demangler",
   "src/tools/rustdoc",
-  "src/tools/rls",
   "src/tools/rustfmt",
-  "src/tools/miri",
-  "src/tools/miri/cargo-miri",
   "src/tools/rustdoc-themes",
   "src/tools/unicode-table-generator",
-  "src/tools/expand-yaml-anchors",
   "src/tools/jsondocck",
   "src/tools/jsondoclint",
   "src/tools/llvm-bitcode-linker",
   "src/tools/html-checker",
-  "src/tools/bump-stage0",
   "src/tools/replace-version-placeholder",
   "src/tools/lld-wrapper",
   "src/tools/collect-license-metadata",
--- ./rustc-1.79.0-src/compiler/rustc_codegen_ssa/Cargo.toml	1153704088.000000000
+++ ./compiler/rustc_codegen_ssa/Cargo.toml	1718795161.137641142
@@ -51,7 +51,3 @@ libc = "0.2.50"
 version = "0.32.1"
 default-features = false
 features = ["read_core", "elf", "macho", "pe", "xcoff", "unaligned", "archive", "write", "wasm"]
-
-[target.'cfg(windows)'.dependencies.windows]
-version = "0.52.0"
-features = ["Win32_Globalization"]
--- ./rustc-1.79.0-src/compiler/rustc_error_codes/src/error_codes/E0460.md	1153704088.000000000
+++ ./compiler/rustc_error_codes/src/error_codes/E0460.md	1718793730.073866025
@@ -68,4 +68,4 @@ This error can be fixed by:
  * Recompiling crate `a` so that both crate `b` and `main` have a uniform
    version to depend on.
 
-[Cargo]: ../cargo/index.html
+[Cargo]: ../../../cargo/book/index.html
--- ./rustc-1.79.0-src/compiler/rustc_error_codes/src/error_codes/E0461.md	1153704088.000000000
+++ ./compiler/rustc_error_codes/src/error_codes/E0461.md	1718793730.074952917
@@ -25,6 +25,6 @@ architectures. This issue also extends t
 `std` is operating-system specific.
 
 This error can be fixed by:
- * Using [Cargo](../cargo/index.html), the Rust package manager, automatically
+ * Using [Cargo](../../../cargo/book/index.html), the Rust package manager, automatically
    fixing this issue.
  * Recompiling either crate so that they target a consistent target triple.
--- ./rustc-1.79.0-src/compiler/rustc_error_codes/src/error_codes/E0462.md	1153704088.000000000
+++ ./compiler/rustc_error_codes/src/error_codes/E0462.md	1718793730.076072683
@@ -26,7 +26,7 @@ prefer `staticlib` for linking with C pr
 `crate_type`s in [this section of the Reference](../reference/linkage.html).
 
 This error can be fixed by:
- * Using [Cargo](../cargo/index.html), the Rust package manager, automatically
+ * Using [Cargo](../../../cargo/book/index.html), the Rust package manager, automatically
    fixing this issue.
  * Recompiling the crate as a `rlib` or `dylib`; formats suitable for Rust
    linking.
--- ./rustc-1.79.0-src/compiler/rustc_error_codes/src/error_codes/E0514.md	1153704088.000000000
+++ ./compiler/rustc_error_codes/src/error_codes/E0514.md	1718793730.077012953
@@ -27,7 +27,7 @@ the compiler cannot be sure about *how*
 versions, and therefore this error occurs.
 
 This error can be fixed by:
- * Using [Cargo](../cargo/index.html), the Rust package manager and
+ * Using [Cargo](../../../cargo/book/index.html), the Rust package manager and
    [Rustup](https://rust-lang.github.io/rustup/), the Rust toolchain installer,
    automatically fixing this issue.
  * Recompiling the crates with a uniform `rustc` version.
--- ./rustc-1.79.0-src/compiler/rustc_error_codes/src/error_codes/E0519.md	1153704088.000000000
+++ ./compiler/rustc_error_codes/src/error_codes/E0519.md	1718793730.077973889
@@ -34,7 +34,7 @@ The above example compiles two crates wi
 impossible for the compiler to distinguish between symbols (`pub` item names).
 
 This error can be fixed by:
- * Using [Cargo](../cargo/index.html), the Rust package manager, automatically
+ * Using [Cargo](../../../cargo/book/index.html), the Rust package manager, automatically
    fixing this issue.
  * Recompiling the crate with different metadata (different name/
    `crate_type`).
--- ./rustc-1.79.0-src/compiler/rustc_llvm/build.rs	1153704088.000000000
+++ ./compiler/rustc_llvm/build.rs	1718794066.101893770
@@ -301,7 +301,7 @@ fn main() {
             if let Some(stripped) = lib.strip_prefix("-LIBPATH:") {
                 println!("cargo:rustc-link-search=native={}", stripped.replace(&host, &target));
             } else if let Some(stripped) = lib.strip_prefix("-L") {
-                println!("cargo:rustc-link-search=native={}", stripped.replace(&host, &target));
+                if stripped.contains(&host) { println!("cargo:rustc-link-search=native={}", stripped.replace(&host, &target)); }
             }
         } else if let Some(stripped) = lib.strip_prefix("-LIBPATH:") {
             println!("cargo:rustc-link-search=native={stripped}");
--- ./rustc-1.79.0-src/compiler/rustc_session/Cargo.toml	1153704088.000000000
+++ ./compiler/rustc_session/Cargo.toml	1718795179.978509482
@@ -28,10 +28,3 @@ tracing = "0.1"
 # tidy-alphabetical-start
 libc = "0.2"
 # tidy-alphabetical-end
-
-[target.'cfg(windows)'.dependencies.windows]
-version = "0.52.0"
-features = [
-    "Win32_Foundation",
-    "Win32_System_LibraryLoader",
-]
--- ./rustc-1.79.0-src/library/alloc/tests/arc.rs	1153704088.000000000
+++ ./library/alloc/tests/arc.rs	1718794070.874947519
@@ -95,6 +95,7 @@ const SHARED_ITER_MAX: u16 = 100;
 
 fn assert_trusted_len<I: TrustedLen>(_: &I) {}
 
+#[cfg(not(any(target_arch = "powerpc", target_arch = "powerpc64")))]
 #[test]
 fn shared_from_iter_normal() {
     // Exercise the base implementation for non-`TrustedLen` iterators.
--- ./rustc-1.79.0-src/library/alloc/tests/rc.rs	1153704088.000000000
+++ ./library/alloc/tests/rc.rs	1718794070.875816333
@@ -91,6 +91,7 @@ const SHARED_ITER_MAX: u16 = 100;
 
 fn assert_trusted_len<I: TrustedLen>(_: &I) {}
 
+#[cfg(not(any(target_arch = "powerpc", target_arch = "powerpc64")))]
 #[test]
 fn shared_from_iter_normal() {
     // Exercise the base implementation for non-`TrustedLen` iterators.
--- ./rustc-1.79.0-src/library/backtrace/Cargo.toml	1153704088.000000000
+++ ./library/backtrace/Cargo.toml	1718795140.040339784
@@ -49,9 +49,6 @@ version = "0.32.0"
 default-features = false
 features = ['read_core', 'elf', 'macho', 'pe', 'xcoff', 'unaligned', 'archive']
 
-[target.'cfg(windows)'.dependencies]
-winapi = { version = "0.3.9", optional = true }
-
 [build-dependencies]
 # Only needed for Android, but cannot be target dependent
 # https://github.com/rust-lang/cargo/issues/4932
@@ -88,16 +85,6 @@ libbacktrace = []
 libunwind = []
 unix-backtrace = []
 verify-winapi = [
-  'winapi/dbghelp',
-  'winapi/handleapi',
-  'winapi/libloaderapi',
-  'winapi/memoryapi',
-  'winapi/minwindef',
-  'winapi/processthreadsapi',
-  'winapi/synchapi',
-  'winapi/tlhelp32',
-  'winapi/winbase',
-  'winapi/winnt',
 ]
 
 [[example]]
--- ./rustc-1.79.0-src/library/std/src/sync/mutex/tests.rs	1153704088.000000000
+++ ./library/std/src/sync/mutex/tests.rs	1718794110.187639094
@@ -145,6 +145,7 @@ fn test_mutex_arc_condvar() {
     }
 }
 
+#[cfg(not(target_arch = "powerpc"))]
 #[test]
 fn test_arc_condvar_poison() {
     let packet = Packet(Arc::new((Mutex::new(1), Condvar::new())));
--- ./rustc-1.79.0-src/src/bootstrap/bootstrap.py	1153704088.000000000
+++ ./src/bootstrap/bootstrap.py	1718794373.770408860
@@ -991,10 +991,6 @@ class RustBuild(object):
         args = [self.cargo(), "build", "--manifest-path",
                 os.path.join(self.rust_root, "src/bootstrap/Cargo.toml")]
         args.extend("--verbose" for _ in range(self.verbose))
-        if self.use_locked_deps:
-            args.append("--locked")
-        if self.use_vendored_sources:
-            args.append("--frozen")
         if self.get_toml("metrics", "build"):
             args.append("--features")
             args.append("build-metrics")
--- ./rustc-1.79.0-src/src/bootstrap/src/core/build_steps/dist.rs	1153704088.000000000
+++ ./src/bootstrap/src/core/build_steps/dist.rs	1718793929.674431530
@@ -78,6 +78,7 @@ impl Step for Docs {
         tarball.set_product_name("Rust Documentation");
         tarball.add_bulk_dir(&builder.doc_out(host), dest);
         tarball.add_file(builder.src.join("src/doc/robots.txt"), dest, 0o644);
+        tarball.permit_symlinks(true);
         Some(tarball.generate())
     }
 }
@@ -998,8 +999,10 @@ impl Step for PlainSourceTarball {
 
         // If we're building from git or tarball sources, we need to vendor
         // a complete distribution.
-        if builder.rust_info().is_managed_git_subrepository()
-            || builder.rust_info().is_from_tarball()
+        //
+        // Debian: short-circuited because the Debian package is also in a git
+        //         repository, but cargo-vendor should not be installed or run.
+        if false
         {
             // Ensure we have all submodules from src and other directories checked out.
             for submodule in builder.get_all_submodules() {
--- ./rustc-1.79.0-src/src/bootstrap/src/core/build_steps/doc.rs	1153704088.000000000
+++ ./src/bootstrap/src/core/build_steps/doc.rs	1718793851.120421486
@@ -363,7 +363,27 @@ impl Step for Standalone {
                 .arg("--index-page")
                 .arg(&builder.src.join("src/doc/index.md"))
                 .arg("--markdown-playground-url")
-                .arg("https://play.rust-lang.org/")
+                .arg("https://play.rust-lang.org/");
+
+            // Debian: librustdoc now generates a resource-suffix for static
+            // files with rustc_hash::FxHasher, so we need to find it.
+            let _dir = out.join("static.files");
+            if _dir.is_dir() {
+                let _css = _dir.read_dir().expect("Debian: failed to read static.files/ when is_dir() == true")
+                    .find_map(|entry| entry.ok().map(|entry| {
+                        let name = entry.file_name().into_string()
+                            .expect("Debian: rustc files should have UTF-8 name");
+                        if name.starts_with("rustdoc-") && name.ends_with(".css") {
+                            Some(name)
+                        } else { None }
+                    })).flatten();
+                if let Some(name) = _css {
+                    cmd.arg("--markdown-css").arg(name);
+                }
+            }
+
+            cmd.arg("--markdown-css")
+                .arg("rust.css")
                 .arg("-o")
                 .arg(&out)
                 .arg(&path);
@@ -372,11 +392,6 @@ impl Step for Standalone {
                 cmd.arg("--disable-minification");
             }
 
-            if filename == "not_found.md" {
-                cmd.arg("--markdown-css").arg("https://doc.rust-lang.org/rust.css");
-            } else {
-                cmd.arg("--markdown-css").arg("rust.css");
-            }
             builder.run(&mut cmd);
         }
 
--- ./rustc-1.79.0-src/src/bootstrap/src/core/build_steps/test.rs	1153704088.000000000
+++ ./src/bootstrap/src/core/build_steps/test.rs	1718794373.772154077
@@ -1935,7 +1935,11 @@ NOTE: if you're sure you want to do this
             .ok();
         if let Some(ref vers) = lldb_version {
             cmd.arg("--lldb-version").arg(vers);
-            let lldb_python_dir = run(Command::new(lldb_exe).arg("-P")).ok();
+            let lldb_python_dir = Command::new(lldb_exe)
+                .arg("-P")
+                .output()
+                .map(|output| String::from_utf8_lossy(&output.stdout).to_string())
+                .ok();
             if let Some(ref dir) = lldb_python_dir {
                 cmd.arg("--lldb-python-dir").arg(dir);
             }
@@ -2472,17 +2476,7 @@ impl Step for RustcGuide {
     }
 
     fn run(self, builder: &Builder<'_>) {
-        let relative_path = Path::new("src").join("doc").join("rustc-dev-guide");
-        builder.update_submodule(&relative_path);
-
-        let src = builder.src.join(relative_path);
-        let mut rustbook_cmd = builder.tool_cmd(Tool::Rustbook);
-        let toolstate = if builder.run_delaying_failure(rustbook_cmd.arg("linkcheck").arg(&src)) {
-            ToolState::TestPass
-        } else {
-            ToolState::TestFail
-        };
-        builder.save_toolstate("rustc-dev-guide", toolstate);
+        builder.save_toolstate("rustc-dev-guide", ToolState::TestPass);
     }
 }
 
--- ./rustc-1.79.0-src/src/bootstrap/src/core/builder/tests.rs	1153704088.000000000
+++ ./src/bootstrap/src/core/builder/tests.rs	1718793720.344845367
@@ -387,9 +387,13 @@ mod dist {
     #[test]
     fn dist_only_cross_host() {
         let b = TargetSelection::from_user("B");
+        let mut tools = std::collections::HashSet::new();
+        tools.insert("clippy".to_string());
+        tools.insert("rustfmt".to_string());
         let mut config = configure(&["A", "B"], &["A", "B"]);
         config.docs = false;
         config.extended = true;
+        config.tools = Some(tools);
         config.hosts = vec![b];
         let mut cache = run_build(&[], config);
 
--- ./rustc-1.79.0-src/src/bootstrap/src/core/builder.rs	1153704088.000000000
+++ ./src/bootstrap/src/core/builder.rs	1718794449.156415019
@@ -724,25 +724,14 @@ impl<'a> Builder<'a> {
                 tool::Linkchecker,
                 tool::CargoTest,
                 tool::Compiletest,
-                tool::RemoteTestServer,
-                tool::RemoteTestClient,
                 tool::RustInstaller,
                 tool::Cargo,
-                tool::Rls,
-                tool::RustAnalyzer,
                 tool::RustAnalyzerProcMacroSrv,
                 tool::RustDemangler,
                 tool::Rustdoc,
                 tool::Clippy,
                 tool::CargoClippy,
-                llvm::Llvm,
-                llvm::Sanitizers,
                 tool::Rustfmt,
-                tool::Miri,
-                tool::CargoMiri,
-                llvm::Lld,
-                llvm::CrtBeginEnd,
-                tool::RustdocGUITest,
                 tool::OptimizedDist,
                 tool::CoverageDump,
                 tool::LlvmBitcodeLinker
@@ -781,12 +770,7 @@ impl<'a> Builder<'a> {
                 check::Rustdoc,
                 check::CodegenBackend,
                 check::Clippy,
-                check::Miri,
-                check::CargoMiri,
-                check::MiroptTestTools,
-                check::Rls,
                 check::Rustfmt,
-                check::RustAnalyzer,
                 check::Bootstrap,
             ),
             Kind::Test => describe!(
@@ -820,7 +804,6 @@ impl<'a> Builder<'a> {
                 test::TierCheck,
                 test::Cargotest,
                 test::Cargo,
-                test::RustAnalyzer,
                 test::ErrorIndex,
                 test::Distcheck,
                 test::RunMakeFullDeps,
@@ -836,7 +819,6 @@ impl<'a> Builder<'a> {
                 test::EmbeddedBook,
                 test::EditionGuide,
                 test::Rustfmt,
-                test::Miri,
                 test::CargoMiri,
                 test::Clippy,
                 test::RustDemangler,
@@ -876,7 +858,6 @@ impl<'a> Builder<'a> {
                 doc::CargoBook,
                 doc::Clippy,
                 doc::ClippyBook,
-                doc::Miri,
                 doc::EmbeddedBook,
                 doc::EditionGuide,
                 doc::StyleGuide,
@@ -896,12 +877,9 @@ impl<'a> Builder<'a> {
                 dist::Analysis,
                 dist::Src,
                 dist::Cargo,
-                dist::Rls,
-                dist::RustAnalyzer,
                 dist::Rustfmt,
                 dist::RustDemangler,
                 dist::Clippy,
-                dist::Miri,
                 dist::LlvmTools,
                 dist::LlvmBitcodeLinker,
                 dist::RustDev,
@@ -924,11 +902,9 @@ impl<'a> Builder<'a> {
                 // install the same binaries twice for each tool, leaving backup files (*.old) as a result.
                 install::Rustc,
                 install::Cargo,
-                install::RustAnalyzer,
                 install::Rustfmt,
                 install::RustDemangler,
                 install::Clippy,
-                install::Miri,
                 install::LlvmTools,
                 install::Src,
             ),
@@ -937,7 +913,6 @@ impl<'a> Builder<'a> {
                 run::BuildManifest,
                 run::BumpStage0,
                 run::ReplaceVersionPlaceholder,
-                run::Miri,
                 run::CollectLicenseMetadata,
                 run::GenerateCopyright,
                 run::GenerateWindowsSys,
@@ -1582,6 +1557,18 @@ impl<'a> Builder<'a> {
         hostflags.arg("-Zunstable-options");
         hostflags.arg("--check-cfg=cfg(bootstrap)");
 
+        // Debian-specific stuff here
+        // set linker flags from LDFLAGS
+        if let Ok(ldflags) = env::var("LDFLAGS") {
+            for flag in ldflags.split_whitespace() {
+                if target.contains("windows") && flag.contains("relro") {
+                    // relro is ELF-specific
+                    continue;
+                }
+                rustflags.arg(&format!("-Clink-args={}", flag));
+            }
+        }
+
         // FIXME: It might be better to use the same value for both `RUSTFLAGS` and `RUSTDOCFLAGS`,
         // but this breaks CI. At the very least, stage0 `rustdoc` needs `--cfg bootstrap`. See
         // #71458.
@@ -1838,7 +1825,8 @@ impl<'a> Builder<'a> {
             cargo.env("CFG_VIRTUAL_RUST_SOURCE_BASE_DIR", map_to);
         }
 
-        if self.config.rust_remap_debuginfo {
+        // Debian: this breaks with our vendored sources!
+        if false && self.config.rust_remap_debuginfo {
             let mut env_var = OsString::new();
             if self.config.vendor {
                 let vendor = self.build.src.join("vendor");
@@ -2076,10 +2064,7 @@ impl<'a> Builder<'a> {
             }
         }
 
-        if self.config.locked_deps {
-            cargo.arg("--locked");
-        }
-        if self.config.vendor || self.is_sudo {
+        if self.is_sudo {
             cargo.arg("--frozen");
         }
 
@@ -2231,16 +2216,7 @@ impl<'a> Builder<'a> {
         static SUBMODULES_PATHS: OnceLock<Vec<String>> = OnceLock::new();
 
         let init_submodules_paths = |src: &PathBuf| {
-            let file = File::open(src.join(".gitmodules")).unwrap();
-
             let mut submodules_paths = vec![];
-            for line in BufReader::new(file).lines().map_while(Result::ok) {
-                let line = line.trim();
-                if line.starts_with("path") {
-                    let actual_path = line.split(' ').last().expect("Couldn't get value of path");
-                    submodules_paths.push(actual_path.to_owned());
-                }
-            }
 
             submodules_paths
         };
--- ./rustc-1.79.0-src/src/bootstrap/src/core/config/config.rs	1153704088.000000000
+++ ./src/bootstrap/src/core/config/config.rs	1718794040.238366534
@@ -1205,8 +1205,32 @@ impl Config {
 
     pub fn parse(args: &[String]) -> Config {
         #[cfg(test)]
-        fn get_toml(_: &Path) -> TomlConfig {
-            TomlConfig::default()
+        fn get_toml(file: &Path) -> TomlConfig {
+            // Debian: We use previous version as a custom rustc, which
+            // unfortunately won't be picked up because config.toml isn't
+            // read when cfg!(test). Making tests use the entirety of our
+            // config.toml isn't feasible either as it panicks on
+            // GitRepo::Llvm (d-bootstrap-custom-debuginfo-path.patch), so
+            // only give paths of initial rustc and cargo.
+            let contents =
+                t!(fs::read_to_string(file), format!("config file {} not found", file.display()));
+            // Deserialize to Value and then TomlConfig to prevent the Deserialize impl of
+            // TomlConfig and sub types to be monomorphized 5x by toml.
+            toml::from_str(&contents)
+                .and_then(|table: toml::Value| TomlConfig::deserialize(table))
+                .map(|table| {
+                    let mut config = TomlConfig::default();
+                    let mut build = Build::default();
+                    let cbuild = table.build.unwrap();
+                    build.rustc = cbuild.rustc;
+                    build.cargo = cbuild.cargo;
+                    config.build = Some(build);
+                    config
+                })
+                .unwrap_or_else(|err| {
+                    eprintln!("failed to parse TOML configuration '{}': {err}", file.display());
+                    crate::detail_exit(2);
+                })
         }
 
         #[cfg(not(test))]
--- ./rustc-1.79.0-src/src/bootstrap/src/lib.rs	1153704088.000000000
+++ ./src/bootstrap/src/lib.rs	1718793858.169413784
@@ -1220,10 +1220,9 @@ impl Build {
 
         match which {
             GitRepo::Rustc => {
-                let sha = self.rust_sha().unwrap_or(&self.version);
-                Some(format!("/rustc/{sha}"))
+                Some(format!("/usr/src/rustc-{}", &self.version))
             }
-            GitRepo::Llvm => Some(String::from("/rustc/llvm")),
+            GitRepo::Llvm => panic!("GitRepo::Llvm unsupported on Torrekie/Comdartiwerk"),
         }
     }
 
--- ./rustc-1.79.0-src/src/bootstrap/src/utils/channel.rs	1153704088.000000000
+++ ./src/bootstrap/src/utils/channel.rs	1718793677.847884428
@@ -35,6 +35,12 @@ pub struct Info {
 
 impl GitInfo {
     pub fn new(omit_git_hash: bool, dir: &Path) -> GitInfo {
+        //
+        // Debian: returning early because the Debian package is also in a git
+        //         repository, but we don't want to parse gitinfo. This is
+        //         needed for the bootstrap tests to work which running for
+        //         Debian git.
+        return GitInfo::Absent;
         // See if this even begins to look like a git dir
         if !dir.join(".git").exists() {
             match read_commit_info_file(dir) {
--- ./rustc-1.79.0-src/src/doc/edition-guide/book.toml	1153704088.000000000
+++ ./src/doc/edition-guide/book.toml	1718793730.079148737
@@ -55,15 +55,15 @@ search.use-boolean-and = true
 "/rust-2018/the-compiler/incremental-compilation-for-faster-compiles.html" = "https://blog.rust-lang.org/2018/02/15/Rust-1.24.html#incremental-compilation"
 "/rust-2018/the-compiler/an-attribute-for-deprecation.html" = "../../../reference/attributes/diagnostics.html#the-deprecated-attribute"
 "/rust-2018/rustup-for-managing-rust-versions.html" = "https://rust-lang.github.io/rustup/"
-"/rust-2018/cargo-and-crates-io/index.html" = "../../../cargo/index.html"
-"/rust-2018/cargo-and-crates-io/cargo-check-for-faster-checking.html" = "../../../cargo/commands/cargo-check.html"
-"/rust-2018/cargo-and-crates-io/cargo-install-for-easy-installation-of-tools.html" = "../../../cargo/commands/cargo-install.html"
+"/rust-2018/cargo-and-crates-io/index.html" = "../../../../../cargo/book/index.html"
+"/rust-2018/cargo-and-crates-io/cargo-check-for-faster-checking.html" = "../../../../../cargo/book/commands/cargo-check.html"
+"/rust-2018/cargo-and-crates-io/cargo-install-for-easy-installation-of-tools.html" = "../../../../../cargo/book/commands/cargo-install.html"
 "/rust-2018/cargo-and-crates-io/cargo-new-defaults-to-a-binary-project.html" = "https://blog.rust-lang.org/2018/03/29/Rust-1.25.html#cargo-features"
-"/rust-2018/cargo-and-crates-io/cargo-rustc-for-passing-arbitrary-flags-to-rustc.html" = "../../../cargo/commands/cargo-rustc.html"
-"/rust-2018/cargo-and-crates-io/cargo-workspaces-for-multi-package-projects.html" = "../../../cargo/reference/workspaces.html"
-"/rust-2018/cargo-and-crates-io/multi-file-examples.html" = "../../../cargo/guide/project-layout.html"
-"/rust-2018/cargo-and-crates-io/replacing-dependencies-with-patch.html" = "../../../cargo/reference/overriding-dependencies.html#the-patch-section"
-"/rust-2018/cargo-and-crates-io/cargo-can-use-a-local-registry-replacement.html" = "../../../cargo/reference/source-replacement.html"
+"/rust-2018/cargo-and-crates-io/cargo-rustc-for-passing-arbitrary-flags-to-rustc.html" = "../../../../../cargo/book/commands/cargo-rustc.html"
+"/rust-2018/cargo-and-crates-io/cargo-workspaces-for-multi-package-projects.html" = "../../../../../cargo/book/reference/workspaces.html"
+"/rust-2018/cargo-and-crates-io/multi-file-examples.html" = "../../../../../cargo/book/guide/project-layout.html"
+"/rust-2018/cargo-and-crates-io/replacing-dependencies-with-patch.html" = "../../../../../cargo/book/reference/overriding-dependencies.html#the-patch-section"
+"/rust-2018/cargo-and-crates-io/cargo-can-use-a-local-registry-replacement.html" = "../../../../../cargo/book/reference/source-replacement.html"
 "/rust-2018/cargo-and-crates-io/crates-io-disallows-wildcard-dependencies.html" = "https://blog.rust-lang.org/2016/01/21/Rust-1.6.html#cratesio-disallows-wildcards"
 "/rust-2018/documentation/index.html" = "../../../index.html"
 "/rust-2018/documentation/new-editions-of-the-book.html" = "../../../book/index.html"
@@ -95,4 +95,4 @@ search.use-boolean-and = true
 "/rust-next/future.html" = "../../std/future/trait.Future.html"
 "/rust-next/alloc.html" = "https://blog.rust-lang.org/2019/07/04/Rust-1.36.0.html#the-alloc-crate-is-stable"
 "/rust-next/maybe-uninit.html" = "https://blog.rust-lang.org/2019/07/04/Rust-1.36.0.html#maybeuninitt-instead-of-memuninitialized"
-"/rust-next/cargo-vendor.html" = "../../cargo/commands/cargo-vendor.html"
+"/rust-next/cargo-vendor.html" = "../../../../cargo/book/commands/cargo-vendor.html"
--- ./rustc-1.79.0-src/src/doc/edition-guide/src/editions/advanced-migrations.md	1153704088.000000000
+++ ./src/doc/edition-guide/src/editions/advanced-migrations.md	1718793730.080247170
@@ -186,18 +186,18 @@ Afterwards, the line with `extern crate
 
 We're now more idiomatic, and we didn't have to fix our code manually!
 
-[`cargo check`]: ../../cargo/commands/cargo-check.html
-[`cargo fix`]: ../../cargo/commands/cargo-fix.html
+[`cargo check`]: ../../../../cargo/book/commands/cargo-check.html
+[`cargo fix`]: ../../../../cargo/book/commands/cargo-fix.html
 [`explicit-outlives-requirements`]:  ../../rustc/lints/listing/allowed-by-default.html#explicit-outlives-requirements
 [`keyword-idents`]: ../../rustc/lints/listing/allowed-by-default.html#keyword-idents
 [`rustfix`]: https://crates.io/crates/rustfix
 [`unused-extern-crates`]: ../../rustc/lints/listing/allowed-by-default.html#unused-extern-crates
-[Cargo features]: ../../cargo/reference/features.html
-[Cargo package]: ../../cargo/reference/manifest.html#the-package-section
-[Cargo targets]: ../../cargo/reference/cargo-targets.html
-[Cargo workspace]: ../../cargo/reference/workspaces.html
+[Cargo features]: ../../../../cargo/book/reference/features.html
+[Cargo package]: ../../../../cargo/book/reference/manifest.html#the-package-section
+[Cargo targets]: ../../../../cargo/book/reference/cargo-targets.html
+[Cargo workspace]: ../../../../cargo/book/reference/workspaces.html
 [CLI flag]: ../../rustc/lints/levels.html#via-compiler-flag
-[Code generation]: ../../cargo/reference/build-script-examples.html#code-generation
+[Code generation]: ../../../../cargo/book/reference/build-script-examples.html#code-generation
 [conditional compilation]: ../../reference/conditional-compilation.html
 [documentation tests]: ../../rustdoc/documentation-tests.html
 [JSON messages]: ../../rustc/json.html
--- ./rustc-1.79.0-src/src/doc/edition-guide/src/editions/transitioning-an-existing-project-to-a-new-edition.md	1153704088.000000000
+++ ./src/doc/edition-guide/src/editions/transitioning-an-existing-project-to-a-new-edition.md	1718793730.081201981
@@ -101,8 +101,8 @@ The steps are roughly similar to the sta
 > on nightly along with more information about their status.
 > A few months before the edition is stabilized, all of the new features should be fully implemented, and the [Rust Blog] will announce a call for testing.
 
-[`cargo fix`]: ../../cargo/commands/cargo-fix.html
-[`cargo test`]: ../../cargo/commands/cargo-test.html
+[`cargo fix`]: ../../../../cargo/book/commands/cargo-fix.html
+[`cargo test`]: ../../../../cargo/book/commands/cargo-test.html
 [Advanced migration strategies]: advanced-migrations.md
 [nightly channel]: ../../book/appendix-07-nightly-rust.html
 [Rust Blog]: https://blog.rust-lang.org/
--- ./rustc-1.79.0-src/src/doc/edition-guide/src/rust-2021/default-cargo-resolver.md	1153704088.000000000
+++ ./src/doc/edition-guide/src/rust-2021/default-cargo-resolver.md	1718793730.082437953
@@ -21,11 +21,11 @@ The new feature resolver no longer merge
 crates that are depended on in multiple ways.
 See [the announcement of Rust 1.51][5] for details.
 
-[4]: ../../cargo/reference/resolver.html#feature-resolver-version-2
+[4]: ../../../../cargo/book/reference/resolver.html#feature-resolver-version-2
 [5]: https://blog.rust-lang.org/2021/03/25/Rust-1.51.0.html#cargos-new-feature-resolver
-[workspace]: ../../cargo/reference/workspaces.html
-[virtual workspace]: ../../cargo/reference/workspaces.html#virtual-workspace
-[`resolver` field]: ../../cargo/reference/resolver.html#resolver-versions
+[workspace]: ../../../../cargo/book/reference/workspaces.html
+[virtual workspace]: ../../../../cargo/book/reference/workspaces.html#virtual-workspace
+[`resolver` field]: ../../../../cargo/book/reference/resolver.html#resolver-versions
 
 ## Migration
 
@@ -176,4 +176,4 @@ This snippet of output shows that the pr
 Then, `bar` depends on `bstr` as a build-dependency with the "default" feature.
 We can further see that `bstr`'s  "default" feature enables "unicode" (among other features).
 
-[`cargo tree`]: ../../cargo/commands/cargo-tree.html
+[`cargo tree`]: ../../../../cargo/book/commands/cargo-tree.html
--- ./rustc-1.79.0-src/src/doc/index.md	1153704088.000000000
+++ ./src/doc/index.md	1718793730.083454471
@@ -128,7 +128,7 @@ historical editions.
 
 ### The Cargo Book
 
-[The Cargo Book](cargo/index.html) is a guide to Cargo, Rust's build tool and
+[The Cargo Book](../../cargo/book/index.html) is a guide to Cargo, Rust's build tool and
 dependency manager.
 
 ### The Rustdoc Book
--- ./rustc-1.79.0-src/src/doc/reference/src/conditional-compilation.md	1153704088.000000000
+++ ./src/doc/reference/src/conditional-compilation.md	1718793730.084364867
@@ -392,6 +392,6 @@ println!("I'm running on a {} machine!",
 [`target_feature` attribute]: attributes/codegen.md#the-target_feature-attribute
 [attribute]: attributes.md
 [attributes]: attributes.md
-[cargo-feature]: ../cargo/reference/features.html
+[cargo-feature]: ../../../cargo/book/reference/features.html
 [crate type]: linkage.md
 [static C runtime]: linkage.md#static-and-dynamic-c-runtimes
--- ./rustc-1.79.0-src/src/doc/reference/src/introduction.md	1153704088.000000000
+++ ./src/doc/reference/src/introduction.md	1718793730.084958144
@@ -135,8 +135,8 @@ We also want the reference to be as norm
 [the Rust Reference repository]: https://github.com/rust-lang/reference/
 [Unstable Book]: https://doc.rust-lang.org/nightly/unstable-book/
 [_Expression_]: expressions.md
-[cargo book]: ../cargo/index.html
-[cargo reference]: ../cargo/reference/index.html
+[cargo book]: ../../../cargo/book/index.html
+[cargo reference]: ../../../cargo/book/reference/index.html
 [expressions chapter]: expressions.html
 [file an issue]: https://github.com/rust-lang/reference/issues
 [lifetime of temporaries]: expressions.html#temporaries
--- ./rustc-1.79.0-src/src/doc/reference/src/linkage.md	1153704088.000000000
+++ ./src/doc/reference/src/linkage.md	1718793730.085904789
@@ -201,7 +201,7 @@ fn main() {
 }
 ```
 
-[cargo]: ../cargo/reference/environment-variables.html#environment-variables-cargo-sets-for-build-scripts
+[cargo]: ../../../cargo/book/reference/environment-variables.html#environment-variables-cargo-sets-for-build-scripts
 
 To use this feature locally, you typically will use the `RUSTFLAGS` environment
 variable to specify flags to the compiler through Cargo. For example to compile
--- ./rustc-1.79.0-src/src/doc/reference/src/procedural-macros.md	1153704088.000000000
+++ ./src/doc/reference/src/procedural-macros.md	1718793730.086650231
@@ -331,7 +331,7 @@ Note that neither declarative nor proced
 their equivalent `#[doc = r"str"]` attributes when passed to macros.
 
 [Attribute macros]: #attribute-macros
-[Cargo's build scripts]: ../cargo/reference/build-scripts.html
+[Cargo's build scripts]: ../../../cargo/book/reference/build-scripts.html
 [Derive macros]: #derive-macros
 [Function-like macros]: #function-like-procedural-macros
 [`Delimiter::None`]: ../proc_macro/enum.Delimiter.html#variant.None
--- ./rustc-1.79.0-src/src/doc/rust-by-example/theme/index.hbs	1153704088.000000000
+++ ./src/doc/rust-by-example/theme/index.hbs	1718794820.470747768
@@ -33,10 +33,7 @@
         {{/if}}
 
         <!-- Fonts -->
-        <link rel="stylesheet" href="{{ path_to_root }}FontAwesome/css/font-awesome.css">
-        {{#if copy_fonts}}
-        <link rel="stylesheet" href="{{ path_to_root }}fonts/fonts.css">
-        {{/if}}
+        <link rel="stylesheet" href="{{ path_to_root }}css/font-awesome.min.css">
 
         <!-- Highlight.js Stylesheets -->
         <link rel="stylesheet" href="{{ path_to_root }}highlight.css">
@@ -50,7 +47,7 @@
 
         {{#if mathjax_support}}
         <!-- MathJax -->
-        <script async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
+        <script async src="MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
         {{/if}}
     </head>
     <body class="sidebar-visible no-js">
@@ -61,35 +58,6 @@
             var default_theme = window.matchMedia("(prefers-color-scheme: dark)").matches ? "{{ preferred_dark_theme }}" : "{{ default_theme }}";
         </script>
 
-        <!-- Work around some values being stored in localStorage wrapped in quotes -->
-        <script>
-            try {
-                var theme = localStorage.getItem('mdbook-theme');
-                var sidebar = localStorage.getItem('mdbook-sidebar');
-
-                if (theme.startsWith('"') && theme.endsWith('"')) {
-                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));
-                }
-
-                if (sidebar.startsWith('"') && sidebar.endsWith('"')) {
-                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));
-                }
-            } catch (e) { }
-        </script>
-
-        <!-- Set the theme before any content is loaded, prevents flash -->
-        <script>
-            var theme;
-            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }
-            if (theme === null || theme === undefined) { theme = default_theme; }
-            var html = document.querySelector('html');
-            html.classList.remove('{{ default_theme }}')
-            html.classList.add(theme);
-            var body = document.querySelector('body');
-            body.classList.remove('no-js')
-            body.classList.add('js');
-        </script>
-
         <input type="checkbox" id="sidebar-toggle-anchor" class="hidden">
 
         <!-- Hide / unhide sidebar before it is displayed -->
@@ -312,54 +280,8 @@
         </script>
         {{/if}}
 
-        {{#if google_analytics}}
-        <!-- Google Analytics Tag -->
-        <script>
-            var localAddrs = ["localhost", "127.0.0.1", ""];
-
-            // make sure we don't activate google analytics if the developer is
-            // inspecting the book locally...
-            if (localAddrs.indexOf(document.location.hostname) === -1) {
-                (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
-                (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
-                m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
-                })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
-
-                ga('create', '{{google_analytics}}', 'auto');
-                ga('send', 'pageview');
-            }
-        </script>
-        {{/if}}
-
-        {{#if playground_line_numbers}}
-        <script>
-            window.playground_line_numbers = true;
-        </script>
-        {{/if}}
-
-        {{#if playground_copyable}}
-        <script>
-            window.playground_copyable = true;
-        </script>
-        {{/if}}
-
-        {{#if playground_js}}
-        <script src="{{ path_to_root }}ace.js"></script>
-        <script src="{{ path_to_root }}editor.js"></script>
-        <script src="{{ path_to_root }}mode-rust.js"></script>
-        <script src="{{ path_to_root }}theme-dawn.js"></script>
-        <script src="{{ path_to_root }}theme-tomorrow_night.js"></script>
-        {{/if}}
-
-        {{#if search_js}}
-        <script src="{{ path_to_root }}elasticlunr.min.js"></script>
-        <script src="{{ path_to_root }}mark.min.js"></script>
-        <script src="{{ path_to_root }}searcher.js"></script>
-        {{/if}}
-
-        <script src="{{ path_to_root }}clipboard.min.js"></script>
-        <script src="{{ path_to_root }}highlight.js"></script>
-        <script src="{{ path_to_root }}book.js"></script>
+        <script src="{{ path_to_root }}highlight.js" type="text/javascript" charset="utf-8"></script>
+        <script src="{{ path_to_root }}book.js" type="text/javascript" charset="utf-8"></script>
 
         <!-- Custom JS scripts -->
         {{#each additional_js}}
--- ./rustc-1.79.0-src/src/doc/rustc/src/linker-plugin-lto.md	1153704088.000000000
+++ ./src/doc/rustc/src/linker-plugin-lto.md	1718793730.087725664
@@ -112,7 +112,7 @@ targeting Windows-like targets
 This is fixed if you explicitly set the target, for example
 `cargo build --target x86_64-pc-windows-msvc`
 Without an explicit --target the flags will be passed to all compiler invocations (including build
-scripts and proc macros), see [cargo docs on rustflags](../cargo/reference/config.html#buildrustflags)
+scripts and proc macros), see [cargo docs on rustflags](../../../cargo/book/reference/config.html#buildrustflags)
 
 If you have dependencies using the `cc` crate, you will need to set these
 environment variables:
--- ./rustc-1.79.0-src/src/doc/rustc/src/platform-support/fuchsia.md	1153704088.000000000
+++ ./src/doc/rustc/src/platform-support/fuchsia.md	1718793730.088909429
@@ -931,7 +931,7 @@ attach and load any relevant debug symbo
 [Fuchsia]: https://fuchsia.dev/
 [source tree]: https://fuchsia.dev/fuchsia-src/get-started/learn/build
 [rustup]: https://rustup.rs/
-[cargo]: ../../cargo/index.html
+[cargo]: ../../../../cargo/book/index.html
 [Fuchsia SDK]: https://chrome-infra-packages.appspot.com/p/fuchsia/sdk/core
 [overview of CML]: https://fuchsia.dev/fuchsia-src/concepts/components/v2/component_manifests
 [reference for the file format]: https://fuchsia.dev/reference/cml
--- ./rustc-1.79.0-src/src/doc/rustc/src/targets/custom.md	1153704088.000000000
+++ ./src/doc/rustc/src/targets/custom.md	1718793730.090080985
@@ -14,4 +14,4 @@ To see it for a different target, add th
 rustc +nightly -Z unstable-options --target=wasm32-unknown-unknown --print target-spec-json
 ```
 
-To use a custom target, see the (unstable) [`build-std` feature](../../cargo/reference/unstable.html#build-std) of `cargo`.
+To use a custom target, see the (unstable) [`build-std` feature](../../../../cargo/book/reference/unstable.html#build-std) of `cargo`.
--- ./rustc-1.79.0-src/src/doc/rustc/src/tests/index.md	1153704088.000000000
+++ ./src/doc/rustc/src/tests/index.md	1718793730.090967131
@@ -301,7 +301,7 @@ Experimental support for using custom te
 [`--test` option]: ../command-line-arguments.md#option-test
 [`-Z panic-abort-tests`]: https://github.com/rust-lang/rust/issues/67650
 [`available_parallelism`]: ../../std/thread/fn.available_parallelism.html
-[`cargo test`]: ../../cargo/commands/cargo-test.html
+[`cargo test`]: ../../../../cargo/book/commands/cargo-test.html
 [`libtest`]: ../../test/index.html
 [`main` function]: ../../reference/crates-and-source-files.html#main-functions
 [`Result`]: ../../std/result/index.html
@@ -311,7 +311,7 @@ Experimental support for using custom te
 [attribute-should_panic]: ../../reference/attributes/testing.html#the-should_panic-attribute
 [attribute-test]: ../../reference/attributes/testing.html#the-test-attribute
 [bench-docs]: ../../unstable-book/library-features/test.html
-[Cargo]: ../../cargo/index.html
+[Cargo]: ../../../../cargo/book/index.html
 [crate type]: ../../reference/linkage.html
 [custom_test_frameworks documentation]: ../../unstable-book/language-features/custom-test-frameworks.html
 [nightly channel]: ../../book/appendix-07-nightly-rust.html
--- ./rustc-1.79.0-src/src/doc/rustc/src/what-is-rustc.md	1153704088.000000000
+++ ./src/doc/rustc/src/what-is-rustc.md	1718793730.091528785
@@ -5,7 +5,7 @@ language, provided by the project itself
 produce binary code, either as a library or executable.
 
 Most Rust programmers don't invoke `rustc` directly, but instead do it through
-[Cargo](../cargo/index.html). It's all in service of `rustc` though! If you
+[Cargo](../../../cargo/book/index.html). It's all in service of `rustc` though! If you
 want to see how Cargo calls `rustc`, you can
 
 ```bash
--- ./rustc-1.79.0-src/src/doc/unstable-book/src/compiler-flags/branch-protection.md	1153704088.000000000
+++ ./src/doc/unstable-book/src/compiler-flags/branch-protection.md	1718793730.092295725
@@ -15,4 +15,4 @@ For example, `-Z branch-protection=bti,p
 
 Rust's standard library does not ship with BTI or pointer authentication enabled by default.
 In Cargo projects the standard library can be recompiled with pointer authentication using the nightly
-[build-std](../../cargo/reference/unstable.html#build-std) feature.
+[build-std](../../../../cargo/book/reference/unstable.html#build-std) feature.
--- ./rustc-1.79.0-src/src/doc/unstable-book/src/compiler-flags/control-flow-guard.md	1153704088.000000000
+++ ./src/doc/unstable-book/src/compiler-flags/control-flow-guard.md	1718793730.092903587
@@ -39,7 +39,7 @@ It is strongly recommended to also enabl
 
 To enable CFG in the standard library, use the [cargo `-Z build-std` functionality][build-std] to recompile the standard library with the same configuration options as the main program.
 
-[build-std]: ../../cargo/reference/unstable.html#build-std
+[build-std]: ../../../../cargo/book/reference/unstable.html#build-std
 
 For example:
 ```cmd
--- ./rustc-1.79.0-src/src/doc/unstable-book/src/compiler-flags/sanitizer.md	1153704088.000000000
+++ ./src/doc/unstable-book/src/compiler-flags/sanitizer.md	1718793730.093670194
@@ -854,7 +854,7 @@ It is strongly recommended to combine sa
 instrumented standard library, for example using [cargo `-Zbuild-std`
 functionality][build-std].
 
-[build-std]: ../../cargo/reference/unstable.html#build-std
+[build-std]: ../../../../cargo/book/reference/unstable.html#build-std
 
 # Working with other languages
 
--- ./rustc-1.79.0-src/src/etc/rust-gdbgui	1153704088.000000000
+++ ./src/etc/rust-gdbgui	1718793524.135866448
@@ -40,7 +40,7 @@ else
 fi
 
 # Find out where the pretty printer Python module is
-RUSTC_SYSROOT="$("$RUSTC" --print=sysroot)"
+RUSTC_SYSROOT="$(if type "$RUSTC" >/dev/null 2>&1; then "$RUSTC" --print=sysroot; else echo /usr; fi)"
 GDB_PYTHON_MODULE_DIRECTORY="$RUSTC_SYSROOT/lib/rustlib/etc"
 # Get the commit hash for path remapping
 RUSTC_COMMIT_HASH="$("$RUSTC" -vV | sed -n 's/commit-hash: \([a-zA-Z0-9_]*\)/\1/p')"
--- ./rustc-1.79.0-src/src/etc/rust-lldb	1153704088.000000000
+++ ./src/etc/rust-lldb	1718793521.920070348
@@ -7,10 +7,10 @@ set -e
 host=$(rustc -vV | sed -n -e 's/^host: //p')
 
 # Find out where to look for the pretty printer Python module
-RUSTC_SYSROOT=$(rustc --print sysroot)
+RUSTC_SYSROOT="$(if type "$RUSTC" >/dev/null 2>&1; then "$RUSTC" --print=sysroot; else echo /usr; fi)"
 RUST_LLDB="$RUSTC_SYSROOT/lib/rustlib/$host/bin/lldb"
 
-lldb=lldb
+lldb=lldb-16
 if [ -f "$RUST_LLDB" ]; then
     lldb="$RUST_LLDB"
 else
--- ./rustc-1.79.0-src/src/librustdoc/html/static/css/rustdoc.css	1153704088.000000000
+++ ./src/librustdoc/html/static/css/rustdoc.css	1718793530.704796142
@@ -86,14 +86,6 @@
 	font-display: swap;
 }
 
-/* Avoid using legacy CJK serif fonts in Windows like Batang. */
-@font-face {
-	font-family: 'NanumBarunGothic';
-	src: url("NanumBarunGothic-0f09457c7a19b7c6.ttf.woff2") format("woff2");
-	font-display: swap;
-	unicode-range: U+AC00-D7AF, U+1100-11FF, U+3130-318F, U+A960-A97F, U+D7B0-D7FF;
-}
-
 * {
 	box-sizing: border-box;
 }
--- ./rustc-1.79.0-src/src/librustdoc/html/static_files.rs	1153704088.000000000
+++ ./src/librustdoc/html/static_files.rs	1718793530.706599018
@@ -118,8 +118,6 @@ static_files! {
     source_code_pro_semibold => "static/fonts/SourceCodePro-Semibold.ttf.woff2",
     source_code_pro_italic => "static/fonts/SourceCodePro-It.ttf.woff2",
     source_code_pro_license => "static/fonts/SourceCodePro-LICENSE.txt",
-    nanum_barun_gothic_regular => "static/fonts/NanumBarunGothic.ttf.woff2",
-    nanum_barun_gothic_license => "static/fonts/NanumBarunGothic-LICENSE.txt",
 }
 
 pub(crate) static SCRAPE_EXAMPLES_HELP_MD: &str = include_str!("static/scrape-examples-help.md");
--- ./rustc-1.79.0-src/src/tools/cargo/Cargo.toml	1153704088.000000000
+++ ./src/tools/cargo/Cargo.toml	1718795267.533696814
@@ -28,7 +28,6 @@ cargo = { path = "" }
 cargo-credential = { version = "0.4.2", path = "credential/cargo-credential" }
 cargo-credential-libsecret = { version = "0.4.2", path = "credential/cargo-credential-libsecret" }
 cargo-credential-macos-keychain = { version = "0.4.2", path = "credential/cargo-credential-macos-keychain" }
-cargo-credential-wincred = { version = "0.4.2", path = "credential/cargo-credential-wincred" }
 cargo-platform = { path = "crates/cargo-platform", version = "0.1.5" }
 cargo-test-macro = { version = "0.2.0", path = "crates/cargo-test-macro" }
 cargo-test-support = { version = "0.2.0", path = "crates/cargo-test-support" }
@@ -77,7 +76,7 @@ proptest = "1.4.0"
 pulldown-cmark = { version = "0.10.2", default-features = false, features = ["html"] }
 rand = "0.8.5"
 regex = "1.10.4"
-rusqlite = { version = "0.31.0", features = ["bundled"] }
+rusqlite = { version = "0.31.0", features = [] }
 rustfix = { version = "0.8.2", path = "crates/rustfix" }
 same-file = "1.0.6"
 security-framework = "2.10.0"
@@ -107,7 +106,6 @@ unicode-xid = "0.2.4"
 url = "2.5.0"
 varisat = "0.2.2"
 walkdir = "2.5.0"
-windows-sys = "0.52"
 
 [workspace.lints.rust]
 rust_2018_idioms = "warn" # TODO: could this be removed?
@@ -214,27 +212,9 @@ libc.workspace = true
 [target.'cfg(target_os = "linux")'.dependencies]
 cargo-credential-libsecret.workspace = true
 
-[target.'cfg(target_os = "macos")'.dependencies]
-cargo-credential-macos-keychain.workspace = true
-
 [target.'cfg(not(windows))'.dependencies]
 openssl = { workspace = true, optional = true }
 
-[target.'cfg(windows)'.dependencies]
-cargo-credential-wincred.workspace = true
-
-[target.'cfg(windows)'.dependencies.windows-sys]
-workspace = true
-features = [
-  "Win32_Foundation",
-  "Win32_Security",
-  "Win32_Storage_FileSystem",
-  "Win32_System_IO",
-  "Win32_System_Console",
-  "Win32_System_JobObjects",
-  "Win32_System_Threading",
-]
-
 [dev-dependencies]
 annotate-snippets = { workspace = true, features = ["testing-colors"] }
 cargo-test-macro.workspace = true
@@ -252,10 +232,8 @@ test = false
 doc = false
 
 [features]
-vendored-openssl = ["openssl/vendored"]
-vendored-libgit2 = ["libgit2-sys/vendored"]
+# Debian: removed vendoring flags
 # This is primarily used by rust-lang/rust distributing cargo the executable.
-all-static = ['vendored-openssl', 'curl/static-curl', 'curl/force-system-lib-on-osx', 'vendored-libgit2']
 
 [lints]
 workspace = true
--- ./rustc-1.79.0-src/src/tools/cargo/crates/cargo-test-macro/src/lib.rs	1153704088.000000000
+++ ./src/tools/cargo/crates/cargo-test-macro/src/lib.rs	1718795499.936482073
@@ -240,6 +240,14 @@ fn check_command(command_path: &Path, ar
         }
     };
     if !output.status.success() {
+        // Debian specific patch, upstream wontfix:
+        // qemu has a faulty vfork where it fails to fail if a command is not
+        // found, with a unix_wait_status of 32512, or 0x7f00, 7f meaning
+        // exit code 127. See https://github.com/rust-lang/rust/issues/90825
+        use std::os::unix::process::ExitStatusExt;
+        if output.status.into_raw() == 0x7f00 {
+            return false;
+        }
         panic!(
             "expected command `{command_name}` to be runnable, got error {}:\n\
             stderr:{}\n\
--- ./rustc-1.79.0-src/src/tools/cargo/crates/cargo-test-support/Cargo.toml	1153704088.000000000
+++ ./src/tools/cargo/crates/cargo-test-support/Cargo.toml	1718795141.579173165
@@ -33,8 +33,5 @@ toml.workspace = true
 url.workspace = true
 walkdir.workspace = true
 
-[target.'cfg(windows)'.dependencies]
-windows-sys = { workspace = true, features = ["Win32_Storage_FileSystem"] }
-
 [lints]
 workspace = true
--- ./rustc-1.79.0-src/src/tools/cargo/crates/home/Cargo.toml	1153704088.000000000
+++ ./src/tools/cargo/crates/home/Cargo.toml	1718795143.722803558
@@ -17,8 +17,5 @@ homepage.workspace = true
 repository.workspace = true
 description = "Shared definitions of home directories."
 
-[target.'cfg(windows)'.dependencies]
-windows-sys = { workspace = true, features = ["Win32_Foundation", "Win32_UI_Shell", "Win32_System_Com"] }
-
 [lints]
 workspace = true
--- ./rustc-1.79.0-src/src/tools/cargo/credential/cargo-credential/Cargo.toml	1153704088.000000000
+++ ./src/tools/cargo/credential/cargo-credential/Cargo.toml	1718795143.724421190
@@ -18,9 +18,6 @@ time.workspace = true
 [target.'cfg(unix)'.dependencies]
 libc.workspace = true
 
-[target.'cfg(windows)'.dependencies]
-windows-sys = { workspace = true, features = ["Win32_System_Console", "Win32_Foundation"] }
-
 [dev-dependencies]
 snapbox = { workspace = true, features = ["examples"] }
 
--- ./rustc-1.79.0-src/src/tools/cargo/src/cargo/core/features.rs	1153704088.000000000
+++ ./src/tools/cargo/src/cargo/core/features.rs	1718795534.744094572
@@ -1263,9 +1263,8 @@ pub fn channel() -> String {
             return "dev".to_string();
         }
     }
-    crate::version()
-        .release_channel
-        .unwrap_or_else(|| String::from("dev"))
+    // Debian: always return dev channel
+    String::from("dev")
 }
 
 /// Only for testing and developing. See ["Running with gitoxide as default git backend in tests"][1].
--- ./rustc-1.79.0-src/src/tools/cargo/tests/testsuite/build_script.rs	1153704088.000000000
+++ ./src/tools/cargo/tests/testsuite/build_script.rs	1718795528.347120799
@@ -741,6 +741,9 @@ fn custom_build_linker_bad_host_with_arc
 #[cargo_test]
 fn custom_build_env_var_rustc_linker_cross_arch_host() {
     let target = rustc_host();
+    if cross_compile::disabled() {
+        return;
+    }
     let cross_target = cross_compile::alternate();
     let p = project()
         .file(
@@ -779,6 +782,9 @@ fn custom_build_env_var_rustc_linker_cro
 #[cargo_test]
 fn custom_build_linker_bad_cross_arch_host() {
     let target = rustc_host();
+    if cross_compile::disabled() {
+        return;
+    }
     let cross_target = cross_compile::alternate();
     let p = project()
         .file(
--- ./rustc-1.79.0-src/src/tools/cargo/tests/testsuite/cfg.rs	1153704088.000000000
+++ ./src/tools/cargo/tests/testsuite/cfg.rs	1718795506.635758502
@@ -284,7 +284,7 @@ fn any_ok() {
 
 // https://github.com/rust-lang/cargo/issues/5313
 #[cargo_test]
-#[cfg(all(target_arch = "x86_64", target_os = "linux", target_env = "gnu"))]
+#[cfg(all(target_arch = "x86_64", target_os = "linux", target_env = "gnu", target_pointer_width = "64"))]
 fn cfg_looks_at_rustflags_for_target() {
     let p = project()
         .file(
--- ./rustc-1.79.0-src/src/tools/cargo/tests/testsuite/credential_process.rs	1153704088.000000000
+++ ./src/tools/cargo/tests/testsuite/credential_process.rs	1718795470.782897578
@@ -64,7 +64,7 @@ fn get_token_test() -> (Project, TestReg
     (p, server)
 }
 
-#[cargo_test]
+#[allow(dead_code)]
 fn publish() {
     // Checks that credential-process is used for `cargo publish`.
     let (p, _t) = get_token_test();
@@ -86,7 +86,7 @@ You may press ctrl-c [..]
         .run();
 }
 
-#[cargo_test]
+#[allow(dead_code)]
 fn basic_unsupported() {
     // Non-action commands don't support login/logout.
     let registry = registry::RegistryBuilder::new()
@@ -122,7 +122,7 @@ Caused by:
         .run();
 }
 
-#[cargo_test]
+#[allow(dead_code)]
 fn login() {
     let registry = registry::RegistryBuilder::new()
         .no_configure_token()
@@ -143,7 +143,7 @@ fn login() {
         .run();
 }
 
-#[cargo_test]
+#[allow(dead_code)]
 fn logout() {
     let server = registry::RegistryBuilder::new()
         .no_configure_token()
@@ -162,7 +162,7 @@ fn logout() {
         .run();
 }
 
-#[cargo_test]
+#[allow(dead_code)]
 fn yank() {
     let (p, _t) = get_token_test();
 
@@ -177,7 +177,7 @@ fn yank() {
         .run();
 }
 
-#[cargo_test]
+#[allow(dead_code)]
 fn owner() {
     let (p, _t) = get_token_test();
 
@@ -192,7 +192,7 @@ fn owner() {
         .run();
 }
 
-#[cargo_test]
+#[allow(dead_code)]
 fn invalid_token_output() {
     // Error when credential process does not output the expected format for a token.
     let cred_proj = project()
--- ./rustc-1.79.0-src/src/tools/cargo/tests/testsuite/git_auth.rs	1153704088.000000000
+++ ./src/tools/cargo/tests/testsuite/git_auth.rs	1718795470.784509715
@@ -103,7 +103,7 @@ fn setup_failed_auth_test() -> (SocketAd
 }
 
 // Tests that HTTP auth is offered from `credential.helper`.
-#[cargo_test]
+#[allow(dead_code)]
 fn http_auth_offered() {
     let (addr, t, connections) = setup_failed_auth_test();
     let p = project()
@@ -168,7 +168,7 @@ Caused by:
 }
 
 // Boy, sure would be nice to have a TLS implementation in rust!
-#[cargo_test]
+#[allow(dead_code)]
 fn https_something_happens() {
     let server = TcpListener::bind("127.0.0.1:0").unwrap();
     let addr = server.local_addr().unwrap();
--- ./rustc-1.79.0-src/src/tools/cargo/tests/testsuite/metadata.rs	1153704088.000000000
+++ ./src/tools/cargo/tests/testsuite/metadata.rs	1718795521.910700785
@@ -4004,7 +4004,7 @@ fn dep_kinds_workspace() {
 // Creating non-utf8 path is an OS-specific pain, so let's run this only on
 // linux, where arbitrary bytes work.
 #[cfg(target_os = "linux")]
-#[cargo_test]
+#[allow(dead_code)]
 fn cargo_metadata_non_utf8() {
     use std::ffi::OsString;
     use std::os::unix::ffi::OsStringExt;
--- ./rustc-1.79.0-src/src/tools/cargo/tests/testsuite/net_config.rs	1153704088.000000000
+++ ./src/tools/cargo/tests/testsuite/net_config.rs	1718795470.785264785
@@ -2,7 +2,7 @@
 
 use cargo_test_support::project;
 
-#[cargo_test]
+#[allow(dead_code)]
 fn net_retry_loads_from_config() {
     let p = project()
         .file(
@@ -38,7 +38,7 @@ fn net_retry_loads_from_config() {
         .run();
 }
 
-#[cargo_test]
+#[allow(dead_code)]
 fn net_retry_git_outputs_warning() {
     let p = project()
         .file(
--- ./rustc-1.79.0-src/src/tools/cargo/tests/testsuite/publish.rs	1153704088.000000000
+++ ./src/tools/cargo/tests/testsuite/publish.rs	1718795490.650955168
@@ -88,7 +88,7 @@ fn validate_upload_li() {
     );
 }
 
-#[cargo_test]
+#[allow(dead_code)]
 fn simple() {
     let registry = RegistryBuilder::new().http_api().http_index().build();
 
@@ -131,7 +131,7 @@ You may press ctrl-c to skip waiting; th
 
 // Check that the `token` key works at the root instead of under a
 // `[registry]` table.
-#[cargo_test]
+#[allow(dead_code)]
 fn simple_publish_with_http() {
     let _reg = registry::RegistryBuilder::new()
         .http_api()
@@ -172,7 +172,7 @@ You may press ctrl-c to skip waiting; th
         .run();
 }
 
-#[cargo_test]
+#[allow(dead_code)]
 fn simple_publish_with_asymmetric() {
     let _reg = registry::RegistryBuilder::new()
         .http_api()
@@ -216,7 +216,7 @@ You may press ctrl-c to skip waiting; th
         .run();
 }
 
-#[cargo_test]
+#[allow(dead_code)]
 fn old_token_location() {
     // `publish` generally requires a remote registry
     let registry = registry::RegistryBuilder::new().http_api().build();
@@ -274,7 +274,7 @@ You may press ctrl-c [..]
     // Other tests will verify the endpoint gets the right payload.
 }
 
-#[cargo_test]
+#[allow(dead_code)]
 fn simple_with_index() {
     // `publish` generally requires a remote registry
     let registry = registry::RegistryBuilder::new().http_api().build();
@@ -320,7 +320,7 @@ You may press ctrl-c [..]
     // Other tests will verify the endpoint gets the right payload.
 }
 
-#[cargo_test]
+#[allow(dead_code)]
 fn git_deps() {
     // Use local registry for faster test times since no publish will occur
     let registry = registry::init();
@@ -359,7 +359,7 @@ the `git` specification will be removed
         .run();
 }
 
-#[cargo_test]
+#[allow(dead_code)]
 fn path_dependency_no_version() {
     // Use local registry for faster test times since no publish will occur
     let registry = registry::init();
@@ -400,7 +400,7 @@ the `path` specification will be removed
         .run();
 }
 
-#[cargo_test]
+#[allow(dead_code)]
 fn unpublishable_crate() {
     // Use local registry for faster test times since no publish will occur
     let registry = registry::init();
@@ -434,7 +434,7 @@ fn unpublishable_crate() {
         .run();
 }
 
-#[cargo_test]
+#[allow(dead_code)]
 fn dont_publish_dirty() {
     // Use local registry for faster test times since no publish will occur
     let registry = registry::init();
@@ -477,7 +477,7 @@ to proceed despite this and include the
         .run();
 }
 
-#[cargo_test]
+#[allow(dead_code)]
 fn publish_clean() {
     // `publish` generally requires a remote registry
     let registry = registry::RegistryBuilder::new().http_api().build();
@@ -526,7 +526,7 @@ You may press ctrl-c to skip waiting; th
     // Other tests will verify the endpoint gets the right payload.
 }
 
-#[cargo_test]
+#[allow(dead_code)]
 fn publish_in_sub_repo() {
     // `publish` generally requires a remote registry
     let registry = registry::RegistryBuilder::new().http_api().build();
@@ -576,7 +576,7 @@ You may press ctrl-c [..]
     // Other tests will verify the endpoint gets the right payload.
 }
 
-#[cargo_test]
+#[allow(dead_code)]
 fn publish_when_ignored() {
     // `publish` generally requires a remote registry
     let registry = registry::RegistryBuilder::new().http_api().build();
@@ -626,7 +626,7 @@ You may press ctrl-c [..]
     // Other tests will verify the endpoint gets the right payload.
 }
 
-#[cargo_test]
+#[allow(dead_code)]
 fn ignore_when_crate_ignored() {
     // `publish` generally requires a remote registry
     let registry = registry::RegistryBuilder::new().http_api().build();
@@ -675,7 +675,7 @@ You may press ctrl-c [..]
     // Other tests will verify the endpoint gets the right payload.
 }
 
-#[cargo_test]
+#[allow(dead_code)]
 fn new_crate_rejected() {
     // Use local registry for faster test times since no publish will occur
     let registry = registry::init();
@@ -709,7 +709,7 @@ fn new_crate_rejected() {
         .run();
 }
 
-#[cargo_test]
+#[allow(dead_code)]
 fn dry_run() {
     // Use local registry for faster test times since no publish will occur
     let registry = registry::init();
@@ -753,7 +753,7 @@ See [..]
     assert!(!registry::api_path().join("api/v1/crates/new").exists());
 }
 
-#[cargo_test]
+#[allow(dead_code)]
 fn registry_not_in_publish_list() {
     let p = project()
         .file(
@@ -787,7 +787,7 @@ The registry `alternative` is not listed
         .run();
 }
 
-#[cargo_test]
+#[allow(dead_code)]
 fn publish_empty_list() {
     let p = project()
         .file(
@@ -817,7 +817,7 @@ fn publish_empty_list() {
         .run();
 }
 
-#[cargo_test]
+#[allow(dead_code)]
 fn publish_allowed_registry() {
     let _registry = RegistryBuilder::new()
         .http_api()
@@ -878,7 +878,7 @@ You may press ctrl-c [..]
     );
 }
 
-#[cargo_test]
+#[allow(dead_code)]
 fn publish_implicitly_to_only_allowed_registry() {
     let _registry = RegistryBuilder::new()
         .http_api()
@@ -983,7 +983,7 @@ fn publish_failed_with_index_and_only_al
         .run();
 }
 
-#[cargo_test]
+#[allow(dead_code)]
 fn publish_fail_with_no_registry_specified() {
     let p = project().build();
 
@@ -1018,7 +1018,7 @@ The registry `crates-io` is not listed i
         .run();
 }
 
-#[cargo_test]
+#[allow(dead_code)]
 fn block_publish_no_registry() {
     let p = project()
         .file(
@@ -1049,7 +1049,7 @@ fn block_publish_no_registry() {
 }
 
 // Explicitly setting `crates-io` in the publish list.
-#[cargo_test]
+#[allow(dead_code)]
 fn publish_with_crates_io_explicit() {
     // `publish` generally requires a remote registry
     let registry = registry::RegistryBuilder::new().http_api().build();
@@ -1103,7 +1103,7 @@ You may press ctrl-c [..]
         .run();
 }
 
-#[cargo_test]
+#[allow(dead_code)]
 fn publish_with_select_features() {
     // `publish` generally requires a remote registry
     let registry = registry::RegistryBuilder::new().http_api().build();
@@ -1155,7 +1155,7 @@ You may press ctrl-c [..]
         .run();
 }
 
-#[cargo_test]
+#[allow(dead_code)]
 fn publish_with_all_features() {
     // `publish` generally requires a remote registry
     let registry = registry::RegistryBuilder::new().http_api().build();
@@ -1207,7 +1207,7 @@ You may press ctrl-c [..]
         .run();
 }
 
-#[cargo_test]
+#[allow(dead_code)]
 fn publish_with_no_default_features() {
     // Use local registry for faster test times since no publish will occur
     let registry = registry::init();
@@ -1244,7 +1244,7 @@ fn publish_with_no_default_features() {
         .run();
 }
 
-#[cargo_test]
+#[allow(dead_code)]
 fn publish_with_patch() {
     let registry = RegistryBuilder::new().http_api().http_index().build();
     Package::new("bar", "1.0.0").publish();
@@ -1351,7 +1351,7 @@ You may press ctrl-c [..]
     );
 }
 
-#[cargo_test]
+#[allow(dead_code)]
 fn publish_checks_for_token_before_verify() {
     let registry = registry::RegistryBuilder::new()
         .no_configure_token()
@@ -1401,7 +1401,7 @@ fn publish_checks_for_token_before_verif
         .run();
 }
 
-#[cargo_test]
+#[allow(dead_code)]
 fn publish_with_bad_source() {
     let p = project()
         .file(
@@ -1450,7 +1450,7 @@ include `--registry crates-io` to use cr
 }
 
 // A dependency with both `git` and `version`.
-#[cargo_test]
+#[allow(dead_code)]
 fn publish_git_with_version() {
     let registry = RegistryBuilder::new().http_api().http_index().build();
 
@@ -1594,7 +1594,7 @@ You may press ctrl-c [..]
     );
 }
 
-#[cargo_test]
+#[allow(dead_code)]
 fn publish_dev_dep_no_version() {
     let registry = RegistryBuilder::new().http_api().http_index().build();
 
@@ -1984,7 +1984,7 @@ features = ["cat"]
         )],
     );
 }
-#[cargo_test]
+#[allow(dead_code)]
 fn credentials_ambiguous_filename() {
     // `publish` generally requires a remote registry
     let registry = registry::RegistryBuilder::new().http_api().build();
@@ -2041,7 +2041,7 @@ You may press ctrl-c [..]
 
 // --index will not load registry.token to avoid possibly leaking
 // crates.io token to another server.
-#[cargo_test]
+#[allow(dead_code)]
 fn index_requires_token() {
     // Use local registry for faster test times since no publish will occur
     let registry = registry::init();
@@ -2077,7 +2077,7 @@ fn index_requires_token() {
 }
 
 // publish with source replacement without --registry
-#[cargo_test]
+#[allow(dead_code)]
 fn cratesio_source_replacement() {
     registry::init();
     let p = project()
@@ -2107,7 +2107,7 @@ include `--registry dummy-registry` or `
         .run();
 }
 
-#[cargo_test]
+#[allow(dead_code)]
 fn publish_with_missing_readme() {
     // Use local registry for faster test times since no publish will occur
     let registry = registry::init();
@@ -2156,7 +2156,7 @@ Caused by:
 }
 
 // Registry returns an API error.
-#[cargo_test]
+#[allow(dead_code)]
 fn api_error_json() {
     let _registry = registry::RegistryBuilder::new()
         .alternative()
@@ -2205,7 +2205,7 @@ Caused by:
 }
 
 // Registry returns an API error with a 200 status code.
-#[cargo_test]
+#[allow(dead_code)]
 fn api_error_200() {
     let _registry = registry::RegistryBuilder::new()
         .alternative()
@@ -2254,7 +2254,7 @@ Caused by:
 }
 
 // Registry returns an error code without a JSON message.
-#[cargo_test]
+#[allow(dead_code)]
 fn api_error_code() {
     let _registry = registry::RegistryBuilder::new()
         .alternative()
@@ -2310,7 +2310,7 @@ Caused by:
 }
 
 // Registry has a network error.
-#[cargo_test]
+#[allow(dead_code)]
 fn api_curl_error() {
     let _registry = registry::RegistryBuilder::new()
         .alternative()
@@ -2361,7 +2361,7 @@ Caused by:
 }
 
 // Registry returns an invalid response.
-#[cargo_test]
+#[allow(dead_code)]
 fn api_other_error() {
     let _registry = registry::RegistryBuilder::new()
         .alternative()
@@ -2412,7 +2412,7 @@ Caused by:
         .run();
 }
 
-#[cargo_test]
+#[allow(dead_code)]
 fn in_package_workspace() {
     let registry = RegistryBuilder::new().http_api().http_index().build();
 
@@ -2465,7 +2465,7 @@ You may press ctrl-c [..]
     validate_upload_li();
 }
 
-#[cargo_test]
+#[allow(dead_code)]
 fn with_duplicate_spec_in_members() {
     // Use local registry for faster test times since no publish will occur
     let registry = registry::init();
@@ -2520,7 +2520,7 @@ fn with_duplicate_spec_in_members() {
         .run();
 }
 
-#[cargo_test]
+#[allow(dead_code)]
 fn in_package_workspace_with_members_with_features_old() {
     let registry = RegistryBuilder::new().http_api().http_index().build();
 
@@ -2573,7 +2573,7 @@ You may press ctrl-c [..]
     validate_upload_li();
 }
 
-#[cargo_test]
+#[allow(dead_code)]
 fn in_virtual_workspace() {
     // Use local registry for faster test times since no publish will occur
     let registry = registry::init();
@@ -2610,7 +2610,7 @@ fn in_virtual_workspace() {
         .run();
 }
 
-#[cargo_test]
+#[allow(dead_code)]
 fn in_virtual_workspace_with_p() {
     // `publish` generally requires a remote registry
     let registry = registry::RegistryBuilder::new().http_api().build();
@@ -2670,7 +2670,7 @@ You may press ctrl-c [..]
         .run();
 }
 
-#[cargo_test]
+#[allow(dead_code)]
 fn in_package_workspace_not_found() {
     // Use local registry for faster test times since no publish will occur
     let registry = registry::init();
@@ -2715,7 +2715,7 @@ error: package ID specification `li` did
         .run();
 }
 
-#[cargo_test]
+#[allow(dead_code)]
 fn in_package_workspace_found_multiple() {
     // Use local registry for faster test times since no publish will occur
     let registry = registry::init();
@@ -2772,7 +2772,7 @@ error: the `-p` argument must be specifi
         .run();
 }
 
-#[cargo_test]
+#[allow(dead_code)]
 // https://github.com/rust-lang/cargo/issues/10536
 fn publish_path_dependency_without_workspace() {
     // Use local registry for faster test times since no publish will occur
@@ -2819,7 +2819,7 @@ error: package ID specification `bar` di
         .run();
 }
 
-#[cargo_test]
+#[allow(dead_code)]
 fn http_api_not_noop() {
     let registry = registry::RegistryBuilder::new().http_api().build();
 
@@ -2882,7 +2882,7 @@ You may press ctrl-c [..]
     p.cargo("build").run();
 }
 
-#[cargo_test]
+#[allow(dead_code)]
 fn wait_for_first_publish() {
     // Counter for number of tries before the package is "published"
     let arc: Arc<Mutex<u32>> = Arc::new(Mutex::new(0));
@@ -2966,7 +2966,7 @@ You may press ctrl-c to skip waiting; th
 /// A separate test is needed for package names with - or _ as they hit
 /// the responder twice per cargo invocation. If that ever gets changed
 /// this test will need to be changed accordingly.
-#[cargo_test]
+#[allow(dead_code)]
 fn wait_for_first_publish_underscore() {
     // Counter for number of tries before the package is "published"
     let arc: Arc<Mutex<u32>> = Arc::new(Mutex::new(0));
@@ -3064,7 +3064,7 @@ You may press ctrl-c to skip waiting; th
     p.cargo("build").with_status(0).run();
 }
 
-#[cargo_test]
+#[allow(dead_code)]
 fn wait_for_subsequent_publish() {
     // Counter for number of tries before the package is "published"
     let arc: Arc<Mutex<u32>> = Arc::new(Mutex::new(0));
@@ -3158,7 +3158,7 @@ You may press ctrl-c to skip waiting; th
     p.cargo("check").with_status(0).run();
 }
 
-#[cargo_test]
+#[allow(dead_code)]
 fn skip_wait_for_publish() {
     // Intentionally using local registry so the crate never makes it to the index
     let registry = registry::init();
--- ./rustc-1.79.0-src/src/tools/compiletest/Cargo.toml	1153704088.000000000
+++ ./src/tools/compiletest/Cargo.toml	1718795341.214535180
@@ -28,13 +28,3 @@ home = "0.5.5"
 
 [target.'cfg(unix)'.dependencies]
 libc = "0.2"
-
-[target.'cfg(windows)'.dependencies]
-miow = "0.6"
-
-[target.'cfg(windows)'.dependencies.windows]
-version = "0.52.0"
-features = [
-    "Win32_Foundation",
-    "Win32_System_Diagnostics_Debug",
-]
--- ./rustc-1.79.0-src/src/tools/linkchecker/main.rs	1153704088.000000000
+++ ./src/tools/linkchecker/main.rs	1718794970.573369760
@@ -162,7 +162,17 @@ impl Checker {
         for entry in t!(dir.read_dir()).map(|e| t!(e)) {
             let path = entry.path();
             // Goes through symlinks
-            let metadata = t!(fs::metadata(&path));
+            let metadata = fs::metadata(&path);
+            if let Err(err) = metadata {
+                if let Ok(target) = fs::read_link(&path) {
+                    if target.starts_with("/usr/share") {
+                        // broken symlink to /usr/share, ok for our Debian build
+                        return;
+                    }
+                }
+                panic!("error at file {:?} while walking - {:?}", path, err)
+            }
+            let metadata = t!(metadata);
             if metadata.is_dir() {
                 self.walk(&path, report);
             } else {
@@ -175,7 +185,15 @@ impl Checker {
     fn check(&mut self, file: &Path, report: &mut Report) {
         let (pretty_path, entry) = self.load_file(file, report);
         let source = match entry {
-            FileEntry::Missing => panic!("missing file {:?} while walking", file),
+            FileEntry::Missing => {
+                if let Ok(target) = fs::read_link(&file) {
+                    if target.starts_with("/usr/share") {
+                        // broken symlink to /usr/share, ok for our Debian build
+                        return;
+                    }
+                }
+                panic!("missing file {:?} while walking", file)
+            }
             FileEntry::Dir => unreachable!("never with `check` path"),
             FileEntry::OtherFile => return,
             FileEntry::Redirect { .. } => return,
@@ -264,6 +282,16 @@ impl Checker {
         let (target_pretty_path, target_entry) = self.load_file(&path, report);
         let (target_source, target_ids) = match target_entry {
             FileEntry::Missing => {
+                if let Ok(target) = fs::read_link(&path) {
+                    if target.starts_with("/usr/share") {
+                        // broken symlink to /usr/share, ok for our Debian build
+                        return;
+                    }
+                }
+                if url.contains("../../cargo/book/") {
+                    // link to related cargo-doc, ok for our Debian build
+                    return;
+                }
                 if is_exception(file, &target_pretty_path) {
                     report.links_ignored_exception += 1;
                 } else {
--- ./rustc-1.79.0-src/src/tools/rust-analyzer/Cargo.toml	1153704088.000000000
+++ ./src/tools/rust-analyzer/Cargo.toml	1718794514.697175766
@@ -1,5 +1,14 @@
 [workspace]
-members = ["xtask/", "lib/*", "crates/*"]
+members = [
+  "xtask/",
+  "lib/*",
+  "crates/proc-macro-srv",
+  "crates/proc-macro-srv-cli",
+  "crates/tt",
+  "crates/mbe",
+  "crates/paths",
+  "crates/proc-macro-api",
+]
 exclude = ["crates/proc-macro-srv/proc-macro-test/imp"]
 resolver = "2"
 
--- ./rustc-1.79.0-src/src/tools/rust-analyzer/crates/profile/Cargo.toml	1153704088.000000000
+++ ./src/tools/rust-analyzer/crates/profile/Cargo.toml	1718795143.730465480
@@ -23,9 +23,6 @@ jemalloc-ctl = { version = "0.5.0", pack
 [target.'cfg(target_os = "linux")'.dependencies]
 perf-event = "=0.4.7"
 
-[target.'cfg(windows)'.dependencies]
-winapi = { version = "0.3.9", features = ["processthreadsapi", "psapi"] }
-
 [features]
 cpu_profiler = []
 jemalloc = ["jemalloc-ctl"]
--- ./rustc-1.79.0-src/src/tools/rust-analyzer/crates/rust-analyzer/Cargo.toml	1153704088.000000000
+++ ./src/tools/rust-analyzer/crates/rust-analyzer/Cargo.toml	1718795143.731360919
@@ -68,12 +68,6 @@ vfs-notify.workspace = true
 vfs.workspace = true
 paths.workspace = true
 
-[target.'cfg(windows)'.dependencies]
-winapi = "0.3.9"
-
-[target.'cfg(not(target_env = "msvc"))'.dependencies]
-jemallocator = { version = "0.5.0", package = "tikv-jemallocator", optional = true }
-
 [dev-dependencies]
 expect-test = "1.4.0"
 xshell.workspace = true
--- ./rustc-1.79.0-src/src/tools/rust-analyzer/crates/stdx/Cargo.toml	1153704088.000000000
+++ ./src/tools/rust-analyzer/crates/stdx/Cargo.toml	1718795143.732734390
@@ -20,10 +20,6 @@ crossbeam-channel = "0.5.5"
 itertools.workspace = true
 # Think twice before adding anything here
 
-[target.'cfg(windows)'.dependencies]
-miow = "0.6.0"
-winapi = { version = "0.3.9", features = ["winerror"] }
-
 [features]
 # Uncomment to enable for the whole crate graph
 # default = [ "backtrace" ]
--- ./rustc-1.79.0-src/src/tools/rust-installer/install-template.sh	1153704088.000000000
+++ ./src/tools/rust-installer/install-template.sh	1718793671.846374865
@@ -617,7 +617,10 @@ install_components() {
 
             maybe_backup_path "$_file_install_path"
 
-            if echo "$_file" | grep "^bin/" > /dev/null || test -x "$_src_dir/$_component/$_file"
+            if [ -h "$_src_dir/$_component/$_file" ]
+            then
+            run cp -d "$_src_dir/$_component/$_file" "$_file_install_path"
+            elif echo "$_file" | grep "^bin/" > /dev/null || test -x "$_src_dir/$_component/$_file"
             then
             run cp "$_src_dir/$_component/$_file" "$_file_install_path"
             run chmod 755 "$_file_install_path"
@@ -639,7 +642,7 @@ install_components() {
 
             maybe_backup_path "$_file_install_path"
 
-            run cp -R "$_src_dir/$_component/$_file" "$_file_install_path"
+            run cp -dR "$_src_dir/$_component/$_file" "$_file_install_path"
             critical_need_ok "failed to copy directory"
 
                     # Set permissions. 0755 for dirs, 644 for files
--- ./rustc-1.79.0-src/tests/codegen/remap_path_prefix/issue-73167-remap-std.rs	1153704088.000000000
+++ ./tests/codegen/remap_path_prefix/issue-73167-remap-std.rs	1718793858.170914374
@@ -7,7 +7,7 @@
 // true automatically. If paths to std library hasn't been remapped, we use the
 // above simulate-remapped-rust-src-base option to do it temporarily
 
-// CHECK: !DIFile(filename: "{{/rustc/.*/library/std/src/panic.rs}}"
+// CHECK: !DIFile(filename: "{{/usr/src/rustc-.*/library/std/src/panic.rs}}"
 fn main() {
     std::thread::spawn(|| {
         println!("hello");
--- ./rustc-1.79.0-src/tests/run-make/long-linker-command-lines/foo.rs	1153704088.000000000
+++ ./tests/run-make/long-linker-command-lines/foo.rs	1718794075.736393190
@@ -44,6 +44,13 @@ fn read_linker_args(path: &Path) -> Stri
     }
 }
 
+#[cfg(target_os = "hurd")]
+// Debian: test causes build to fail on hurd
+fn main() {
+    return;
+}
+
+#[cfg(not(target_os = "hurd"))]
 fn main() {
     let tmpdir = PathBuf::from(env::var_os("TMPDIR").unwrap());
     let ok = tmpdir.join("ok");
--- ./rustc-1.79.0-src/tests/ui/associated-consts/issue-93775.rs	1153704088.000000000
+++ ./tests/ui/associated-consts/issue-93775.rs	1718794075.737621328
@@ -1,5 +1,6 @@
 //@ build-pass
 // ignore-tidy-linelength
+// ignore-hurd
 
 // Regression for #93775, needs build-pass to test it.
 
--- ./rustc-1.79.0-src/tests/ui/issues/issue-74564-if-expr-stack-overflow.rs	1153704088.000000000
+++ ./tests/ui/issues/issue-74564-if-expr-stack-overflow.rs	1718794075.740523678
@@ -1,5 +1,6 @@
 //@ build-pass
 // ignore-tidy-filelength
+// ignore-hurd
 #![crate_type = "rlib"]
 
 fn banana(v: &str) -> u32 {
--- ./rustc-1.79.0-src/tests/ui/threads-sendsync/mpsc_stress.rs	1153704088.000000000
+++ ./tests/ui/threads-sendsync/mpsc_stress.rs	1718794092.800498760
@@ -1,6 +1,7 @@
 //@ run-pass
 //@ compile-flags:--test
 //@ needs-threads
+//@ ignore-hurd
 
 use std::sync::mpsc::channel;
 use std::sync::mpsc::TryRecvError;
--- ./rustc-1.79.0-src/vendor/curl-sys-0.4.72+curl-8.6.0/Cargo.toml	1153704088.000000000
+++ ./vendor/curl-sys-0.4.72+curl-8.6.0/Cargo.toml	1718795111.472873097
@@ -52,7 +52,7 @@ version = "0.3.3"
 [features]
 default = ["ssl"]
 force-system-lib-on-osx = []
-http2 = ["libnghttp2-sys"]
+http2 = []
 mesalink = []
 ntlm = []
 poll_7_68_0 = []
--- ./rustc-1.79.0-src/vendor/mdbook-0.4.37/src/book/init.rs	1153704088.000000000
+++ ./vendor/mdbook-0.4.37/src/book/init.rs	1718794993.198299942
@@ -153,25 +153,6 @@ impl BookBuilder {
         let mut js = File::create(themedir.join("book.js"))?;
         js.write_all(theme::JS)?;
 
-        let mut highlight_css = File::create(themedir.join("highlight.css"))?;
-        highlight_css.write_all(theme::HIGHLIGHT_CSS)?;
-
-        let mut highlight_js = File::create(themedir.join("highlight.js"))?;
-        highlight_js.write_all(theme::HIGHLIGHT_JS)?;
-
-        write_file(&themedir.join("fonts"), "fonts.css", theme::fonts::CSS)?;
-        for (file_name, contents) in theme::fonts::LICENSES {
-            write_file(&themedir, file_name, contents)?;
-        }
-        for (file_name, contents) in theme::fonts::OPEN_SANS.iter() {
-            write_file(&themedir, file_name, contents)?;
-        }
-        write_file(
-            &themedir,
-            theme::fonts::SOURCE_CODE_PRO.0,
-            theme::fonts::SOURCE_CODE_PRO.1,
-        )?;
-
         Ok(())
     }
 
--- ./rustc-1.79.0-src/vendor/mdbook-0.4.37/src/renderer/html_handlebars/hbs_renderer.rs	1153704088.000000000
+++ ./vendor/mdbook-0.4.37/src/renderer/html_handlebars/hbs_renderer.rs	1718794993.203289712
@@ -3,13 +3,14 @@ use crate::config::{BookConfig, Code, Co
 use crate::errors::*;
 use crate::renderer::html_handlebars::helpers;
 use crate::renderer::{RenderContext, Renderer};
-use crate::theme::{self, playground_editor, Theme};
+use crate::theme::{self, Theme};
 use crate::utils;
 
 use std::borrow::Cow;
 use std::collections::BTreeMap;
 use std::collections::HashMap;
 use std::fs::{self, File};
+use std::os::unix::fs::symlink;
 use std::path::{Path, PathBuf};
 
 use crate::utils::fs::get_404_output_file;
@@ -249,99 +250,28 @@ impl HtmlHandlebars {
         if let Some(contents) = &theme.favicon_svg {
             write_file(destination, "favicon.svg", contents)?;
         }
-        write_file(destination, "highlight.css", &theme.highlight_css)?;
         write_file(destination, "tomorrow-night.css", &theme.tomorrow_night_css)?;
         write_file(destination, "ayu-highlight.css", &theme.ayu_highlight_css)?;
-        write_file(destination, "highlight.js", &theme.highlight_js)?;
-        write_file(destination, "clipboard.min.js", &theme.clipboard_js)?;
-        write_file(
-            destination,
-            "FontAwesome/css/font-awesome.css",
-            theme::FONT_AWESOME,
+        symlink(
+            "/usr/share/fonts-font-awesome/css/font-awesome.min.css",
+            destination.join("css/font-awesome.min.css"),
         )?;
-        write_file(
-            destination,
-            "FontAwesome/fonts/fontawesome-webfont.eot",
-            theme::FONT_AWESOME_EOT,
-        )?;
-        write_file(
-            destination,
-            "FontAwesome/fonts/fontawesome-webfont.svg",
-            theme::FONT_AWESOME_SVG,
+        symlink(
+            "/usr/share/fonts-font-awesome/fonts",
+            destination.join("fonts"),
         )?;
-        write_file(
-            destination,
-            "FontAwesome/fonts/fontawesome-webfont.ttf",
-            theme::FONT_AWESOME_TTF,
+        symlink(
+            "/usr/share/javascript/highlight.js/styles/atelier-dune-light.css",
+            destination.join("highlight.css"),
         )?;
-        write_file(
-            destination,
-            "FontAwesome/fonts/fontawesome-webfont.woff",
-            theme::FONT_AWESOME_WOFF,
+        symlink(
+            "/usr/share/javascript/highlight.js/highlight.js",
+            destination.join("highlight.js"),
         )?;
-        write_file(
-            destination,
-            "FontAwesome/fonts/fontawesome-webfont.woff2",
-            theme::FONT_AWESOME_WOFF2,
+        symlink(
+            "/usr/share/javascript/mathjax/MathJax.js",
+            destination.join("MathJax.js"),
         )?;
-        write_file(
-            destination,
-            "FontAwesome/fonts/FontAwesome.ttf",
-            theme::FONT_AWESOME_TTF,
-        )?;
-        // Don't copy the stock fonts if the user has specified their own fonts to use.
-        if html_config.copy_fonts && theme.fonts_css.is_none() {
-            write_file(destination, "fonts/fonts.css", theme::fonts::CSS)?;
-            for (file_name, contents) in theme::fonts::LICENSES.iter() {
-                write_file(destination, file_name, contents)?;
-            }
-            for (file_name, contents) in theme::fonts::OPEN_SANS.iter() {
-                write_file(destination, file_name, contents)?;
-            }
-            write_file(
-                destination,
-                theme::fonts::SOURCE_CODE_PRO.0,
-                theme::fonts::SOURCE_CODE_PRO.1,
-            )?;
-        }
-        if let Some(fonts_css) = &theme.fonts_css {
-            if !fonts_css.is_empty() {
-                write_file(destination, "fonts/fonts.css", fonts_css)?;
-            }
-        }
-        if !html_config.copy_fonts && theme.fonts_css.is_none() {
-            warn!(
-                "output.html.copy-fonts is deprecated.\n\
-                This book appears to have copy-fonts=false in book.toml without a fonts.css file.\n\
-                Add an empty `theme/fonts/fonts.css` file to squelch this warning."
-            );
-        }
-        for font_file in &theme.font_files {
-            let contents = fs::read(font_file)?;
-            let filename = font_file.file_name().unwrap();
-            let filename = Path::new("fonts").join(filename);
-            write_file(destination, filename, &contents)?;
-        }
-
-        let playground_config = &html_config.playground;
-
-        // Ace is a very large dependency, so only load it when requested
-        if playground_config.editable && playground_config.copy_js {
-            // Load the editor
-            write_file(destination, "editor.js", playground_editor::JS)?;
-            write_file(destination, "ace.js", playground_editor::ACE_JS)?;
-            write_file(destination, "mode-rust.js", playground_editor::MODE_RUST_JS)?;
-            write_file(
-                destination,
-                "theme-dawn.js",
-                playground_editor::THEME_DAWN_JS,
-            )?;
-            write_file(
-                destination,
-                "theme-tomorrow_night.js",
-                playground_editor::THEME_TOMORROW_NIGHT_JS,
-            )?;
-        }
 
         Ok(())
     }
--- ./rustc-1.79.0-src/vendor/mdbook-0.4.37/src/renderer/html_handlebars/search.rs	1153704088.000000000
+++ ./vendor/mdbook-0.4.37/src/renderer/html_handlebars/search.rs	1718794993.206102403
@@ -53,8 +53,6 @@ pub fn create_files(search_config: &Sear
             format!("Object.assign(window.search, {});", index).as_bytes(),
         )?;
         utils::fs::write_file(destination, "searcher.js", searcher::JS)?;
-        utils::fs::write_file(destination, "mark.min.js", searcher::MARK_JS)?;
-        utils::fs::write_file(destination, "elasticlunr.min.js", searcher::ELASTICLUNR_JS)?;
         debug!("Copying search files ✓");
     }
 
--- ./rustc-1.79.0-src/vendor/mdbook-0.4.37/src/theme/index.hbs	1153704088.000000000
+++ ./vendor/mdbook-0.4.37/src/theme/index.hbs	1718794993.209172005
@@ -33,10 +33,7 @@
         {{/if}}
 
         <!-- Fonts -->
-        <link rel="stylesheet" href="{{ path_to_root }}FontAwesome/css/font-awesome.css">
-        {{#if copy_fonts}}
-        <link rel="stylesheet" href="{{ path_to_root }}fonts/fonts.css">
-        {{/if}}
+        <link rel="stylesheet" href="{{ path_to_root }}css/font-awesome.min.css">
 
         <!-- Highlight.js Stylesheets -->
         <link rel="stylesheet" href="{{ path_to_root }}highlight.css">
@@ -50,7 +47,7 @@
 
         {{#if mathjax_support}}
         <!-- MathJax -->
-        <script async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
+        <script async src="MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
         {{/if}}
     </head>
     <body class="sidebar-visible no-js">
@@ -61,35 +58,6 @@
             var default_theme = window.matchMedia("(prefers-color-scheme: dark)").matches ? "{{ preferred_dark_theme }}" : "{{ default_theme }}";
         </script>
 
-        <!-- Work around some values being stored in localStorage wrapped in quotes -->
-        <script>
-            try {
-                var theme = localStorage.getItem('mdbook-theme');
-                var sidebar = localStorage.getItem('mdbook-sidebar');
-
-                if (theme.startsWith('"') && theme.endsWith('"')) {
-                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));
-                }
-
-                if (sidebar.startsWith('"') && sidebar.endsWith('"')) {
-                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));
-                }
-            } catch (e) { }
-        </script>
-
-        <!-- Set the theme before any content is loaded, prevents flash -->
-        <script>
-            var theme;
-            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }
-            if (theme === null || theme === undefined) { theme = default_theme; }
-            var html = document.querySelector('html');
-            html.classList.remove('{{ default_theme }}')
-            html.classList.add(theme);
-            var body = document.querySelector('body');
-            body.classList.remove('no-js')
-            body.classList.add('js');
-        </script>
-
         <input type="checkbox" id="sidebar-toggle-anchor" class="hidden">
 
         <!-- Hide / unhide sidebar before it is displayed -->
@@ -269,54 +237,8 @@
         </script>
         {{/if}}
 
-        {{#if google_analytics}}
-        <!-- Google Analytics Tag -->
-        <script>
-            var localAddrs = ["localhost", "127.0.0.1", ""];
-
-            // make sure we don't activate google analytics if the developer is
-            // inspecting the book locally...
-            if (localAddrs.indexOf(document.location.hostname) === -1) {
-                (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
-                (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
-                m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
-                })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
-
-                ga('create', '{{google_analytics}}', 'auto');
-                ga('send', 'pageview');
-            }
-        </script>
-        {{/if}}
-
-        {{#if playground_line_numbers}}
-        <script>
-            window.playground_line_numbers = true;
-        </script>
-        {{/if}}
-
-        {{#if playground_copyable}}
-        <script>
-            window.playground_copyable = true;
-        </script>
-        {{/if}}
-
-        {{#if playground_js}}
-        <script src="{{ path_to_root }}ace.js"></script>
-        <script src="{{ path_to_root }}editor.js"></script>
-        <script src="{{ path_to_root }}mode-rust.js"></script>
-        <script src="{{ path_to_root }}theme-dawn.js"></script>
-        <script src="{{ path_to_root }}theme-tomorrow_night.js"></script>
-        {{/if}}
-
-        {{#if search_js}}
-        <script src="{{ path_to_root }}elasticlunr.min.js"></script>
-        <script src="{{ path_to_root }}mark.min.js"></script>
-        <script src="{{ path_to_root }}searcher.js"></script>
-        {{/if}}
-
-        <script src="{{ path_to_root }}clipboard.min.js"></script>
-        <script src="{{ path_to_root }}highlight.js"></script>
-        <script src="{{ path_to_root }}book.js"></script>
+        <script src="{{ path_to_root }}highlight.js" type="text/javascript" charset="utf-8"></script>
+        <script src="{{ path_to_root }}book.js" type="text/javascript" charset="utf-8"></script>
 
         <!-- Custom JS scripts -->
         {{#each additional_js}}
--- ./rustc-1.79.0-src/vendor/mdbook-0.4.37/src/theme/mod.rs	1153704088.000000000
+++ ./vendor/mdbook-0.4.37/src/theme/mod.rs	1718794993.212559850
@@ -1,9 +1,5 @@
 #![allow(missing_docs)]
 
-pub mod playground_editor;
-
-pub mod fonts;
-
 #[cfg(feature = "search")]
 pub mod searcher;
 
@@ -24,19 +20,8 @@ pub static VARIABLES_CSS: &[u8] = includ
 pub static FAVICON_PNG: &[u8] = include_bytes!("favicon.png");
 pub static FAVICON_SVG: &[u8] = include_bytes!("favicon.svg");
 pub static JS: &[u8] = include_bytes!("book.js");
-pub static HIGHLIGHT_JS: &[u8] = include_bytes!("highlight.js");
 pub static TOMORROW_NIGHT_CSS: &[u8] = include_bytes!("tomorrow-night.css");
-pub static HIGHLIGHT_CSS: &[u8] = include_bytes!("highlight.css");
 pub static AYU_HIGHLIGHT_CSS: &[u8] = include_bytes!("ayu-highlight.css");
-pub static CLIPBOARD_JS: &[u8] = include_bytes!("clipboard.min.js");
-pub static FONT_AWESOME: &[u8] = include_bytes!("FontAwesome/css/font-awesome.min.css");
-pub static FONT_AWESOME_EOT: &[u8] = include_bytes!("FontAwesome/fonts/fontawesome-webfont.eot");
-pub static FONT_AWESOME_SVG: &[u8] = include_bytes!("FontAwesome/fonts/fontawesome-webfont.svg");
-pub static FONT_AWESOME_TTF: &[u8] = include_bytes!("FontAwesome/fonts/fontawesome-webfont.ttf");
-pub static FONT_AWESOME_WOFF: &[u8] = include_bytes!("FontAwesome/fonts/fontawesome-webfont.woff");
-pub static FONT_AWESOME_WOFF2: &[u8] =
-    include_bytes!("FontAwesome/fonts/fontawesome-webfont.woff2");
-pub static FONT_AWESOME_OTF: &[u8] = include_bytes!("FontAwesome/fonts/FontAwesome.otf");
 
 /// The `Theme` struct should be used instead of the static variables because
 /// the `new()` method will look if the user has a theme directory in their
@@ -59,11 +44,8 @@ pub struct Theme {
     pub favicon_png: Option<Vec<u8>>,
     pub favicon_svg: Option<Vec<u8>>,
     pub js: Vec<u8>,
-    pub highlight_css: Vec<u8>,
     pub tomorrow_night_css: Vec<u8>,
     pub ayu_highlight_css: Vec<u8>,
-    pub highlight_js: Vec<u8>,
-    pub clipboard_js: Vec<u8>,
 }
 
 impl Theme {
@@ -93,9 +75,6 @@ impl Theme {
                     theme_dir.join("css/variables.css"),
                     &mut theme.variables_css,
                 ),
-                (theme_dir.join("highlight.js"), &mut theme.highlight_js),
-                (theme_dir.join("clipboard.min.js"), &mut theme.clipboard_js),
-                (theme_dir.join("highlight.css"), &mut theme.highlight_css),
                 (
                     theme_dir.join("tomorrow-night.css"),
                     &mut theme.tomorrow_night_css,
@@ -183,11 +162,8 @@ impl Default for Theme {
             favicon_png: Some(FAVICON_PNG.to_owned()),
             favicon_svg: Some(FAVICON_SVG.to_owned()),
             js: JS.to_owned(),
-            highlight_css: HIGHLIGHT_CSS.to_owned(),
             tomorrow_night_css: TOMORROW_NIGHT_CSS.to_owned(),
             ayu_highlight_css: AYU_HIGHLIGHT_CSS.to_owned(),
-            highlight_js: HIGHLIGHT_JS.to_owned(),
-            clipboard_js: CLIPBOARD_JS.to_owned(),
         }
     }
 }
@@ -273,11 +249,8 @@ mod tests {
             favicon_png: Some(Vec::new()),
             favicon_svg: Some(Vec::new()),
             js: Vec::new(),
-            highlight_css: Vec::new(),
             tomorrow_night_css: Vec::new(),
             ayu_highlight_css: Vec::new(),
-            highlight_js: Vec::new(),
-            clipboard_js: Vec::new(),
         };
 
         assert_eq!(got, empty);
--- ./rustc-1.79.0-src/vendor/mdbook-0.4.37/src/theme/searcher/mod.rs	1153704088.000000000
+++ ./vendor/mdbook-0.4.37/src/theme/searcher/mod.rs	1718794993.214602224
@@ -2,5 +2,3 @@
 //! the "search" cargo feature is disabled.
 
 pub static JS: &[u8] = include_bytes!("searcher.js");
-pub static MARK_JS: &[u8] = include_bytes!("mark.min.js");
-pub static ELASTICLUNR_JS: &[u8] = include_bytes!("elasticlunr.min.js");
--- ./rustc-1.79.0-src/vendor/pkg-config-0.3.28/src/lib.rs	1153704088.000000000
+++ ./vendor/pkg-config-0.3.28/src/lib.rs	1718794743.347850908
@@ -128,11 +128,8 @@ pub enum Error {
     /// Contains the name of the responsible environment variable.
     EnvNoPkgConfig(String),
 
-    /// Detected cross compilation without a custom sysroot.
-    ///
-    /// Ignore the error with `PKG_CONFIG_ALLOW_CROSS=1`,
-    /// which may let `pkg-config` select libraries
-    /// for the host's architecture instead of the target's.
+    /// Cross compilation detected. Kept for compatibility;
+    /// the Debian package never emits this.
     CrossCompilation,
 
     /// Failed to run `pkg-config`.
@@ -247,14 +244,6 @@ impl fmt::Display for Error {
     fn fmt(&self, f: &mut fmt::Formatter) -> Result<(), fmt::Error> {
         match *self {
             Error::EnvNoPkgConfig(ref name) => write!(f, "Aborted because {} is set", name),
-            Error::CrossCompilation => f.write_str(
-                "pkg-config has not been configured to support cross-compilation.\n\
-                \n\
-                Install a sysroot for the target platform and configure it via\n\
-                PKG_CONFIG_SYSROOT_DIR and PKG_CONFIG_PATH, or install a\n\
-                cross-compiling wrapper for pkg-config and set it via\n\
-                PKG_CONFIG environment variable.",
-            ),
             Error::Command {
                 ref command,
                 ref cause,
@@ -380,7 +369,7 @@ impl fmt::Display for Error {
                 )?;
                 format_output(output, f)
             }
-            Error::__Nonexhaustive => panic!(),
+            Error::CrossCompilation | Error::__Nonexhaustive => panic!(),
         }
     }
 }
@@ -574,6 +563,8 @@ impl Config {
         if host == target {
             return true;
         }
+        // always enable PKG_CONFIG_ALLOW_CROSS override in Debian
+        return true;
 
         // pkg-config may not be aware of cross-compilation, and require
         // a wrapper script that sets up platform-specific prefixes.
@@ -631,7 +622,11 @@ impl Config {
     }
 
     fn run(&self, name: &str, args: &[&str]) -> Result<Vec<u8>, Error> {
-        let pkg_config_exe = self.targeted_env_var("PKG_CONFIG");
+        let pkg_config_exe = self.targeted_env_var("PKG_CONFIG")
+            .or_else(|| {
+                self.env_var_os("DEB_HOST_GNU_TYPE")
+                    .map(|mut t| { t.push(OsString::from("-pkgconf")); t })
+            });
         let fallback_exe = if pkg_config_exe.is_none() {
             Some(OsString::from("pkgconf"))
         } else {
--- ./rustc-1.79.0-src/vendor/pkg-config-0.3.28/tests/test.rs	1153704088.000000000
+++ ./vendor/pkg-config-0.3.28/tests/test.rs	1718794655.275721708
@@ -31,7 +31,6 @@ fn find(name: &str) -> Result<pkg_config
     pkg_config::probe_library(name)
 }
 
-#[test]
 fn cross_disabled() {
     let _g = LOCK.lock();
     reset();
@@ -43,7 +42,6 @@ fn cross_disabled() {
     }
 }
 
-#[test]
 fn cross_enabled() {
     let _g = LOCK.lock();
     reset();
--- ./rustc-1.79.0-src/vendor/pkg-config-0.3.30/src/lib.rs	1153704088.000000000
+++ ./vendor/pkg-config-0.3.30/src/lib.rs	1718794805.297348314
@@ -150,11 +150,8 @@ pub enum Error {
     /// Contains the name of the responsible environment variable.
     EnvNoPkgConfig(String),
 
-    /// Detected cross compilation without a custom sysroot.
-    ///
-    /// Ignore the error with `PKG_CONFIG_ALLOW_CROSS=1`,
-    /// which may let `pkg-config` select libraries
-    /// for the host's architecture instead of the target's.
+    /// Cross compilation detected. Kept for compatibility;
+    /// the Debian package never emits this.
     CrossCompilation,
 
     /// Failed to run `pkg-config`.
@@ -269,14 +266,6 @@ impl fmt::Display for Error {
     fn fmt(&self, f: &mut fmt::Formatter) -> Result<(), fmt::Error> {
         match *self {
             Error::EnvNoPkgConfig(ref name) => write!(f, "Aborted because {} is set", name),
-            Error::CrossCompilation => f.write_str(
-                "pkg-config has not been configured to support cross-compilation.\n\
-                \n\
-                Install a sysroot for the target platform and configure it via\n\
-                PKG_CONFIG_SYSROOT_DIR and PKG_CONFIG_PATH, or install a\n\
-                cross-compiling wrapper for pkg-config and set it via\n\
-                PKG_CONFIG environment variable.",
-            ),
             Error::Command {
                 ref command,
                 ref cause,
@@ -402,7 +391,7 @@ impl fmt::Display for Error {
                 )?;
                 format_output(output, f)
             }
-            Error::__Nonexhaustive => panic!(),
+            Error::CrossCompilation | Error::__Nonexhaustive => panic!(),
         }
     }
 }
@@ -596,6 +585,8 @@ impl Config {
         if host == target {
             return true;
         }
+        // always enable PKG_CONFIG_ALLOW_CROSS override in Debian
+        return true;
 
         // pkg-config may not be aware of cross-compilation, and require
         // a wrapper script that sets up platform-specific prefixes.
@@ -653,7 +644,11 @@ impl Config {
     }
 
     fn run(&self, name: &str, args: &[&str]) -> Result<Vec<u8>, Error> {
-        let pkg_config_exe = self.targeted_env_var("PKG_CONFIG");
+        let pkg_config_exe = self.targeted_env_var("PKG_CONFIG")
+            .or_else(|| {
+                self.env_var_os("DEB_HOST_GNU_TYPE")
+                    .map(|mut t| { t.push(OsString::from("-pkgconf")); t })
+            });
         let fallback_exe = if pkg_config_exe.is_none() {
             Some(OsString::from("pkgconf"))
         } else {
--- ./rustc-1.79.0-src/vendor/pkg-config-0.3.30/tests/test.rs	1153704088.000000000
+++ ./vendor/pkg-config-0.3.30/tests/test.rs	1718794773.302240455
@@ -31,7 +31,6 @@ fn find(name: &str) -> Result<pkg_config
     pkg_config::probe_library(name)
 }
 
-#[test]
 fn cross_disabled() {
     let _g = LOCK.lock();
     reset();
@@ -43,7 +42,6 @@ fn cross_disabled() {
     }
 }
 
-#[test]
 fn cross_enabled() {
     let _g = LOCK.lock();
     reset();
