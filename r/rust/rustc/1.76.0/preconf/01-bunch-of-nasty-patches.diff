This patch contains:
| * Debian patches
| * A lot of "ios" addings
| * Apple LLVM 16 (swift-5.9.2-RELEASE) support
| * Torrekie-forked libiosexec support (Not Procursus one)
--- a/Cargo.toml	1707052684.000000000
+++ b/Cargo.toml	1709302146.265023451
@@ -19,22 +19,16 @@ members = [
   "src/tools/tidy",
   "src/tools/tier-check",
   "src/tools/build-manifest",
-  "src/tools/remote-test-client",
-  "src/tools/remote-test-server",
   "src/tools/rust-installer",
   "src/tools/rust-demangler",
   "src/tools/rustdoc",
-  "src/tools/rls",
   "src/tools/rustfmt",
-  "src/tools/miri",
-  "src/tools/miri/cargo-miri",
   "src/tools/rustdoc-themes",
   "src/tools/unicode-table-generator",
   "src/tools/expand-yaml-anchors",
   "src/tools/jsondocck",
   "src/tools/jsondoclint",
   "src/tools/html-checker",
-  "src/tools/bump-stage0",
   "src/tools/replace-version-placeholder",
   "src/tools/lld-wrapper",
   "src/tools/collect-license-metadata",
--- a/compiler/rustc/src/main.rs	1707052684.000000000
+++ b/compiler/rustc/src/main.rs	1709285520.375247302
@@ -59,7 +59,7 @@ fn main() {
         // registers itself with the allocator's zone APIs in a ctor. However,
         // the linker doesn't seem to consider ctors as "used" when statically
         // linking, so we need to explicitly depend on the function.
-        #[cfg(target_os = "macos")]
+        #[cfg(any(target_os = "macos", target_os = "ios"))]
         {
             extern "C" {
                 fn _rjem_je_zone_register();
--- a/compiler/rustc_codegen_cranelift/src/debuginfo/unwind.rs	1707052684.000000000
+++ b/compiler/rustc_codegen_cranelift/src/debuginfo/unwind.rs	1709285482.770367674
@@ -102,7 +102,7 @@ impl UnwindContext {
         // =======================================================================
         // Everything after this line up to the end of the file is loosely based on
         // https://github.com/bytecodealliance/wasmtime/blob/4471a82b0c540ff48960eca6757ccce5b1b5c3e4/crates/jit/src/unwind/systemv.rs
-        #[cfg(target_os = "macos")]
+        #[cfg(any(target_os = "macos", target_os = "ios"))]
         {
             // On macOS, `__register_frame` takes a pointer to a single FDE
             let start = eh_frame.as_ptr();
@@ -122,7 +122,7 @@ impl UnwindContext {
                 current = current.add(len + 4);
             }
         }
-        #[cfg(not(target_os = "macos"))]
+        #[cfg(not(any(target_os = "macos", target_os = "ios")))]
         {
             // On other platforms, `__register_frame` will walk the FDEs until an entry of length 0
             __register_frame(eh_frame.as_ptr());
--- a/compiler/rustc_codegen_llvm/src/context.rs	1707052684.000000000
+++ b/compiler/rustc_codegen_llvm/src/context.rs	1709023605.000000000
@@ -134,6 +134,18 @@ pub unsafe fn create_module<'ll>(
 
     let mut target_data_layout = sess.target.data_layout.to_string();
     let llvm_version = llvm_util::get_version();
+    if llvm_version < (16, 0, 0) {
+        if sess.target.arch == "s390x" {
+            // LLVM 16 data layout changed to always set 64-bit vector alignment,
+            // which is conditional in earlier LLVM versions.
+            // https://reviews.llvm.org/D131158 for the discussion.
+            target_data_layout = target_data_layout.replace("-v128:64", "");
+        } else if sess.target.arch == "riscv64" {
+            // LLVM 16 introduced this change so as to produce more efficient code.
+            // See https://reviews.llvm.org/D116735 for the discussion.
+            target_data_layout = target_data_layout.replace("-n32:64-", "-n64-");
+        }
+    }
     if llvm_version < (17, 0, 0) {
         if sess.target.arch.starts_with("powerpc") {
             // LLVM 17 specifies function pointer alignment for ppc:
--- a/compiler/rustc_codegen_ssa/src/back/link.rs	1707052684.000000000
+++ b/compiler/rustc_codegen_ssa/src/back/link.rs	1708858415.000000000
@@ -1241,7 +1241,7 @@ fn link_sanitizer_runtime(sess: &Session
 
     if sess.target.is_like_osx {
         // On Apple platforms, the sanitizer is always built as a dylib, and
-        // LLVM will link to `@rpath/*.dylib`, so we need to specify an
+        // LLVM will link to `@rpath/.dylib`, so we need to specify an
         // rpath to the library as well (the rpath should be absolute, see
         // PR #41352 for details).
         let filename = format!("rustc{channel}_rt.{name}");
@@ -2883,10 +2883,10 @@ fn add_apple_sdk(cmd: &mut dyn Linker, s
         ("arm", "ios") => "iphoneos",
         ("aarch64", "ios") if llvm_target.contains("macabi") => "macosx",
         ("aarch64", "ios") if llvm_target.ends_with("-simulator") => "iphonesimulator",
-        ("aarch64", "ios") => "iphoneos",
+        ("aarch64", "ios") if !llvm_target.contains("sim") => "iphoneos",
         ("x86", "ios") => "iphonesimulator",
         ("x86_64", "ios") if llvm_target.contains("macabi") => "macosx",
-        ("x86_64", "ios") => "iphonesimulator",
+        ("x86_64", "ios") if !llvm_target.contains("macabi") => "iphonesimulator",
         ("x86_64", "watchos") => "watchsimulator",
         ("arm64_32", "watchos") => "watchos",
         ("aarch64", "watchos") if llvm_target.ends_with("-simulator") => "watchsimulator",
@@ -2937,9 +2937,8 @@ fn get_apple_sdk_root(sdk_name: &str) ->
                 if sdkroot.contains("iPhoneSimulator.platform")
                     || sdkroot.contains("MacOSX.platform") => {}
             "iphonesimulator"
-                if sdkroot.contains("iPhoneOS.platform") || sdkroot.contains("MacOSX.platform") => {
-            }
-            "macosx10.15"
+                if sdkroot.contains("iPhoneOS.platform") || sdkroot.contains("MacOSX.platform") => {}
+            "macosx"
                 if sdkroot.contains("iPhoneOS.platform")
                     || sdkroot.contains("iPhoneSimulator.platform") => {}
             "watchos"
@@ -2948,10 +2947,12 @@ fn get_apple_sdk_root(sdk_name: &str) ->
             "watchsimulator"
                 if sdkroot.contains("WatchOS.platform") || sdkroot.contains("MacOSX.platform") => {}
             // Ignore `SDKROOT` if it's not a valid path.
-            _ if !p.is_absolute() || p == Path::new("/") || !p.exists() => {}
+            // Torrekie: On jailbroken iOS, we permit "/"
+            _ if !p.is_absolute() || !p.exists() => {}
             _ => return Ok(sdkroot),
         }
     }
+    // TODO: Reimpl a xcrun, or remove this code
     let res =
         Command::new("xcrun").arg("--show-sdk-path").arg("-sdk").arg(sdk_name).output().and_then(
             |output| {
--- a/compiler/rustc_data_structures/src/profiling.rs	1707052684.000000000
+++ b/compiler/rustc_data_structures/src/profiling.rs	1709285501.943338741
@@ -886,7 +886,7 @@ cfg_match! {
             Some(pmc.WorkingSetSize)
         }
     }
-    cfg(target_os = "macos")  => {
+    cfg(any(target_os = "macos", target_os = "ios"))  => {
         pub fn get_resident_set_size() -> Option<usize> {
             use libc::{c_int, c_void, getpid, proc_pidinfo, proc_taskinfo, PROC_PIDTASKINFO};
             use std::mem;
--- a/compiler/rustc_driver_impl/src/lib.rs	1707052684.000000000
+++ b/compiler/rustc_driver_impl/src/lib.rs	1709119931.516391860
@@ -85,10 +85,10 @@ pub mod pretty;
 #[macro_use]
 mod print;
 mod session_diagnostics;
-#[cfg(all(unix, any(target_env = "gnu", target_os = "macos")))]
+#[cfg(all(unix, any(target_env = "gnu", any(target_os = "macos", target_os = "ios"))))]
 mod signal_handler;
 
-#[cfg(not(all(unix, any(target_env = "gnu", target_os = "macos"))))]
+#[cfg(not(all(unix, any(target_env = "gnu", any(target_os = "macos", target_os = "ios")))))]
 mod signal_handler {
     /// On platforms which don't support our signal handler's requirements,
     /// simply use the default signal handler provided by std.
--- a/compiler/rustc_error_codes/src/error_codes/E0778.md	1707052684.000000000
+++ b/compiler/rustc_error_codes/src/error_codes/E0778.md	1709303995.274591428
@@ -16,7 +16,7 @@ specified:
 ```
 #![feature(isa_attribute)]
 
-#[cfg_attr(target_arch="arm", instruction_set(arm::a32))]
+#[cfg_attr(all(target_arch="arm", target_os="none"), instruction_set(arm::a32))]
 fn something() {}
 ```
 
@@ -25,7 +25,7 @@ or:
 ```
 #![feature(isa_attribute)]
 
-#[cfg_attr(target_arch="arm", instruction_set(arm::t32))]
+#[cfg_attr(all(target_arch="arm", target_os="none"), instruction_set(arm::t32))]
 fn something() {}
 ```
 
--- a/compiler/rustc_error_codes/src/error_codes/E0779.md	1707052684.000000000
+++ b/compiler/rustc_error_codes/src/error_codes/E0779.md	1709303995.275919403
@@ -21,7 +21,7 @@ error. Example:
 ```
 #![feature(isa_attribute)]
 
-#[cfg_attr(target_arch="arm", instruction_set(arm::a32))] // ok!
+#[cfg_attr(all(target_arch="arm", target_os="none"), instruction_set(arm::a32))] // ok!
 pub fn something() {}
 fn main() {}
 ```
--- a/compiler/rustc_lint/src/builtin.rs	1707052684.000000000
+++ b/compiler/rustc_lint/src/builtin.rs	1709303991.221960300
@@ -2700,7 +2700,10 @@ declare_lint! {
     /// ### Example
     ///
     /// ```rust,compile_fail
-    /// # #![feature(asm_experimental_arch)]
+    /// #![cfg_attr(
+    ///  not(any(target_arch = "powerpc64", target_arch = "s390x")),
+    ///  feature(asm_experimental_arch)
+    /// )]
     /// use std::arch::asm;
     ///
     /// fn main() {
--- a/compiler/rustc_lint_defs/src/builtin.rs	1707052684.000000000
+++ b/compiler/rustc_lint_defs/src/builtin.rs	1709303991.220489825
@@ -3046,11 +3046,13 @@ declare_lint! {
     ///
     /// use std::arch::asm;
     ///
+    /// #[cfg(not(any(target_arch = "powerpc64", target_arch = "s390x")))]
     /// #[naked]
     /// pub fn default_abi() -> u32 {
     ///     unsafe { asm!("", options(noreturn)); }
     /// }
     ///
+    /// #[cfg(not(any(target_arch = "powerpc64", target_arch = "s390x")))]
     /// #[naked]
     /// pub extern "Rust" fn rust_abi() -> u32 {
     ///     unsafe { asm!("", options(noreturn)); }
--- a/compiler/rustc_llvm/build.rs	1707052684.000000000
+++ b/compiler/rustc_llvm/build.rs	1709301573.926853364
@@ -181,6 +181,11 @@ fn main() {
     let mut cfg = cc::Build::new();
     cfg.warnings(false);
     for flag in cxxflags.split_whitespace() {
+        // Split-dwarf gives unreproducible DW_AT_GNU_dwo_id so don't do it
+        if flag == "-gsplit-dwarf" {
+            continue;
+        }
+
         // Ignore flags like `-m64` when we're doing a cross build
         if is_crossed && flag.starts_with("-m") {
             continue;
@@ -319,7 +324,7 @@ fn main() {
             if let Some(stripped) = lib.strip_prefix("-LIBPATH:") {
                 println!("cargo:rustc-link-search=native={}", stripped.replace(&host, &target));
             } else if let Some(stripped) = lib.strip_prefix("-L") {
-                println!("cargo:rustc-link-search=native={}", stripped.replace(&host, &target));
+                if stripped.contains(&host) { println!("cargo:rustc-link-search=native={}", stripped.replace(&host, &target)); }
             }
         } else if let Some(stripped) = lib.strip_prefix("-LIBPATH:") {
             println!("cargo:rustc-link-search=native={stripped}");
--- a/compiler/rustc_llvm/llvm-wrapper/LLVMWrapper.h	1707052684.000000000
+++ b/compiler/rustc_llvm/llvm-wrapper/LLVMWrapper.h	1709115143.000000000
@@ -28,9 +28,16 @@
 #include "llvm/Transforms/Instrumentation.h"
 #include "llvm/Transforms/Scalar.h"
 
+#ifndef USE_APPLE_LLVM
 #define LLVM_VERSION_GE(major, minor)                                          \
   (LLVM_VERSION_MAJOR > (major) ||                                             \
    LLVM_VERSION_MAJOR == (major) && LLVM_VERSION_MINOR >= (minor))
+#else
+/* Torrekie: We use Apple LLVM, but they lied to us the version */
+#define LLVM_VERSION_GE(major, minor)                                          \
+  ((LLVM_VERSION_MAJOR - 1) > (major) ||                                       \
+   (LLVM_VERSION_MAJOR - 1) == (major) && LLVM_VERSION_MINOR >= (minor))
+#endif
 
 #define LLVM_VERSION_LT(major, minor) (!LLVM_VERSION_GE((major), (minor)))
 
@@ -44,7 +51,11 @@
 #include "llvm/IR/IRPrintingPasses.h"
 #include "llvm/Linker/Linker.h"
 
+#if LLVM_VERSION_GE(16, 0)
 #include "llvm/TargetParser/Triple.h"
+#else
+#include "llvm/ADT/Triple.h"
+#endif
 
 extern "C" void LLVMRustSetLastError(const char *);
 
--- a/compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp	1707052684.000000000
+++ b/compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp	1709115116.000000000
@@ -24,7 +24,7 @@
 #include "llvm/Passes/StandardInstrumentations.h"
 #include "llvm/Support/CBindingWrapping.h"
 #include "llvm/Support/FileSystem.h"
-#if LLVM_VERSION_GE(17, 0)
+#if LLVM_VERSION_GE(17, 0) || USE_APPLE_LLVM
 #include "llvm/Support/VirtualFileSystem.h"
 #endif
 #include "llvm/Target/TargetMachine.h"
@@ -206,7 +206,11 @@ enum class LLVMRustCodeModel {
   None,
 };
 
+#if LLVM_VERSION_LT(16, 0)
+static Optional<CodeModel::Model>
+#else
 static std::optional<CodeModel::Model>
+#endif
 fromRust(LLVMRustCodeModel Model) {
   switch (Model) {
   case LLVMRustCodeModel::Tiny:
@@ -220,7 +224,11 @@ fromRust(LLVMRustCodeModel Model) {
   case LLVMRustCodeModel::Large:
     return CodeModel::Large;
   case LLVMRustCodeModel::None:
+#if LLVM_VERSION_LT(16, 0)
+    return None;
+#else
     return std::nullopt;
+#endif
   default:
     report_fatal_error("Bad CodeModel.");
   }
@@ -446,6 +454,7 @@ extern "C" LLVMTargetMachineRef LLVMRust
   if (OutputObjFile) {
       Options.ObjectFilenameForDebug = OutputObjFile;
   }
+#if LLVM_VERSION_GE(16, 0)
   if (!strcmp("zlib", DebugInfoCompression) && llvm::compression::zlib::isAvailable()) {
     Options.CompressDebugSections = DebugCompressionType::Zlib;
   } else if (!strcmp("zstd", DebugInfoCompression) && llvm::compression::zstd::isAvailable()) {
@@ -453,11 +462,12 @@ extern "C" LLVMTargetMachineRef LLVMRust
   } else if (!strcmp("none", DebugInfoCompression)) {
     Options.CompressDebugSections = DebugCompressionType::None;
   }
+#endif
 
   Options.RelaxELFRelocations = RelaxELFRelocations;
   Options.UseInitArray = UseInitArray;
 
-#if LLVM_VERSION_LT(17, 0)
+#if LLVM_VERSION_LT(17, 0) && !USE_APPLE_LLVM
   Options.ExplicitEmulatedTLS = true;
 #endif
   Options.EmulatedTLS = UseEmulatedTls;
@@ -730,22 +740,32 @@ LLVMRustOptimize(
   bool DebugPassManager = false;
 
   PassInstrumentationCallbacks PIC;
+#if LLVM_VERSION_LT(16, 0)
+  StandardInstrumentations SI(DebugPassManager);
+#else
   StandardInstrumentations SI(TheModule->getContext(), DebugPassManager);
+#endif
   SI.registerCallbacks(PIC);
 
   if (LlvmSelfProfiler){
     LLVMSelfProfileInitializeCallbacks(PIC,LlvmSelfProfiler,BeforePassCallback,AfterPassCallback);
   }
 
+#if LLVM_VERSION_LT(16, 0)
+  Optional<PGOOptions> PGOOpt;
+#else
   std::optional<PGOOptions> PGOOpt;
-#if LLVM_VERSION_GE(17, 0)
+#endif
+#if LLVM_VERSION_GE(17, 0) || USE_APPLE_LLVM
   auto FS = vfs::getRealFileSystem();
 #endif
   if (PGOGenPath) {
     assert(!PGOUsePath && !PGOSampleUsePath);
     PGOOpt = PGOOptions(PGOGenPath, "", "",
+#if LLVM_VERSION_GE(17, 0) || USE_APPLE_LLVM
 #if LLVM_VERSION_GE(17, 0)
                         "",
+#endif
                         FS,
 #endif
                         PGOOptions::IRInstr, PGOOptions::NoCSAction,
@@ -753,24 +773,30 @@ LLVMRustOptimize(
   } else if (PGOUsePath) {
     assert(!PGOSampleUsePath);
     PGOOpt = PGOOptions(PGOUsePath, "", "",
+#if LLVM_VERSION_GE(17, 0) || USE_APPLE_LLVM
 #if LLVM_VERSION_GE(17, 0)
                         "",
+#endif
                         FS,
 #endif
                         PGOOptions::IRUse, PGOOptions::NoCSAction,
                         DebugInfoForProfiling);
   } else if (PGOSampleUsePath) {
     PGOOpt = PGOOptions(PGOSampleUsePath, "", "",
+#if LLVM_VERSION_GE(17, 0) || USE_APPLE_LLVM
 #if LLVM_VERSION_GE(17, 0)
                         "",
+#endif
                         FS,
 #endif
                         PGOOptions::SampleUse, PGOOptions::NoCSAction,
                         DebugInfoForProfiling);
   } else if (DebugInfoForProfiling) {
     PGOOpt = PGOOptions("", "", "",
+#if LLVM_VERSION_GE(17, 0) || USE_APPLE_LLVM
 #if LLVM_VERSION_GE(17, 0)
                         "",
+#endif
                         FS,
 #endif
                         PGOOptions::NoAction, PGOOptions::NoCSAction,
@@ -874,7 +900,12 @@ LLVMRustOptimize(
           /*EagerChecks=*/true);
       OptimizerLastEPCallbacks.push_back(
         [Options](ModulePassManager &MPM, OptimizationLevel Level) {
+#if LLVM_VERSION_LT(16, 0) && !USE_APPLE_LLVM
+          MPM.addPass(ModuleMemorySanitizerPass(Options));
+          MPM.addPass(createModuleToFunctionPassAdaptor(MemorySanitizerPass(Options)));
+#else
           MPM.addPass(MemorySanitizerPass(Options));
+#endif
         }
       );
     }
@@ -899,7 +930,11 @@ LLVMRustOptimize(
             /*UseAfterScope=*/true,
             AsanDetectStackUseAfterReturnMode::Runtime,
           };
+#if LLVM_VERSION_LT(16, 0) && !USE_APPLE_LLVM
+          MPM.addPass(ModuleAddressSanitizerPass(opts));
+#else
           MPM.addPass(AddressSanitizerPass(opts));
+#endif
         }
       );
     }
--- a/compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp	1707052684.000000000
+++ b/compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp	1709023605.000000000
@@ -14,13 +14,18 @@
 #include "llvm/Remarks/RemarkSerializer.h"
 #include "llvm/Remarks/RemarkFormat.h"
 #include "llvm/Support/ToolOutputFile.h"
+#if LLVM_VERSION_GE(16, 0)
 #include "llvm/Support/ModRef.h"
+#endif
 #include "llvm/Object/Archive.h"
 #include "llvm/Object/COFFImportFile.h"
 #include "llvm/Object/ObjectFile.h"
 #include "llvm/Pass.h"
 #include "llvm/Bitcode/BitcodeWriter.h"
 #include "llvm/Support/Signals.h"
+#if LLVM_VERSION_LT(16, 0)
+#include "llvm/ADT/Optional.h"
+#endif
 
 #include <iostream>
 
@@ -344,7 +349,13 @@ extern "C" LLVMAttributeRef LLVMRustCrea
 }
 
 extern "C" LLVMAttributeRef LLVMRustCreateAllocSizeAttr(LLVMContextRef C, uint32_t ElementSizeArg) {
-  return wrap(Attribute::getWithAllocSizeArgs(*unwrap(C), ElementSizeArg, std::nullopt));
+  return wrap(Attribute::getWithAllocSizeArgs(*unwrap(C), ElementSizeArg,
+#if LLVM_VERSION_LT(16, 0)
+                                              None
+#else
+                                              std::nullopt
+#endif
+                                              ));
 }
 
 // These values **must** match ffi::AllocKindFlags.
@@ -407,6 +418,7 @@ enum class LLVMRustMemoryEffects {
 
 extern "C" LLVMAttributeRef LLVMRustCreateMemoryEffectsAttr(LLVMContextRef C,
                                                             LLVMRustMemoryEffects Effects) {
+#if LLVM_VERSION_GE(16, 0)
   switch (Effects) {
     case LLVMRustMemoryEffects::None:
       return wrap(Attribute::getWithMemoryEffects(*unwrap(C), MemoryEffects::none()));
@@ -418,6 +430,18 @@ extern "C" LLVMAttributeRef LLVMRustCrea
     default:
       report_fatal_error("bad MemoryEffects.");
   }
+#else
+  switch (Effects) {
+    case LLVMRustMemoryEffects::None:
+      return wrap(Attribute::get(*unwrap(C), Attribute::ReadNone));
+    case LLVMRustMemoryEffects::ReadOnly:
+      return wrap(Attribute::get(*unwrap(C), Attribute::ReadOnly));
+    case LLVMRustMemoryEffects::InaccessibleMemOnly:
+      return wrap(Attribute::get(*unwrap(C), Attribute::InaccessibleMemOnly));
+    default:
+      report_fatal_error("bad MemoryEffects.");
+  }
+#endif
 }
 
 // Enable a fast-math flag
@@ -723,10 +747,18 @@ enum class LLVMRustChecksumKind {
   SHA256,
 };
 
+#if LLVM_VERSION_LT(16, 0)
+static Optional<DIFile::ChecksumKind> fromRust(LLVMRustChecksumKind Kind) {
+#else
 static std::optional<DIFile::ChecksumKind> fromRust(LLVMRustChecksumKind Kind) {
+#endif
   switch (Kind) {
   case LLVMRustChecksumKind::None:
+#if LLVM_VERSION_LT(16, 0)
+    return None;
+#else
     return std::nullopt;
+#endif
   case LLVMRustChecksumKind::MD5:
     return DIFile::ChecksumKind::CSK_MD5;
   case LLVMRustChecksumKind::SHA1:
@@ -801,8 +833,17 @@ extern "C" LLVMMetadataRef LLVMRustDIBui
     const char *Directory, size_t DirectoryLen, LLVMRustChecksumKind CSKind,
     const char *Checksum, size_t ChecksumLen) {
 
+#if LLVM_VERSION_LT(16, 0)
+  Optional<DIFile::ChecksumKind> llvmCSKind = fromRust(CSKind);
+#else
   std::optional<DIFile::ChecksumKind> llvmCSKind = fromRust(CSKind);
+#endif
+
+#if LLVM_VERSION_LT(16, 0)
+  Optional<DIFile::ChecksumInfo<StringRef>> CSInfo{};
+#else
   std::optional<DIFile::ChecksumInfo<StringRef>> CSInfo{};
+#endif
   if (llvmCSKind)
     CSInfo.emplace(*llvmCSKind, StringRef{Checksum, ChecksumLen});
   return wrap(Builder->createFile(StringRef(Filename, FilenameLen),
@@ -2035,9 +2076,17 @@ extern "C" bool LLVMRustIsNonGVFunctionP
 }
 
 extern "C" bool LLVMRustLLVMHasZlibCompressionForDebugSymbols() {
+#if LLVM_VERSION_GE(16, 0)
   return llvm::compression::zlib::isAvailable();
+#else
+  return false;
+#endif
 }
 
 extern "C" bool LLVMRustLLVMHasZstdCompressionForDebugSymbols() {
+#if LLVM_VERSION_GE(16, 0)
   return llvm::compression::zstd::isAvailable();
+#else
+  return false;
+#endif
 }
--- a/compiler/rustc_target/src/spec/base/windows_gnu.rs	1707052684.000000000
+++ b/compiler/rustc_target/src/spec/base/windows_gnu.rs	1709303848.623397766
@@ -42,6 +42,8 @@ pub fn opts() -> TargetOptions {
         "-lmsvcrt",
         "-luser32",
         "-lkernel32",
+        "-lssp_nonshared",
+        "-lssp",
     ];
     let mut late_link_args =
         TargetOptions::link_args(LinkerFlavor::Gnu(Cc::No, Lld::No), mingw_libs);
--- a/compiler/rustc_target/src/spec/mod.rs	1707052684.000000000
+++ b/compiler/rustc_target/src/spec/mod.rs	1709023605.000000000
@@ -1158,6 +1158,10 @@ pub enum StackProbeType {
 }
 
 impl StackProbeType {
+    // LLVM X86 targets (ix86 and x86_64) can use inline-asm stack probes starting with LLVM 16.
+    // Notable past issues were rust#83139 (fixed in 14) and rust#84667 (fixed in 16).
+    const X86: Self = Self::InlineOrCall { min_llvm_version_for_inline: (16, 0, 0) };
+
     fn from_json(json: &Json) -> Result<Self, String> {
         let object = json.as_object().ok_or_else(|| "expected a JSON object")?;
         let kind = object
--- a/compiler/rustc_target/src/spec/targets/aarch64_apple_ios.rs	1707052684.000000000
+++ b/compiler/rustc_target/src/spec/targets/aarch64_apple_ios.rs	1708858613.000000000
@@ -16,7 +16,7 @@ pub fn target() -> Target {
         data_layout: "e-m:o-i64:64-i128:128-n32:64-S128".into(),
         arch: arch.target_arch(),
         options: TargetOptions {
-            features: "+neon,+fp-armv8,+apple-a7".into(),
+            features: "+v8.3a,+neon,+fp-armv8,+apple-a12,+crc,+crypto,+fullfp16,+ras,+lse,+rdm,+rcpc,+zcm,+zcz,+sha2,+aes".into(),
             max_atomic_width: Some(128),
             frame_pointer: FramePointer::NonLeaf,
             ..base
--- a/compiler/rustc_target/src/spec/targets/i586_pc_nto_qnx700.rs	1707052684.000000000
+++ b/compiler/rustc_target/src/spec/targets/i586_pc_nto_qnx700.rs	1709023605.000000000
@@ -16,7 +16,7 @@ pub fn target() -> Target {
                 &["-Vgcc_ntox86_cxx"],
             ),
             env: "nto70".into(),
-            stack_probes: StackProbeType::Inline,
+            stack_probes: StackProbeType::X86,
             ..base::nto_qnx::opts()
         },
     }
--- a/compiler/rustc_target/src/spec/targets/i686_linux_android.rs	1707052684.000000000
+++ b/compiler/rustc_target/src/spec/targets/i686_linux_android.rs	1709023605.000000000
@@ -11,7 +11,7 @@ pub fn target() -> Target {
     // https://developer.android.com/ndk/guides/abis.html#x86
     base.cpu = "pentiumpro".into();
     base.features = "+mmx,+sse,+sse2,+sse3,+ssse3".into();
-    base.stack_probes = StackProbeType::Inline;
+    base.stack_probes = StackProbeType::X86;
 
     Target {
         llvm_target: "i686-linux-android".into(),
--- a/compiler/rustc_target/src/spec/targets/i686_unknown_freebsd.rs	1707052684.000000000
+++ b/compiler/rustc_target/src/spec/targets/i686_unknown_freebsd.rs	1709023605.000000000
@@ -5,7 +5,7 @@ pub fn target() -> Target {
     base.cpu = "pentium4".into();
     base.max_atomic_width = Some(64);
     base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &["-m32", "-Wl,-znotext"]);
-    base.stack_probes = StackProbeType::Inline;
+    base.stack_probes = StackProbeType::X86;
 
     Target {
         llvm_target: "i686-unknown-freebsd".into(),
--- a/compiler/rustc_target/src/spec/targets/i686_unknown_haiku.rs	1707052684.000000000
+++ b/compiler/rustc_target/src/spec/targets/i686_unknown_haiku.rs	1709023605.000000000
@@ -5,7 +5,7 @@ pub fn target() -> Target {
     base.cpu = "pentium4".into();
     base.max_atomic_width = Some(64);
     base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &["-m32"]);
-    base.stack_probes = StackProbeType::Inline;
+    base.stack_probes = StackProbeType::X86;
 
     Target {
         llvm_target: "i686-unknown-haiku".into(),
--- a/compiler/rustc_target/src/spec/targets/i686_unknown_linux_gnu.rs	1707052684.000000000
+++ b/compiler/rustc_target/src/spec/targets/i686_unknown_linux_gnu.rs	1709303967.090777644
@@ -2,11 +2,11 @@ use crate::spec::{base, Cc, LinkerFlavor
 
 pub fn target() -> Target {
     let mut base = base::linux_gnu::opts();
-    base.cpu = "pentium4".into();
+    base.cpu = "pentiumpro".into();
     base.max_atomic_width = Some(64);
     base.supported_sanitizers = SanitizerSet::ADDRESS;
     base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &["-m32"]);
-    base.stack_probes = StackProbeType::Inline;
+    base.stack_probes = StackProbeType::X86;
 
     Target {
         llvm_target: "i686-unknown-linux-gnu".into(),
--- a/compiler/rustc_target/src/spec/targets/i686_unknown_linux_musl.rs	1707052684.000000000
+++ b/compiler/rustc_target/src/spec/targets/i686_unknown_linux_musl.rs	1709023605.000000000
@@ -5,7 +5,7 @@ pub fn target() -> Target {
     base.cpu = "pentium4".into();
     base.max_atomic_width = Some(64);
     base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &["-m32", "-Wl,-melf_i386"]);
-    base.stack_probes = StackProbeType::Inline;
+    base.stack_probes = StackProbeType::X86;
 
     // The unwinder used by i686-unknown-linux-musl, the LLVM libunwind
     // implementation, apparently relies on frame pointers existing... somehow.
--- a/compiler/rustc_target/src/spec/targets/i686_unknown_netbsd.rs	1707052684.000000000
+++ b/compiler/rustc_target/src/spec/targets/i686_unknown_netbsd.rs	1709023605.000000000
@@ -5,7 +5,7 @@ pub fn target() -> Target {
     base.cpu = "pentium4".into();
     base.max_atomic_width = Some(64);
     base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &["-m32"]);
-    base.stack_probes = StackProbeType::Inline;
+    base.stack_probes = StackProbeType::X86;
 
     Target {
         llvm_target: "i686-unknown-netbsdelf".into(),
--- a/compiler/rustc_target/src/spec/targets/i686_unknown_openbsd.rs	1707052684.000000000
+++ b/compiler/rustc_target/src/spec/targets/i686_unknown_openbsd.rs	1709023605.000000000
@@ -5,7 +5,7 @@ pub fn target() -> Target {
     base.cpu = "pentium4".into();
     base.max_atomic_width = Some(64);
     base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &["-m32", "-fuse-ld=lld"]);
-    base.stack_probes = StackProbeType::Inline;
+    base.stack_probes = StackProbeType::X86;
 
     Target {
         llvm_target: "i686-unknown-openbsd".into(),
--- a/compiler/rustc_target/src/spec/targets/i686_wrs_vxworks.rs	1707052684.000000000
+++ b/compiler/rustc_target/src/spec/targets/i686_wrs_vxworks.rs	1709023605.000000000
@@ -5,7 +5,7 @@ pub fn target() -> Target {
     base.cpu = "pentium4".into();
     base.max_atomic_width = Some(64);
     base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &["-m32"]);
-    base.stack_probes = StackProbeType::Inline;
+    base.stack_probes = StackProbeType::X86;
 
     Target {
         llvm_target: "i686-unknown-linux-gnu".into(),
--- a/compiler/rustc_target/src/spec/targets/x86_64_linux_android.rs	1707052684.000000000
+++ b/compiler/rustc_target/src/spec/targets/x86_64_linux_android.rs	1709023605.000000000
@@ -10,7 +10,7 @@ pub fn target() -> Target {
     base.features = "+mmx,+sse,+sse2,+sse3,+ssse3,+sse4.1,+sse4.2,+popcnt".into();
     base.max_atomic_width = Some(64);
     base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &["-m64"]);
-    base.stack_probes = StackProbeType::Inline;
+    base.stack_probes = StackProbeType::X86;
     base.supports_xray = true;
 
     Target {
--- a/compiler/rustc_target/src/spec/targets/x86_64_pc_solaris.rs	1707052684.000000000
+++ b/compiler/rustc_target/src/spec/targets/x86_64_pc_solaris.rs	1709023605.000000000
@@ -7,7 +7,7 @@ pub fn target() -> Target {
     base.plt_by_default = false;
     base.vendor = "pc".into();
     base.max_atomic_width = Some(64);
-    base.stack_probes = StackProbeType::Inline;
+    base.stack_probes = StackProbeType::X86;
     base.supported_sanitizers = SanitizerSet::ADDRESS | SanitizerSet::CFI | SanitizerSet::THREAD;
 
     Target {
--- a/compiler/rustc_target/src/spec/targets/x86_64_unikraft_linux_musl.rs	1707052684.000000000
+++ b/compiler/rustc_target/src/spec/targets/x86_64_unikraft_linux_musl.rs	1709023605.000000000
@@ -12,7 +12,7 @@ pub fn target() -> Target {
             plt_by_default: false,
             pre_link_args: TargetOptions::link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &["-m64"]),
             max_atomic_width: Some(64),
-            stack_probes: StackProbeType::Inline,
+            stack_probes: StackProbeType::X86,
             ..base::unikraft_linux_musl::opts()
         },
     }
--- a/compiler/rustc_target/src/spec/targets/x86_64_unknown_dragonfly.rs	1707052684.000000000
+++ b/compiler/rustc_target/src/spec/targets/x86_64_unknown_dragonfly.rs	1709023605.000000000
@@ -6,7 +6,7 @@ pub fn target() -> Target {
     base.plt_by_default = false;
     base.max_atomic_width = Some(64);
     base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &["-m64"]);
-    base.stack_probes = StackProbeType::Inline;
+    base.stack_probes = StackProbeType::X86;
 
     Target {
         llvm_target: "x86_64-unknown-dragonfly".into(),
--- a/compiler/rustc_target/src/spec/targets/x86_64_unknown_freebsd.rs	1707052684.000000000
+++ b/compiler/rustc_target/src/spec/targets/x86_64_unknown_freebsd.rs	1709023605.000000000
@@ -6,7 +6,7 @@ pub fn target() -> Target {
     base.plt_by_default = false;
     base.max_atomic_width = Some(64);
     base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &["-m64"]);
-    base.stack_probes = StackProbeType::Inline;
+    base.stack_probes = StackProbeType::X86;
     base.supported_sanitizers =
         SanitizerSet::ADDRESS | SanitizerSet::CFI | SanitizerSet::MEMORY | SanitizerSet::THREAD;
     base.supports_xray = true;
--- a/compiler/rustc_target/src/spec/targets/x86_64_unknown_fuchsia.rs	1707052684.000000000
+++ b/compiler/rustc_target/src/spec/targets/x86_64_unknown_fuchsia.rs	1709023605.000000000
@@ -5,7 +5,7 @@ pub fn target() -> Target {
     base.cpu = "x86-64".into();
     base.plt_by_default = false;
     base.max_atomic_width = Some(64);
-    base.stack_probes = StackProbeType::Inline;
+    base.stack_probes = StackProbeType::X86;
     base.supported_sanitizers = SanitizerSet::ADDRESS | SanitizerSet::CFI;
 
     Target {
--- a/compiler/rustc_target/src/spec/targets/x86_64_unknown_haiku.rs	1707052684.000000000
+++ b/compiler/rustc_target/src/spec/targets/x86_64_unknown_haiku.rs	1709023605.000000000
@@ -6,7 +6,7 @@ pub fn target() -> Target {
     base.plt_by_default = false;
     base.max_atomic_width = Some(64);
     base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &["-m64"]);
-    base.stack_probes = StackProbeType::Inline;
+    base.stack_probes = StackProbeType::X86;
     // This option is required to build executables on Haiku x86_64
     base.position_independent_executables = true;
 
--- a/compiler/rustc_target/src/spec/targets/x86_64_unknown_hermit.rs	1707052684.000000000
+++ b/compiler/rustc_target/src/spec/targets/x86_64_unknown_hermit.rs	1709023605.000000000
@@ -12,7 +12,7 @@ pub fn target() -> Target {
             features: "+rdrnd,+rdseed".into(),
             plt_by_default: false,
             max_atomic_width: Some(64),
-            stack_probes: StackProbeType::Inline,
+            stack_probes: StackProbeType::X86,
             ..base::hermit::opts()
         },
     }
--- a/compiler/rustc_target/src/spec/targets/x86_64_unknown_linux_gnu.rs	1707052684.000000000
+++ b/compiler/rustc_target/src/spec/targets/x86_64_unknown_linux_gnu.rs	1709023605.000000000
@@ -6,7 +6,7 @@ pub fn target() -> Target {
     base.plt_by_default = false;
     base.max_atomic_width = Some(64);
     base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &["-m64"]);
-    base.stack_probes = StackProbeType::Inline;
+    base.stack_probes = StackProbeType::X86;
     base.static_position_independent_executables = true;
     base.supported_sanitizers = SanitizerSet::ADDRESS
         | SanitizerSet::CFI
--- a/compiler/rustc_target/src/spec/targets/x86_64_unknown_linux_gnux32.rs	1707052684.000000000
+++ b/compiler/rustc_target/src/spec/targets/x86_64_unknown_linux_gnux32.rs	1709023605.000000000
@@ -6,7 +6,7 @@ pub fn target() -> Target {
     base.abi = "x32".into();
     base.max_atomic_width = Some(64);
     base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &["-mx32"]);
-    base.stack_probes = StackProbeType::Inline;
+    base.stack_probes = StackProbeType::X86;
     base.has_thread_local = false;
     // BUG(GabrielMajeri): disabling the PLT on x86_64 Linux with x32 ABI
     // breaks code gen. See LLVM bug 36743
--- a/compiler/rustc_target/src/spec/targets/x86_64_unknown_linux_musl.rs	1707052684.000000000
+++ b/compiler/rustc_target/src/spec/targets/x86_64_unknown_linux_musl.rs	1709023605.000000000
@@ -6,7 +6,7 @@ pub fn target() -> Target {
     base.plt_by_default = false;
     base.max_atomic_width = Some(64);
     base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &["-m64"]);
-    base.stack_probes = StackProbeType::Inline;
+    base.stack_probes = StackProbeType::X86;
     base.static_position_independent_executables = true;
     base.supported_sanitizers = SanitizerSet::ADDRESS
         | SanitizerSet::CFI
--- a/compiler/rustc_target/src/spec/targets/x86_64_unknown_linux_ohos.rs	1707052684.000000000
+++ b/compiler/rustc_target/src/spec/targets/x86_64_unknown_linux_ohos.rs	1709023605.000000000
@@ -5,7 +5,7 @@ pub fn target() -> Target {
     base.cpu = "x86-64".into();
     base.max_atomic_width = Some(64);
     base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &["-m64"]);
-    base.stack_probes = StackProbeType::Inline;
+    base.stack_probes = StackProbeType::X86;
     base.static_position_independent_executables = true;
     base.supported_sanitizers = SanitizerSet::ADDRESS
         | SanitizerSet::CFI
--- a/compiler/rustc_target/src/spec/targets/x86_64_unknown_netbsd.rs	1707052684.000000000
+++ b/compiler/rustc_target/src/spec/targets/x86_64_unknown_netbsd.rs	1709023605.000000000
@@ -8,7 +8,7 @@ pub fn target() -> Target {
     base.plt_by_default = false;
     base.max_atomic_width = Some(64);
     base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &["-m64"]);
-    base.stack_probes = StackProbeType::Inline;
+    base.stack_probes = StackProbeType::X86;
     base.supported_sanitizers = SanitizerSet::ADDRESS
         | SanitizerSet::CFI
         | SanitizerSet::LEAK
--- a/compiler/rustc_target/src/spec/targets/x86_64_unknown_none.rs	1707052684.000000000
+++ b/compiler/rustc_target/src/spec/targets/x86_64_unknown_none.rs	1709023605.000000000
@@ -12,7 +12,7 @@ pub fn target() -> Target {
         cpu: "x86-64".into(),
         plt_by_default: false,
         max_atomic_width: Some(64),
-        stack_probes: StackProbeType::Inline,
+        stack_probes: StackProbeType::X86,
         position_independent_executables: true,
         static_position_independent_executables: true,
         relro_level: RelroLevel::Full,
--- a/compiler/rustc_target/src/spec/targets/x86_64_unknown_openbsd.rs	1707052684.000000000
+++ b/compiler/rustc_target/src/spec/targets/x86_64_unknown_openbsd.rs	1709023605.000000000
@@ -6,7 +6,7 @@ pub fn target() -> Target {
     base.plt_by_default = false;
     base.max_atomic_width = Some(64);
     base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &["-m64"]);
-    base.stack_probes = StackProbeType::Inline;
+    base.stack_probes = StackProbeType::X86;
     base.supports_xray = true;
 
     Target {
--- a/compiler/rustc_target/src/spec/targets/x86_64_unknown_redox.rs	1707052684.000000000
+++ b/compiler/rustc_target/src/spec/targets/x86_64_unknown_redox.rs	1709023605.000000000
@@ -6,7 +6,7 @@ pub fn target() -> Target {
     base.plt_by_default = false;
     base.max_atomic_width = Some(64);
     base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &["-m64"]);
-    base.stack_probes = StackProbeType::Inline;
+    base.stack_probes = StackProbeType::X86;
 
     Target {
         llvm_target: "x86_64-unknown-redox".into(),
--- a/compiler/rustc_target/src/spec/targets/x86_64_wrs_vxworks.rs	1707052684.000000000
+++ b/compiler/rustc_target/src/spec/targets/x86_64_wrs_vxworks.rs	1709023605.000000000
@@ -6,7 +6,7 @@ pub fn target() -> Target {
     base.plt_by_default = false;
     base.max_atomic_width = Some(64);
     base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &["-m64"]);
-    base.stack_probes = StackProbeType::Inline;
+    base.stack_probes = StackProbeType::X86;
     base.disable_redzone = true;
 
     Target {
--- a/library/alloc/tests/arc.rs	1707052684.000000000
+++ b/library/alloc/tests/arc.rs	1709301568.247055329
@@ -95,6 +95,7 @@ const SHARED_ITER_MAX: u16 = 100;
 
 fn assert_trusted_len<I: TrustedLen>(_: &I) {}
 
+#[cfg(not(any(target_arch = "powerpc", target_arch = "powerpc64")))]
 #[test]
 fn shared_from_iter_normal() {
     // Exercise the base implementation for non-`TrustedLen` iterators.
--- a/library/alloc/tests/rc.rs	1707052684.000000000
+++ b/library/alloc/tests/rc.rs	1709301568.248007694
@@ -91,6 +91,7 @@ const SHARED_ITER_MAX: u16 = 100;
 
 fn assert_trusted_len<I: TrustedLen>(_: &I) {}
 
+#[cfg(not(any(target_arch = "powerpc", target_arch = "powerpc64")))]
 #[test]
 fn shared_from_iter_normal() {
     // Exercise the base implementation for non-`TrustedLen` iterators.
--- a/library/std/src/sys/unix/process/process_unix.rs	1707052684.000000000
+++ b/library/std/src/sys/unix/process/process_unix.rs	1709119801.876815418
@@ -14,6 +14,7 @@ use crate::os::unix::io::AsRawFd;
 
 #[cfg(any(
     target_os = "macos",
+    target_os = "ios",
     target_os = "watchos",
     target_os = "tvos",
     target_os = "freebsd",
@@ -426,6 +427,7 @@ impl Command {
 
     #[cfg(not(any(
         target_os = "macos",
+        target_os = "ios",
         target_os = "tvos",
         target_os = "watchos",
         target_os = "freebsd",
@@ -445,7 +447,7 @@ impl Command {
     // directly.
     #[cfg(any(
         target_os = "macos",
-        // FIXME: `target_os = "ios"`?
+        target_os = "ios",
         target_os = "tvos",
         target_os = "watchos",
         target_os = "freebsd",
@@ -534,7 +536,7 @@ impl Command {
         }
         let addchdir = match self.get_cwd() {
             Some(cwd) => {
-                if cfg!(any(target_os = "macos", target_os = "tvos", target_os = "watchos")) {
+                if cfg!(any(target_os = "macos", target_os = "ios", target_os = "tvos", target_os = "watchos")) {
                     // There is a bug in macOS where a relative executable
                     // path like "../myprogram" will cause `posix_spawn` to
                     // successfully launch the program, but erroneously return
--- a/src/bootstrap/bootstrap.py	1707052685.000000000
+++ b/src/bootstrap/bootstrap.py	1709373364.070390526
@@ -955,10 +955,6 @@ class RustBuild(object):
         args = [self.cargo(), "build", "--manifest-path",
                 os.path.join(self.rust_root, "src/bootstrap/Cargo.toml")]
         args.extend("--verbose" for _ in range(self.verbose))
-        if self.use_locked_deps:
-            args.append("--locked")
-        if self.use_vendored_sources:
-            args.append("--frozen")
         if self.get_toml("metrics", "build"):
             args.append("--features")
             args.append("build-metrics")
@@ -1098,6 +1094,8 @@ def bootstrap(args):
     env = os.environ.copy()
     env["BOOTSTRAP_PARENT_ID"] = str(os.getpid())
     env["BOOTSTRAP_PYTHON"] = sys.executable
+    print("Torrekie: args: " + str(args))
+    print("Torrekie: env: " + str(env))
     run(args, env=env, verbose=build.verbose, is_bootstrap=True)
 
 
--- a/src/bootstrap/src/bin/rustc.rs	1707052685.000000000
+++ b/src/bootstrap/src/bin/rustc.rs	1708858518.000000000
@@ -401,7 +401,7 @@ fn format_rusage_data(_child: Child) ->
         recv
     };
     // Mac OS X reports the maxrss in bytes, not kb.
-    let divisor = if env::consts::OS == "macos" { 1024 } else { 1 };
+    let divisor = if env::consts::OS == "macos" || env::consts::OS == "ios" { 1024 } else { 1 };
     let maxrss = (rusage.ru_maxrss + (divisor - 1)) / divisor;
 
     let mut init_str = format!(
--- a/src/bootstrap/src/core/build_steps/dist.rs	1707052685.000000000
+++ b/src/bootstrap/src/core/build_steps/dist.rs	1709373769.700762212
@@ -79,6 +79,7 @@ impl Step for Docs {
         tarball.set_product_name("Rust Documentation");
         tarball.add_bulk_dir(&builder.doc_out(host), dest);
         tarball.add_file(&builder.src.join("src/doc/robots.txt"), dest, 0o644);
+        tarball.permit_symlinks(true);
         Some(tarball.generate())
     }
 }
@@ -991,7 +992,10 @@ impl Step for PlainSourceTarball {
 
         // If we're building from git or tarball sources, we need to vendor
         // a complete distribution.
-        if builder.rust_info().is_managed_git_subrepository()
+        //
+        // Debian: short-circuited because the Debian package is also in a git
+        //         repository, but cargo-vendor should not be installed or run.
+        if false && builder.rust_info().is_managed_git_subrepository()
             || builder.rust_info().is_from_tarball()
         {
             if builder.rust_info().is_managed_git_subrepository() {
@@ -2066,7 +2070,7 @@ fn maybe_install_llvm(builder: &Builder<
     // clear why this is the case, though. llvm-config will emit the versioned
     // paths and we don't want those in the sysroot (as we're expecting
     // unversioned paths).
-    if target.contains("apple-darwin") && builder.llvm_link_shared() {
+    if (target.contains("apple-darwin") || target.contains("apple-ios")) && builder.llvm_link_shared() {
         let src_libdir = builder.llvm_out(target).join("lib");
         let llvm_dylib_path = src_libdir.join("libLLVM.dylib");
         if llvm_dylib_path.exists() {
--- a/src/bootstrap/src/core/build_steps/doc.rs	1707052685.000000000
+++ b/src/bootstrap/src/core/build_steps/doc.rs	1709302058.573117472
@@ -75,7 +75,6 @@ macro_rules! book {
 // FIXME: Make checking for a submodule automatic somehow (maybe by having a list of all submodules
 // and checking against it?).
 book!(
-    CargoBook, "src/tools/cargo/src/doc", "cargo", submodule = "src/tools/cargo";
     ClippyBook, "src/tools/clippy/book", "clippy";
     EditionGuide, "src/doc/edition-guide", "edition-guide", submodule;
     EmbeddedBook, "src/doc/embedded-book", "embedded-book", submodule;
--- a/src/bootstrap/src/core/build_steps/llvm.rs	1707052685.000000000
+++ b/src/bootstrap/src/core/build_steps/llvm.rs	1709023605.000000000
@@ -569,11 +569,11 @@ fn check_llvm_version(builder: &Builder<
     let version = output(cmd.arg("--version"));
     let mut parts = version.split('.').take(2).filter_map(|s| s.parse::<u32>().ok());
     if let (Some(major), Some(_minor)) = (parts.next(), parts.next()) {
-        if major >= 16 {
+        if major >= 15 {
             return;
         }
     }
-    panic!("\n\nbad LLVM version: {version}, need >=16.0\n\n")
+    panic!("\n\nbad LLVM version: {version}, need >=15.0\n\n")
 }
 
 fn configure_cmake(
--- a/src/bootstrap/src/core/build_steps/test.rs	1707052685.000000000
+++ b/src/bootstrap/src/core/build_steps/test.rs	1709303755.334944993
@@ -1787,7 +1787,11 @@ NOTE: if you're sure you want to do this
             .ok();
         if let Some(ref vers) = lldb_version {
             cmd.arg("--lldb-version").arg(vers);
-            let lldb_python_dir = run(Command::new(lldb_exe).arg("-P")).ok();
+            let lldb_python_dir = Command::new(lldb_exe)
+                .arg("-P")
+                .output()
+                .map(|output| String::from_utf8_lossy(&output.stdout).to_string())
+                .ok();
             if let Some(ref dir) = lldb_python_dir {
                 cmd.arg("--lldb-python-dir").arg(dir);
             }
--- a/src/bootstrap/src/core/builder.rs	1707052685.000000000
+++ b/src/bootstrap/src/core/builder.rs	1709304455.965466700
@@ -1,12 +1,14 @@
+#[allow(unreachable_code)]
+#[allow(unused_mut)]
 use std::any::{type_name, Any};
 use std::cell::{Cell, RefCell};
 use std::collections::BTreeSet;
 use std::env;
 use std::ffi::{OsStr, OsString};
 use std::fmt::{Debug, Write};
-use std::fs::{self, File};
+use std::fs::{self};
 use std::hash::Hash;
-use std::io::{BufRead, BufReader};
+use std::io::BufRead;
 use std::ops::Deref;
 use std::path::{Path, PathBuf};
 use std::process::Command;
@@ -498,20 +500,20 @@ impl<'a> ShouldRun<'a> {
         static SUBMODULES_PATHS: OnceLock<Vec<String>> = OnceLock::new();
 
         let init_submodules_paths = |src: &PathBuf| {
-            let file = File::open(src.join(".gitmodules")).unwrap();
+            //let file = File::open(src.join(".gitmodules")).unwrap();
 
             let mut submodules_paths = vec![];
-            for line in BufReader::new(file).lines() {
-                if let Ok(line) = line {
-                    let line = line.trim();
-
-                    if line.starts_with("path") {
-                        let actual_path =
-                            line.split(' ').last().expect("Couldn't get value of path");
-                        submodules_paths.push(actual_path.to_owned());
-                    }
-                }
-            }
+            //for line in BufReader::new(file).lines() {
+            //    if let Ok(line) = line {
+            //        let line = line.trim();
+
+            //        if line.starts_with("path") {
+            //            let actual_path =
+            //                line.split(' ').last().expect("Couldn't get value of path");
+            //            submodules_paths.push(actual_path.to_owned());
+            //        }
+            //    }
+            //}
 
             submodules_paths
         };
@@ -685,24 +687,13 @@ impl<'a> Builder<'a> {
                 tool::Linkchecker,
                 tool::CargoTest,
                 tool::Compiletest,
-                tool::RemoteTestServer,
-                tool::RemoteTestClient,
                 tool::RustInstaller,
-                tool::Cargo,
-                tool::Rls,
-                tool::RustAnalyzer,
                 tool::RustAnalyzerProcMacroSrv,
                 tool::RustDemangler,
                 tool::Rustdoc,
                 tool::Clippy,
                 tool::CargoClippy,
-                llvm::Llvm,
-                llvm::Sanitizers,
                 tool::Rustfmt,
-                tool::Miri,
-                tool::CargoMiri,
-                llvm::Lld,
-                llvm::CrtBeginEnd,
                 tool::RustdocGUITest,
                 tool::OptimizedDist,
                 tool::CoverageDump,
@@ -713,12 +704,7 @@ impl<'a> Builder<'a> {
                 check::Rustdoc,
                 check::CodegenBackend,
                 check::Clippy,
-                check::Miri,
-                check::CargoMiri,
-                check::MiroptTestTools,
-                check::Rls,
                 check::Rustfmt,
-                check::RustAnalyzer,
                 check::Bootstrap
             ),
             Kind::Test => describe!(
@@ -750,8 +736,6 @@ impl<'a> Builder<'a> {
                 test::Linkcheck,
                 test::TierCheck,
                 test::Cargotest,
-                test::Cargo,
-                test::RustAnalyzer,
                 test::ErrorIndex,
                 test::Distcheck,
                 test::RunMakeFullDeps,
@@ -767,7 +751,6 @@ impl<'a> Builder<'a> {
                 test::EmbeddedBook,
                 test::EditionGuide,
                 test::Rustfmt,
-                test::Miri,
                 test::Clippy,
                 test::RustDemangler,
                 test::CompiletestTest,
@@ -800,11 +783,8 @@ impl<'a> Builder<'a> {
                 doc::RustdocBook,
                 doc::RustByExample,
                 doc::RustcBook,
-                doc::Cargo,
-                doc::CargoBook,
                 doc::Clippy,
                 doc::ClippyBook,
-                doc::Miri,
                 doc::EmbeddedBook,
                 doc::EditionGuide,
                 doc::StyleGuide,
@@ -823,13 +803,9 @@ impl<'a> Builder<'a> {
                 dist::RustcDev,
                 dist::Analysis,
                 dist::Src,
-                dist::Cargo,
-                dist::Rls,
-                dist::RustAnalyzer,
                 dist::Rustfmt,
                 dist::RustDemangler,
                 dist::Clippy,
-                dist::Miri,
                 dist::LlvmTools,
                 dist::RustDev,
                 dist::Bootstrap,
@@ -845,12 +821,9 @@ impl<'a> Builder<'a> {
             Kind::Install => describe!(
                 install::Docs,
                 install::Std,
-                install::Cargo,
-                install::RustAnalyzer,
                 install::Rustfmt,
                 install::RustDemangler,
                 install::Clippy,
-                install::Miri,
                 install::LlvmTools,
                 install::Src,
                 install::Rustc
@@ -860,7 +833,6 @@ impl<'a> Builder<'a> {
                 run::BuildManifest,
                 run::BumpStage0,
                 run::ReplaceVersionPlaceholder,
-                run::Miri,
                 run::CollectLicenseMetadata,
                 run::GenerateCopyright,
                 run::GenerateWindowsSys,
@@ -1487,6 +1459,18 @@ impl<'a> Builder<'a> {
         hostflags.arg("-Zunstable-options");
         hostflags.arg("--check-cfg=cfg(bootstrap)");
 
+        // Debian-specific stuff here
+        // set linker flags from LDFLAGS
+        if let Ok(ldflags) = env::var("LDFLAGS") {
+            for flag in ldflags.split_whitespace() {
+                if target.contains("windows") && flag.contains("relro") {
+                    // relro is ELF-specific
+                    continue;
+                }
+                rustflags.arg(&format!("-Clink-args={}", flag));
+            }
+        }
+
         // FIXME: It might be better to use the same value for both `RUSTFLAGS` and `RUSTDOCFLAGS`,
         // but this breaks CI. At the very least, stage0 `rustdoc` needs `--cfg bootstrap`. See
         // #71458.
@@ -2080,10 +2064,7 @@ impl<'a> Builder<'a> {
             }
         }
 
-        if self.config.locked_deps {
-            cargo.arg("--locked");
-        }
-        if self.config.vendor || self.is_sudo {
+        if self.is_sudo {
             cargo.arg("--frozen");
         }
 
--- a/src/bootstrap/src/tests/builder.rs	1707052685.000000000
+++ b/src/bootstrap/src/tests/builder.rs	1709303618.386051918
@@ -374,9 +374,13 @@ mod dist {
     #[test]
     fn dist_only_cross_host() {
         let b = TargetSelection::from_user("B");
+        let mut tools = std::collections::HashSet::new();
+        tools.insert("clippy".to_string());
+        tools.insert("rustfmt".to_string());
         let mut config = configure(&["A", "B"], &["A", "B"]);
         config.docs = false;
         config.extended = true;
+        config.tools = Some(tools);
         config.hosts = vec![b];
         let mut cache = run_build(&[], config);
 
--- a/src/bootstrap/src/utils/channel.rs	1707052685.000000000
+++ b/src/bootstrap/src/utils/channel.rs	1709303193.069962330
@@ -35,6 +35,12 @@ pub struct Info {
 
 impl GitInfo {
     pub fn new(omit_git_hash: bool, dir: &Path) -> GitInfo {
+        //
+        // Debian: returning early because the Debian package is also in a git
+        //         repository, but we don't want to parse gitinfo. This is
+        //         needed for the bootstrap tests to work which running for
+        //         Debian git.
+        return GitInfo::Absent;
         // See if this even begins to look like a git dir
         if !dir.join(".git").exists() {
             match read_commit_info_file(dir) {
--- a/src/bootstrap/src/utils/dylib.rs	1707052685.000000000
+++ b/src/bootstrap/src/utils/dylib.rs	1708858792.000000000
@@ -5,6 +5,8 @@
 pub fn dylib_path_var() -> &'static str {
     if cfg!(target_os = "windows") {
         "PATH"
+    } else if cfg!(target_os = "ios") {
+        "DYLD_LIBRARY_PATH"
     } else if cfg!(target_os = "macos") {
         "DYLD_LIBRARY_PATH"
     } else if cfg!(target_os = "haiku") {
--- a/src/bootstrap/src/utils/helpers.rs	1707052685.000000000
+++ b/src/bootstrap/src/utils/helpers.rs	1709375708.759734865
@@ -76,7 +76,10 @@ pub fn libdir(target: TargetSelection) -
 pub fn add_dylib_path(path: Vec<PathBuf>, cmd: &mut Command) {
     let mut list = dylib_path();
     for path in path {
-        list.insert(0, path);
+        // Torrekie: don't specify /usr/lib for dyld
+        if path != PathBuf::from("/usr/lib") {
+            list.insert(0, path);
+        }
     }
     cmd.env(dylib_path_var(), t!(env::join_paths(list)));
 }
--- a/src/ci/docker/host-x86_64/x86_64-gnu-llvm-16/Dockerfile	1707052685.000000000
+++ b/src/ci/docker/host-x86_64/x86_64-gnu-llvm-16/Dockerfile	1709023605.000000000
@@ -52,6 +52,6 @@ ENV RUST_CONFIGURE_ARGS \
       --enable-llvm-link-shared \
       --set rust.thin-lto-import-instr-limit=10
 
-COPY host-x86_64/x86_64-gnu-llvm-16/script.sh /tmp/
+COPY host-x86_64/x86_64-gnu-llvm-15/script.sh /tmp/
 
 ENV SCRIPT /tmp/script.sh
--- a/src/ci/docker/host-x86_64/x86_64-gnu-llvm-17/Dockerfile	1707052685.000000000
+++ b/src/ci/docker/host-x86_64/x86_64-gnu-llvm-17/Dockerfile	1709023605.000000000
@@ -48,6 +48,6 @@ ENV RUST_CONFIGURE_ARGS \
       --enable-llvm-link-shared \
       --set rust.thin-lto-import-instr-limit=10
 
-COPY host-x86_64/x86_64-gnu-llvm-16/script.sh /tmp/
+COPY host-x86_64/x86_64-gnu-llvm-15/script.sh /tmp/
 
 ENV SCRIPT /tmp/script.sh
--- a/src/ci/github-actions/ci.yml	1707052685.000000000
+++ b/src/ci/github-actions/ci.yml	1709023605.000000000
@@ -334,7 +334,7 @@ jobs:
           - name: mingw-check-tidy
             <<: *job-linux-4c
 
-          - name: x86_64-gnu-llvm-16
+          - name: x86_64-gnu-llvm-15
             env:
               ENABLE_GCC_CODEGEN: "1"
             <<: *job-linux-16c
@@ -493,6 +493,11 @@ jobs:
             env:
               RUST_BACKTRACE: 1
             <<: *job-linux-8c
+
+          - name: x86_64-gnu-llvm-15
+            env:
+              RUST_BACKTRACE: 1
+            <<: *job-linux-8c
 
           - name: x86_64-gnu-nopt
             <<: *job-linux-4c
--- a/src/etc/rust-lldb	1707052685.000000000
+++ b/src/etc/rust-lldb	1709303767.690799392
@@ -7,10 +7,10 @@ set -e
 host=$(rustc -vV | sed -n -e 's/^host: //p')
 
 # Find out where to look for the pretty printer Python module
-RUSTC_SYSROOT=$(rustc --print sysroot)
+RUSTC_SYSROOT="$(if type "$RUSTC" >/dev/null 2>&1; then "$RUSTC" --print=sysroot; else echo /usr; fi)"
 RUST_LLDB="$RUSTC_SYSROOT/lib/rustlib/$host/bin/lldb"
 
-lldb=lldb
+lldb=lldb-16
 if [ -f "$RUST_LLDB" ]; then
     lldb="$RUST_LLDB"
 else
--- a/src/tools/cargo/crates/cargo-platform/examples/matches.rs	1707052733.000000000
+++ b/src/tools/cargo/crates/cargo-platform/examples/matches.rs	1708858427.000000000
@@ -10,6 +10,7 @@ use std::str::FromStr;
 static EXAMPLES: &[&str] = &[
     "cfg(windows)",
     "cfg(unix)",
+    "cfg(target_os=\"ios\")",
     "cfg(target_os=\"macos\")",
     "cfg(target_os=\"linux\")",
     "cfg(any(target_arch=\"x86\", target_arch=\"x86_64\"))",
--- a/src/tools/cargo/crates/cargo-util/Cargo.toml	1707052733.000000000
+++ b/src/tools/cargo/crates/cargo-util/Cargo.toml	1708858427.000000000
@@ -22,7 +22,7 @@ tempfile.workspace = true
 tracing.workspace = true
 walkdir.workspace = true
 
-[target.'cfg(target_os = "macos")'.dependencies]
+[target.'cfg(any(target_os = "macos", target_os = "ios"))'.dependencies]
 core-foundation.workspace = true
 
 [target.'cfg(windows)'.dependencies]
--- a/src/tools/cargo/crates/cargo-util/src/paths.rs	1707052733.000000000
+++ b/src/tools/cargo/crates/cargo-util/src/paths.rs	1708858427.000000000
@@ -38,7 +38,7 @@ pub fn join_paths<T: AsRef<OsStr>>(paths
 pub fn dylib_path_envvar() -> &'static str {
     if cfg!(windows) {
         "PATH"
-    } else if cfg!(target_os = "macos") {
+    } else if cfg!(target_os = "macos") || cfg!(target_os = "ios") {
         // When loading and linking a dynamic library or bundle, dlopen
         // searches in LD_LIBRARY_PATH, DYLD_LIBRARY_PATH, PWD, and
         // DYLD_FALLBACK_LIBRARY_PATH.
@@ -578,7 +578,7 @@ fn _link_or_copy(src: &Path, dst: &Path)
         // gory details.
         fs::copy(src, dst).map(|_| ())
     } else {
-        if cfg!(target_os = "macos") {
+        if cfg!(target_os = "macos") || cfg!(target_os = "ios") {
             // This is a work-around for a bug on macos. There seems to be a race condition
             // with APFS when hard-linking binaries. Gatekeeper does not have signing or
             // hash information stored in kernel when running the process. Therefore killing it.
@@ -762,10 +762,10 @@ fn exclude_from_content_indexing(path: &
     }
 }
 
-#[cfg(not(target_os = "macos"))]
+#[cfg(not(any(target_os = "macos", target_os = "ios")))]
 fn exclude_from_time_machine(_: &Path) {}
 
-#[cfg(target_os = "macos")]
+#[cfg(any(target_os = "macos", target_os = "ios"))]
 /// Marks files or directories as excluded from Time Machine on macOS
 fn exclude_from_time_machine(path: &Path) {
     use core_foundation::base::TCFType;
--- a/src/tools/cargo/credential/cargo-credential-macos-keychain/Cargo.toml	1707052733.000000000
+++ b/src/tools/cargo/credential/cargo-credential-macos-keychain/Cargo.toml	1708858427.000000000
@@ -10,7 +10,7 @@ description = "A Cargo credential proces
 [dependencies]
 cargo-credential.workspace = true
 
-[target.'cfg(target_os = "macos")'.dependencies]
+[target.'cfg(any(target_os = "macos"))'.dependencies]
 security-framework.workspace = true
 
 [lints]
--- a/src/tools/cargo/src/cargo/core/compiler/compilation.rs	1707052733.000000000
+++ b/src/tools/cargo/src/cargo/core/compiler/compilation.rs	1708858427.000000000
@@ -296,7 +296,7 @@ impl<'cfg> Compilation<'cfg> {
         let dylib_path = paths::dylib_path();
         let dylib_path_is_empty = dylib_path.is_empty();
         search_path.extend(dylib_path.into_iter());
-        if cfg!(target_os = "macos") && dylib_path_is_empty {
+        if (cfg!(target_os = "macos") || cfg!(target_os = "ios")) && dylib_path_is_empty {
             // These are the defaults when DYLD_FALLBACK_LIBRARY_PATH isn't
             // set or set to an empty string. Since Cargo is explicitly setting
             // the value, make sure the defaults still work.
--- a/src/tools/cargo/src/cargo/util/cpu.rs	1707052733.000000000
+++ b/src/tools/cargo/src/cargo/util/cpu.rs	1708858427.000000000
@@ -83,7 +83,7 @@ mod imp {
     }
 }
 
-#[cfg(target_os = "macos")]
+#[cfg(any(target_os = "macos", target_os = "ios"))]
 #[allow(bad_style)]
 mod imp {
     use std::io;
@@ -225,7 +225,7 @@ mod imp {
     }
 }
 
-#[cfg(not(any(target_os = "linux", target_os = "macos", windows)))]
+#[cfg(not(any(target_os = "linux", target_os = "macos", target_os = "ios", windows)))]
 mod imp {
     use std::io;
 
--- a/src/tools/clippy/Cargo.toml	1707052685.000000000
+++ b/src/tools/clippy/Cargo.toml	1709302850.207048482
@@ -44,7 +44,7 @@ clippy_utils = { path = "clippy_utils" }
 if_chain = "1.0"
 quote = "1.0"
 serde = { version = "1.0.125", features = ["derive"] }
-syn = { version = "2.0", features = ["full"] }
+syn = { version = "2.0", features = ["full", "visit"] }
 futures = "0.3"
 parking_lot = "0.12"
 tokio = { version = "1", features = ["io-util"] }
--- a/src/tools/compiletest/src/runtest.rs	1707052685.000000000
+++ b/src/tools/compiletest/src/runtest.rs	1709209996.957450640
@@ -92,7 +92,7 @@ pub fn get_lib_name(lib: &str, dylib: bo
 
     if cfg!(windows) {
         format!("{}.dll", lib)
-    } else if cfg!(target_os = "macos") {
+    } else if cfg!(any(target_os = "macos", target_os = "ios")) {
         format!("lib{}.dylib", lib)
     } else {
         format!("lib{}.so", lib)
--- a/src/tools/compiletest/src/util.rs	1707052685.000000000
+++ b/src/tools/compiletest/src/util.rs	1709209981.421613357
@@ -57,7 +57,7 @@ impl PathBufExt for PathBuf {
 pub fn dylib_env_var() -> &'static str {
     if cfg!(windows) {
         "PATH"
-    } else if cfg!(target_os = "macos") {
+    } else if cfg!(any(target_os = "macos", target_os = "ios")) {
         "DYLD_LIBRARY_PATH"
     } else if cfg!(target_os = "haiku") {
         "LIBRARY_PATH"
--- a/src/tools/miri/src/shims/time.rs	1707052685.000000000
+++ b/src/tools/miri/src/shims/time.rs	1709210269.315299574
@@ -48,7 +48,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mi
                     this.eval_libc_i32("CLOCK_MONOTONIC_COARSE"),
                 ];
             }
-            "macos" => {
+            "macos" | "ios" => {
                 absolute_clocks = vec![this.eval_libc_i32("CLOCK_REALTIME")];
                 relative_clocks = vec![this.eval_libc_i32("CLOCK_MONOTONIC")];
                 // `CLOCK_UPTIME_RAW` supposed to not increment while the system is asleep... but
--- a/src/tools/miri/src/shims/tls.rs	1707052685.000000000
+++ b/src/tools/miri/src/shims/tls.rs	1709210517.341738943
@@ -244,7 +244,7 @@ impl TlsDtorsState {
                         // Run the pthread dtors.
                         self.0 = PthreadDtors(Default::default());
                     }
-                    "macos" => {
+                    "macos" | "ios" => {
                         // The macOS thread wide destructor runs "before any TLS slots get
                         // freed", so do that first.
                         this.schedule_macos_tls_dtor()?;
--- a/src/tools/miri/src/shims/unix/foreign_items.rs	1707052685.000000000
+++ b/src/tools/miri/src/shims/unix/foreign_items.rs	1709210324.118108238
@@ -33,6 +33,7 @@ fn is_dyn_sym(name: &str, target_os: &st
             match target_os {
                 "freebsd" => freebsd::is_dyn_sym(name),
                 "linux" => linux::is_dyn_sym(name),
+                "ios" => macos::is_dyn_sym(name),
                 "macos" => macos::is_dyn_sym(name),
                 _ => false,
             },
@@ -569,7 +570,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mi
             "getentropy" => {
                 // This function is non-standard but exists with the same signature and behavior on
                 // Linux, macOS, and FreeBSD.
-                if !matches!(&*this.tcx.sess.target.os, "linux" | "macos" | "freebsd") {
+                if !matches!(&*this.tcx.sess.target.os, "linux" | "ios" | "macos" | "freebsd") {
                     throw_unsup_format!(
                         "`getentropy` is not supported on {}",
                         this.tcx.sess.target.os
@@ -706,6 +707,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mi
                 return match target_os {
                     "freebsd" => freebsd::EvalContextExt::emulate_foreign_item_inner(this, link_name, abi, args, dest),
                     "linux" => linux::EvalContextExt::emulate_foreign_item_inner(this, link_name, abi, args, dest),
+                    "ios" => macos::EvalContextExt::emulate_foreign_item_inner(this, link_name, abi, args, dest),
                     "macos" => macos::EvalContextExt::emulate_foreign_item_inner(this, link_name, abi, args, dest),
                     _ => Ok(EmulateForeignItemResult::NotSupported),
                 };
--- a/src/tools/miri/src/shims/unix/fs.rs	1707052685.000000000
+++ b/src/tools/miri/src/shims/unix/fs.rs	1709210451.826128283
@@ -664,7 +664,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mi
                 }
                 None => this.handle_not_found(),
             }
-        } else if this.tcx.sess.target.os == "macos" && cmd == this.eval_libc_i32("F_FULLFSYNC") {
+        } else if (this.tcx.sess.target.os == "macos" || this.tcx.sess.target.os == "ios") && cmd == this.eval_libc_i32("F_FULLFSYNC") {
             // Reject if isolation is enabled.
             if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {
                 this.reject_in_isolation("`fcntl`", reject_with)?;
@@ -1186,7 +1186,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mi
         let this = self.eval_context_mut();
 
         #[cfg_attr(not(unix), allow(unused_variables))]
-        let mode = if this.tcx.sess.target.os == "macos" {
+        let mode = if (this.tcx.sess.target.os == "macos" || this.tcx.sess.target.os == "ios") {
             u32::from(this.read_scalar(mode_op)?.to_u16()?)
         } else {
             this.read_scalar(mode_op)?.to_u32()?
--- a/src/tools/miri/src/shims/unix/mem.rs	1707052685.000000000
+++ b/src/tools/miri/src/shims/unix/mem.rs	1709210484.975223361
@@ -38,7 +38,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mi
 
         // This is a horrible hack, but on MacOS the guard page mechanism uses mmap
         // in a way we do not support. We just give it the return value it expects.
-        if this.frame_in_std() && this.tcx.sess.target.os == "macos" && (flags & map_fixed) != 0 {
+        if this.frame_in_std() && (this.tcx.sess.target.os == "macos" || this.tcx.sess.target.os == "ios") && (flags & map_fixed) != 0 {
             return Ok(Scalar::from_maybe_pointer(Pointer::from_addr_invalid(addr), this));
         }
 
--- a/src/tools/miri/src/shims/unix/sync.rs	1707052685.000000000
+++ b/src/tools/miri/src/shims/unix/sync.rs	1709210384.195442240
@@ -277,7 +277,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mi
     ) -> InterpResult<'tcx, i32> {
         let this = self.eval_context_mut();
 
-        if !matches!(&*this.tcx.sess.target.os, "linux" | "macos") {
+        if !matches!(&*this.tcx.sess.target.os, "linux" | "macos" | "ios") {
             throw_unsup_format!(
                 "`pthread_mutexattr_init` is not supported on {}",
                 this.tcx.sess.target.os
@@ -366,7 +366,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mi
     ) -> InterpResult<'tcx, i32> {
         let this = self.eval_context_mut();
 
-        if !matches!(&*this.tcx.sess.target.os, "linux" | "macos") {
+        if !matches!(&*this.tcx.sess.target.os, "linux" | "macos" | "ios") {
             throw_unsup_format!(
                 "`pthread_mutex_init` is not supported on {}",
                 this.tcx.sess.target.os
@@ -527,7 +527,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mi
     ) -> InterpResult<'tcx, i32> {
         let this = self.eval_context_mut();
 
-        if !matches!(&*this.tcx.sess.target.os, "linux" | "macos") {
+        if !matches!(&*this.tcx.sess.target.os, "linux" | "macos" | "ios") {
             throw_unsup_format!(
                 "`pthread_rwlock_rdlock` is not supported on {}",
                 this.tcx.sess.target.os
@@ -552,7 +552,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mi
     ) -> InterpResult<'tcx, i32> {
         let this = self.eval_context_mut();
 
-        if !matches!(&*this.tcx.sess.target.os, "linux" | "macos") {
+        if !matches!(&*this.tcx.sess.target.os, "linux" | "macos" | "ios") {
             throw_unsup_format!(
                 "`pthread_rwlock_tryrdlock` is not supported on {}",
                 this.tcx.sess.target.os
@@ -576,7 +576,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mi
     ) -> InterpResult<'tcx, i32> {
         let this = self.eval_context_mut();
 
-        if !matches!(&*this.tcx.sess.target.os, "linux" | "macos") {
+        if !matches!(&*this.tcx.sess.target.os, "linux" | "macos" | "ios") {
             throw_unsup_format!(
                 "`pthread_rwlock_wrlock` is not supported on {}",
                 this.tcx.sess.target.os
@@ -613,7 +613,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mi
     ) -> InterpResult<'tcx, i32> {
         let this = self.eval_context_mut();
 
-        if !matches!(&*this.tcx.sess.target.os, "linux" | "macos") {
+        if !matches!(&*this.tcx.sess.target.os, "linux" | "macos" | "ios") {
             throw_unsup_format!(
                 "`pthread_rwlock_trywrlock` is not supported on {}",
                 this.tcx.sess.target.os
@@ -637,7 +637,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mi
     ) -> InterpResult<'tcx, i32> {
         let this = self.eval_context_mut();
 
-        if !matches!(&*this.tcx.sess.target.os, "linux" | "macos") {
+        if !matches!(&*this.tcx.sess.target.os, "linux" | "macos" | "ios") {
             throw_unsup_format!(
                 "`pthread_rwlock_unlock` is not supported on {}",
                 this.tcx.sess.target.os
@@ -663,7 +663,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mi
     ) -> InterpResult<'tcx, i32> {
         let this = self.eval_context_mut();
 
-        if !matches!(&*this.tcx.sess.target.os, "linux" | "macos") {
+        if !matches!(&*this.tcx.sess.target.os, "linux" | "macos" | "ios") {
             throw_unsup_format!(
                 "`pthread_rwlock_destroy` is not supported on {}",
                 this.tcx.sess.target.os
@@ -694,7 +694,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mi
     ) -> InterpResult<'tcx, i32> {
         let this = self.eval_context_mut();
 
-        if !matches!(&*this.tcx.sess.target.os, "linux" | "macos") {
+        if !matches!(&*this.tcx.sess.target.os, "linux" | "macos" | "ios") {
             throw_unsup_format!(
                 "`pthread_condattr_init` is not supported on {}",
                 this.tcx.sess.target.os
@@ -767,7 +767,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mi
     ) -> InterpResult<'tcx, i32> {
         let this = self.eval_context_mut();
 
-        if !matches!(&*this.tcx.sess.target.os, "linux" | "macos") {
+        if !matches!(&*this.tcx.sess.target.os, "linux" | "macos" | "ios") {
             throw_unsup_format!(
                 "`pthread_cond_init` is not supported on {}",
                 this.tcx.sess.target.os
--- a/src/tools/rust-analyzer/Cargo.toml	1707052685.000000000
+++ b/src/tools/rust-analyzer/Cargo.toml	1709302062.426110244
@@ -1,5 +1,14 @@
 [workspace]
-members = ["xtask/", "lib/*", "crates/*"]
+members = [
+  "xtask/",
+  "lib/*",
+  "crates/proc-macro-srv",
+  "crates/proc-macro-srv-cli",
+  "crates/tt",
+  "crates/mbe",
+  "crates/paths",
+  "crates/proc-macro-api",
+]
 exclude = ["crates/proc-macro-test/imp"]
 resolver = "2"
 
--- a/src/tools/rust-analyzer/crates/proc-macro-srv/src/dylib.rs	1707052685.000000000
+++ b/src/tools/rust-analyzer/crates/proc-macro-srv/src/dylib.rs	1709210196.138928137
@@ -40,7 +40,7 @@ fn find_registrar_symbol(file: &Path) ->
             // https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man3/dlsym.3.html
             // Unlike other dyld API's, the symbol name passed to dlsym() must NOT be
             // prepended with an underscore.
-            if cfg!(target_os = "macos") && sym.starts_with('_') {
+            if cfg!(any(target_os = "macos", target_os = "ios")) && sym.starts_with('_') {
                 sym[1..].to_owned()
             } else {
                 sym
--- a/src/tools/rust-installer/install-template.sh	1707052685.000000000
+++ b/src/tools/rust-installer/install-template.sh	1709303160.304807793
@@ -617,7 +617,10 @@ install_components() {
 
             maybe_backup_path "$_file_install_path"
 
-            if echo "$_file" | grep "^bin/" > /dev/null || test -x "$_src_dir/$_component/$_file"
+            if [ -h "$_src_dir/$_component/$_file" ]
+            then
+                 run cp -d "$_src_dir/$_component/$_file" "$_file_install_path"
+            elif echo "$_file" | grep "^bin/" > /dev/null || test -x "$_src_dir/$_component/$_file"
             then
             run cp "$_src_dir/$_component/$_file" "$_file_install_path"
             run chmod 755 "$_file_install_path"
@@ -639,7 +642,7 @@ install_components() {
 
             maybe_backup_path "$_file_install_path"
 
-            run cp -R "$_src_dir/$_component/$_file" "$_file_install_path"
+            run cp -dR "$_src_dir/$_component/$_file" "$_file_install_path"
             critical_need_ok "failed to copy directory"
 
                     # Set permissions. 0755 for dirs, 644 for files
--- a/src/tools/rustfmt/Cargo.toml	1707052685.000000000
+++ b/src/tools/rustfmt/Cargo.toml	1709302971.143919921
@@ -44,10 +44,11 @@ dirs = "4.0"
 getopts = "0.2"
 ignore = "0.4"
 itertools = "0.11"
+libc = { version = "0.2.150", features = ["extra_traits"] }
 lazy_static = "1.4"
 regex = "1.7"
 serde = { version = "1.0.160", features = ["derive"] }
-serde_json = "1.0"
+serde_json = { version = "1.0", features = ["unbounded_depth"] }
 term = "0.7"
 thiserror = "1.0.40"
 toml = "0.7.4"
--- a/tests/assembly/asm/loongarch-type.rs	1707052685.000000000
+++ b/tests/assembly/asm/loongarch-type.rs	1709023605.000000000
@@ -1,3 +1,4 @@
+// min-llvm-version: 16.0
 // assembly-output: emit-asm
 // compile-flags: --target loongarch64-unknown-linux-gnu
 // needs-llvm-components: loongarch
@@ -41,7 +42,7 @@ extern "C" {
 
 // Hack to avoid function merging
 extern "Rust" {
-    fn dont_merge(s: &str);
+   fn dont_merge(s: &str);
 }
 
 // CHECK-LABEL: sym_fn:
--- a/tests/codegen/issues/issue-101048.rs	1707052685.000000000
+++ b/tests/codegen/issues/issue-101048.rs	1709023614.000000000
@@ -1,4 +1,5 @@
 // compile-flags: -O
+// min-llvm-version: 16
 
 #![crate_type = "lib"]
 
--- a/tests/codegen/issues/issue-101082.rs	1707052685.000000000
+++ b/tests/codegen/issues/issue-101082.rs	1709023614.000000000
@@ -1,4 +1,5 @@
 // compile-flags: -O
+// min-llvm-version: 16
 // ignore-debug: the debug assertions get in the way
 
 #![crate_type = "lib"]
--- a/tests/codegen/issues/issue-101814.rs	1707052685.000000000
+++ b/tests/codegen/issues/issue-101814.rs	1709023614.000000000
@@ -1,4 +1,5 @@
 // compile-flags: -O
+// min-llvm-version: 16
 // ignore-debug: the debug assertions get in the way
 
 #![crate_type = "lib"]
--- a/tests/codegen/issues/issue-103132.rs	1707052685.000000000
+++ b/tests/codegen/issues/issue-103132.rs	1709023614.000000000
@@ -1,4 +1,5 @@
 // compile-flags: -O -C overflow-checks
+// min-llvm-version: 16
 
 #![crate_type = "lib"]
 
--- a/tests/codegen/issues/issue-103327.rs	1707052685.000000000
+++ b/tests/codegen/issues/issue-103327.rs	1709023614.000000000
@@ -1,4 +1,5 @@
 // compile-flags: -O
+// min-llvm-version: 16
 
 #![crate_type = "lib"]
 
--- a/tests/codegen/issues/issue-103840.rs	1707052685.000000000
+++ b/tests/codegen/issues/issue-103840.rs	1709023614.000000000
@@ -1,4 +1,5 @@
 // compile-flags: -O
+// min-llvm-version: 16.0
 #![crate_type = "lib"]
 
 pub fn foo(t: &mut Vec<usize>) {
--- a/tests/codegen/issues/issue-75978.rs	1707052685.000000000
+++ b/tests/codegen/issues/issue-75978.rs	1709023614.000000000
@@ -1,4 +1,5 @@
 // compile-flags: -O
+// min-llvm-version: 16
 
 #![crate_type = "lib"]
 
--- a/tests/codegen/issues/issue-99960.rs	1707052685.000000000
+++ b/tests/codegen/issues/issue-99960.rs	1709023614.000000000
@@ -1,4 +1,5 @@
 // compile-flags: -O
+// min-llvm-version: 16
 
 #![crate_type = "lib"]
 
--- a/tests/codegen/sanitizer/kasan-emits-instrumentation.rs	1707052685.000000000
+++ b/tests/codegen/sanitizer/kasan-emits-instrumentation.rs	1709023614.000000000
@@ -6,8 +6,10 @@
 //[aarch64] needs-llvm-components: aarch64
 //[riscv64imac] compile-flags: --target riscv64imac-unknown-none-elf
 //[riscv64imac] needs-llvm-components: riscv
+//[riscv64imac] min-llvm-version: 16
 //[riscv64gc] compile-flags: --target riscv64gc-unknown-none-elf
 //[riscv64gc] needs-llvm-components: riscv
+//[riscv64gc] min-llvm-version: 16
 //[x86_64] compile-flags: --target x86_64-unknown-none
 //[x86_64] needs-llvm-components: x86
 
--- a/tests/codegen/slice-iter-fold.rs	1707052685.000000000
+++ b/tests/codegen/slice-iter-fold.rs	1709023614.000000000
@@ -1,5 +1,6 @@
 // ignore-debug: the debug assertions get in the way
 // compile-flags: -O
+// min-llvm-version: 16
 #![crate_type = "lib"]
 
 // CHECK-LABEL: @slice_fold_to_last
--- a/tests/codegen/stack-probes-inline.rs	1707052685.000000000
+++ b/tests/codegen/stack-probes-inline.rs	1709023614.000000000
@@ -15,8 +15,10 @@
 //[s390x] needs-llvm-components: systemz
 //[i686] compile-flags: --target i686-unknown-linux-gnu
 //[i686] needs-llvm-components: x86
+//[i686] min-llvm-version: 16
 //[x86_64] compile-flags: --target x86_64-unknown-linux-gnu
 //[x86_64] needs-llvm-components: x86
+//[x86_64] min-llvm-version: 16
 
 #![crate_type = "rlib"]
 #![feature(no_core, lang_items)]
--- a/tests/codegen/vec-in-place.rs	1707052685.000000000
+++ b/tests/codegen/vec-in-place.rs	1709023614.000000000
@@ -1,5 +1,6 @@
 // ignore-debug: the debug assertions get in the way
 // compile-flags: -O -Z merge-functions=disabled
+// min-llvm-version: 16
 #![crate_type = "lib"]
 
 // Ensure that trivial casts of vec elements are O(1)
--- a/tests/run-make/compressed-debuginfo/Makefile	1707052685.000000000
+++ b/tests/run-make/compressed-debuginfo/Makefile	1709023614.000000000
@@ -2,6 +2,7 @@
 include ../tools.mk
 
 # only-linux
+# min-llvm-version: 16.0
 #
 # This tests debuginfo-compression.
 
--- a/tests/ui/abi/homogenous-floats-target-feature-mixup.rs	1707052685.000000000
+++ b/tests/ui/abi/homogenous-floats-target-feature-mixup.rs	1709303944.083660614
@@ -24,7 +24,8 @@ fn main() {
     match std::env::var("TARGET") {
         Ok(s) => {
             // Skip this tests on i586-unknown-linux-gnu where sse2 is disabled
-            if s.contains("i586") {
+            // Debian: our i686 doesn't have SSE 2..
+            if s.contains("i586") || s.contains("i686") {
                 return
             }
         }
--- a/tests/ui/const_prop/apfloat-f64-roundtrip.rs	1707052685.000000000
+++ b/tests/ui/const_prop/apfloat-f64-roundtrip.rs	1709023614.000000000
@@ -1,5 +1,6 @@
 // run-pass
 // compile-flags: -O -Zmir-opt-level=3 -Cno-prepopulate-passes
+// min-llvm-version: 16.0 (requires APFloat fixes in LLVM)
 
 // Regression test for a broken MIR optimization (issue #113407).
 pub fn main() {
--- a/tests/ui/consts/const-eval/ub-enum.rs	1707052685.000000000
+++ b/tests/ui/consts/const-eval/ub-enum.rs	1709301431.652320600
@@ -1,3 +1,4 @@
+// ignore-test
 // stderr-per-bitwidth
 // Strip out raw byte dumps to make comparison platform-independent:
 // normalize-stderr-test "(the raw bytes of the constant) \(size: [0-9]*, align: [0-9]*\)" -> "$1 (size: $$SIZE, align: $$ALIGN)"
--- a/tests/ui/consts/const-eval/ub-nonnull.rs	1707052685.000000000
+++ b/tests/ui/consts/const-eval/ub-nonnull.rs	1709301431.655629726
@@ -1,3 +1,4 @@
+// ignore-test
 // Strip out raw byte dumps to make comparison platform-independent:
 // normalize-stderr-test "(the raw bytes of the constant) \(size: [0-9]*, align: [0-9]*\)" -> "$1 (size: $$SIZE, align: $$ALIGN)"
 // normalize-stderr-test "([0-9a-f][0-9a-f] |╾─*ALLOC[0-9]+(\+[a-z0-9]+)?─*╼ )+ *│.*" -> "HEX_DUMP"
--- a/tests/ui/consts/const-eval/ub-ref-ptr.rs	1707052685.000000000
+++ b/tests/ui/consts/const-eval/ub-ref-ptr.rs	1709301431.656471508
@@ -1,3 +1,4 @@
+// ignore-test
 // ignore-tidy-linelength
 // Strip out raw byte dumps to make comparison platform-independent:
 // normalize-stderr-test "(the raw bytes of the constant) \(size: [0-9]*, align: [0-9]*\)" -> "$1 (size: $$SIZE, align: $$ALIGN)"
--- a/tests/ui/consts/const-eval/ub-uninhabit.rs	1707052685.000000000
+++ b/tests/ui/consts/const-eval/ub-uninhabit.rs	1709301431.657135374
@@ -1,3 +1,4 @@
+// ignore-test
 // Strip out raw byte dumps to make comparison platform-independent:
 // normalize-stderr-test "(the raw bytes of the constant) \(size: [0-9]*, align: [0-9]*\)" -> "$1 (size: $$SIZE, align: $$ALIGN)"
 // normalize-stderr-test "([0-9a-f][0-9a-f] |╾─*a(lloc)?[0-9]+(\+[a-z0-9]+)?─*╼ )+ *│.*" -> "HEX_DUMP"
--- a/tests/ui/consts/const-eval/ub-wide-ptr.rs	1707052685.000000000
+++ b/tests/ui/consts/const-eval/ub-wide-ptr.rs	1709301431.657676409
@@ -1,3 +1,4 @@
+// ignore-test
 // ignore-tidy-linelength
 #![allow(unused)]
 
--- a/tests/ui/issues/issue-44056.rs	1707052685.000000000
+++ b/tests/ui/issues/issue-44056.rs	1709303717.176167621
@@ -1,5 +1,5 @@
 // build-pass (FIXME(55996): should be run on targets supporting avx)
-// only-x86_64
+// ignore-test
 // no-prefer-dynamic
 // compile-flags: -Ctarget-feature=+avx -Clto
 
--- a/tests/ui/numbers-arithmetic/issue-105626.rs	1707052685.000000000
+++ b/tests/ui/numbers-arithmetic/issue-105626.rs	1709023614.000000000
@@ -1,5 +1,6 @@
 // run-pass
 // only-x86
+// min-system-llvm-version: 16
 // compile-flags: -Ctarget-feature=+sse2
 
 use std::hint::black_box;
--- a/tests/ui/sanitize/cfg-kasan.rs	1707052685.000000000
+++ b/tests/ui/sanitize/cfg-kasan.rs	1709023614.000000000
@@ -8,8 +8,10 @@
 //[aarch64] needs-llvm-components: aarch64
 //[riscv64imac] compile-flags: --target riscv64imac-unknown-none-elf
 //[riscv64imac] needs-llvm-components: riscv
+//[riscv64imac] min-llvm-version: 16
 //[riscv64gc] compile-flags: --target riscv64gc-unknown-none-elf
 //[riscv64gc] needs-llvm-components: riscv
+//[riscv64gc] min-llvm-version: 16
 //[x86_64] compile-flags: --target x86_64-unknown-none
 //[x86_64] needs-llvm-components: x86
 
--- a/tests/ui/sse2.rs	1707052685.000000000
+++ b/tests/ui/sse2.rs	1709303944.080835809
@@ -15,7 +15,7 @@ fn main() {
         }
         Err(_) => return,
     }
-    if cfg!(any(target_arch = "x86", target_arch = "x86_64")) {
+    if cfg!(any(target_arch = "x86_64")) {
         assert!(cfg!(target_feature = "sse2"),
                 "SSE2 was not detected as available on an x86 platform");
     }
--- a/vendor/cc/src/lib.rs	1707058324.000000000
+++ b/vendor/cc/src/lib.rs	1709302821.961976115
@@ -2591,7 +2591,7 @@ impl Build {
                     || target == "wasm32-unknown-wasi"
                     || target == "wasm32-unknown-unknown"
                 {
-                    "clang".to_string()
+                    "rust-clang".to_string()
                 } else if target.contains("vxworks") {
                     if self.cpp {
                         "wr-c++".to_string()
--- a/vendor/console/src/unix_term.rs	1707058324.000000000
+++ b/vendor/console/src/unix_term.rs	1709209664.303256591
@@ -118,7 +118,7 @@ fn poll_fd(fd: i32, timeout: i32) -> io:
     }
 }
 
-#[cfg(target_os = "macos")]
+#[cfg(any(target_os = "macos", target_os = "ios"))]
 fn select_fd(fd: i32, timeout: i32) -> io::Result<bool> {
     unsafe {
         let mut read_fd_set: libc::fd_set = mem::zeroed();
@@ -155,7 +155,7 @@ fn select_or_poll_term_fd(fd: i32, timeo
     // There is a bug on macos that ttys cannot be polled, only select()
     // works.  However given how problematic select is in general, we
     // normally want to use poll there too.
-    #[cfg(target_os = "macos")]
+    #[cfg(any(target_os = "macos", target_os = "ios"))]
     {
         if unsafe { libc::isatty(fd) == 1 } {
             return select_fd(fd, timeout);
@@ -172,6 +172,7 @@ fn read_single_char(fd: i32) -> io::Resu
         // if there is something to be read, take 1 byte from it
         let mut buf: [u8; 1] = [0];
 
+
         read_bytes(fd, &mut buf, 1)?;
         Ok(Some(buf[0] as char))
     } else {
@@ -339,7 +340,7 @@ pub fn key_from_utf8(buf: &[u8]) -> Key
     Key::Unknown
 }
 
-#[cfg(not(target_os = "macos"))]
+#[cfg(not(any(target_os = "macos", target_os = "ios")))]
 lazy_static::lazy_static! {
     static ref IS_LANG_UTF8: bool = match std::env::var("LANG") {
         Ok(lang) => lang.to_uppercase().ends_with("UTF-8"),
@@ -347,12 +348,12 @@ lazy_static::lazy_static! {
     };
 }
 
-#[cfg(target_os = "macos")]
+#[cfg(any(target_os = "macos", target_os = "ios"))]
 pub fn wants_emoji() -> bool {
     true
 }
 
-#[cfg(not(target_os = "macos"))]
+#[cfg(not(any(target_os = "macos", target_os = "ios")))]
 pub fn wants_emoji() -> bool {
     *IS_LANG_UTF8
 }
--- a/vendor/core-foundation-sys/src/bundle.rs	1707058324.000000000
+++ b/vendor/core-foundation-sys/src/bundle.rs	1709204289.985808986
@@ -10,7 +10,6 @@
 use std::os::raw::c_void;
 
 use crate::array::CFArrayRef;
-#[cfg(target_os = "macos")]
 use crate::base::SInt32;
 use crate::base::{Boolean, CFAllocatorRef, CFTypeID, CFTypeRef, UInt32};
 use crate::dictionary::CFDictionaryRef;
@@ -117,7 +116,6 @@ extern "C" {
     pub fn CFBundleCopySupportFilesDirectoryURL(bundle: CFBundleRef) -> CFURLRef;
 
     /* Locating Bundle Resources */
-    #[cfg(target_os = "macos")]
     pub fn CFBundleCloseBundleResourceMap(bundle: CFBundleRef, refNum: CFBundleRefNum); // DEPRECATED macosx(10.0, 10.15)
     pub fn CFBundleCopyResourceURL(
         bundle: CFBundleRef,
@@ -154,13 +152,11 @@ extern "C" {
         subDirName: CFStringRef,
         localizationName: CFStringRef,
     ) -> CFArrayRef;
-    #[cfg(target_os = "macos")]
     pub fn CFBundleOpenBundleResourceFiles(
         bundle: CFBundleRef,
         refNum: *mut CFBundleRefNum,
         localizedRefNum: *mut CFBundleRefNum,
     ) -> SInt32; // DEPRECATED macosx(10.0, 10.15)
-    #[cfg(target_os = "macos")]
     pub fn CFBundleOpenBundleResourceMap(bundle: CFBundleRef) -> CFBundleRefNum; // DEPRECATED macosx(10.0, 10.15)
 
     /* Managing Localizations */
--- a/vendor/core-foundation-sys/src/lib.rs	1707058324.000000000
+++ b/vendor/core-foundation-sys/src/lib.rs	1709204132.959275768
@@ -65,7 +65,7 @@ pub mod timezone;
 pub mod tree;
 pub mod url;
 pub mod url_enumerator;
-#[cfg(target_os = "macos")]
+#[cfg(any(target_os = "macos", target_os = "ios"))]
 pub mod user_notification;
 pub mod uuid;
 #[cfg(target_os = "macos")]
--- a/vendor/core-foundation-sys/src/notification_center.rs	1707058324.000000000
+++ b/vendor/core-foundation-sys/src/notification_center.rs	1709203977.676098709
@@ -44,7 +44,7 @@ extern "C" {
 
     /* Accessing a Notification Center */
     pub fn CFNotificationCenterGetDarwinNotifyCenter() -> CFNotificationCenterRef;
-    #[cfg(any(target_os = "macos", target_os = "windows"))]
+    #[cfg(any(target_os = "macos", target_os = "ios", target_os = "windows"))]
     pub fn CFNotificationCenterGetDistributedCenter() -> CFNotificationCenterRef;
     pub fn CFNotificationCenterGetLocalCenter() -> CFNotificationCenterRef;
 
--- a/vendor/core-foundation-sys/src/url.rs	1707058324.000000000
+++ b/vendor/core-foundation-sys/src/url.rs	1709204398.737704050
@@ -40,11 +40,9 @@ pub static kCFURLBookmarkCreationMinimal
 pub static kCFURLBookmarkCreationSuitableForBookmarkFile: CFURLBookmarkCreationOptions =
     (1u32 << 10) as usize;
 
-#[cfg(target_os = "macos")]
 pub static kCFURLBookmarkCreationWithSecurityScope: CFURLBookmarkCreationOptions =
     (1u32 << 11) as usize;
 
-#[cfg(target_os = "macos")]
 pub static kCFURLBookmarkCreationSecurityScopeAllowOnlyReadAccess: CFURLBookmarkCreationOptions =
     (1u32 << 12) as usize;
 
@@ -74,7 +72,6 @@ pub const kCFURLBookmarkResolutionWithou
     (1u32 << 8) as usize;
 pub const kCFURLBookmarkResolutionWithoutMountingMask: CFURLBookmarkResolutionOptions =
     (1u32 << 9) as usize;
-#[cfg(target_os = "macos")]
 pub const kCFURLBookmarkResolutionWithSecurityScope: CFURLBookmarkResolutionOptions =
     (1u32 << 10) as usize;
 //pub const kCFURLBookmarkResolutionWithoutImplicitStartAccessing: CFURLBookmarkResolutionOptions = ( 1u32 << 15 ) as usize; // macos(11.2)+
@@ -453,7 +450,6 @@ extern "C" {
         error: *mut CFErrorRef,
     ) -> CFDataRef;
 
-    #[cfg(target_os = "macos")]
     pub fn CFURLCreateBookmarkDataFromAliasRecord(
         allocator: CFAllocatorRef,
         aliasRecordDataRef: CFDataRef,
--- a/vendor/cpufeatures-0.2.5/Cargo.toml	1707058324.000000000
+++ b/vendor/cpufeatures-0.2.5/Cargo.toml	1709283370.142609765
@@ -28,7 +28,7 @@ categories = ["no-std"]
 license = "MIT OR Apache-2.0"
 repository = "https://github.com/RustCrypto/utils"
 
-[target.aarch64-apple-darwin.dependencies.libc]
+[target."cfg(all(target_arch = \"aarch64\", any(target_os = \"ios\", target_os = \"macos\")))".dependencies.libc]
 version = "0.2.95"
 
 [target.aarch64-linux-android.dependencies.libc]
--- a/vendor/cpufeatures-0.2.5/src/aarch64.rs	1707058324.000000000
+++ b/vendor/cpufeatures-0.2.5/src/aarch64.rs	1709283271.829181641
@@ -38,7 +38,7 @@ pub fn getauxval_hwcap() -> u64 {
 }
 
 // MacOS runtime detection of target CPU features using `sysctlbyname`.
-#[cfg(target_os = "macos")]
+#[cfg(any(target_os = "macos", target_os = "ios"))]
 #[macro_export]
 #[doc(hidden)]
 macro_rules! __detect_target_features {
@@ -98,7 +98,7 @@ pub mod hwcaps {
 //
 // See discussion on this issue for more information:
 // <https://github.com/RustCrypto/utils/issues/378>
-#[cfg(target_os = "macos")]
+#[cfg(any(target_os = "macos", target_os = "ios"))]
 #[macro_export]
 #[doc(hidden)]
 macro_rules! check {
@@ -118,7 +118,7 @@ macro_rules! check {
 }
 
 /// macOS helper function for calling `sysctlbyname`.
-#[cfg(target_os = "macos")]
+#[cfg(any(target_os = "macos", target_os = "ios"))]
 pub unsafe fn sysctlbyname(name: &[u8]) -> bool {
     assert_eq!(
         name.last().cloned(),
@@ -143,35 +143,12 @@ pub unsafe fn sysctlbyname(name: &[u8])
     value != 0
 }
 
-// iOS `check!` macro.
-//
-// Unfortunately iOS does not provide access to the `sysctl(3)` API which means
-// we can only return static values for CPU features which  can be assumed to
-// be present on all Apple ARM64 hardware.
-//
-// See discussion on this issue for more information:
-// <https://github.com/RustCrypto/utils/issues/378>
-#[cfg(target_os = "ios")]
-#[macro_export]
-#[doc(hidden)]
-macro_rules! check {
-    ("aes") => {
-        true
-    };
-    ("sha2") => {
-        true
-    };
-    ("sha3") => {
-        false
-    };
-}
-
 // On other targets, runtime CPU feature detection is unavailable
 #[cfg(not(any(
-    target_os = "ios",
     target_os = "linux",
     target_os = "android",
-    target_os = "macos"
+    target_os = "macos",
+    target_os = "ios"
 )))]
 #[macro_export]
 #[doc(hidden)]
--- a/vendor/cranelift-native/src/lib.rs	1707058324.000000000
+++ b/vendor/cranelift-native/src/lib.rs	1709122049.390515692
@@ -115,7 +115,7 @@ pub fn infer_native_flags(isa_builder: &
             isa_builder.enable("has_pauth").unwrap();
         }
 
-        if cfg!(target_os = "macos") {
+        if cfg!(target_os = "macos") || cfg!(target_os = "ios") {
             // Pointer authentication is always available on Apple Silicon.
             isa_builder.enable("sign_return_address").unwrap();
             // macOS enforces the use of the B key for return addresses.
@@ -167,7 +167,7 @@ mod tests {
                 .finish(settings::Flags::new(flag_builder))
                 .unwrap();
 
-            if cfg!(all(target_os = "macos", target_arch = "aarch64")) {
+            if cfg!(all(any(target_os = "macos", target_os = "ios"), target_arch = "aarch64")) {
                 assert_eq!(isa.default_call_conv(), CallConv::AppleAarch64);
             } else if cfg!(any(unix, target_os = "nebulet")) {
                 assert_eq!(isa.default_call_conv(), CallConv::SystemV);
--- a/vendor/curl/Cargo.toml	1707058324.000000000
+++ b/vendor/curl/Cargo.toml	1709121529.908595190
@@ -99,11 +99,11 @@ zlib-ng-compat = [
     "static-curl",
 ]
 
-[target."cfg(all(unix, not(target_os = \"macos\")))".dependencies.openssl-probe]
+[target."cfg(all(unix, not(any(target_os = \"macos\", target_os = \"ios\"))))".dependencies.openssl-probe]
 version = "0.1.2"
 optional = true
 
-[target."cfg(all(unix, not(target_os = \"macos\")))".dependencies.openssl-sys]
+[target."cfg(all(unix, not(any(target_os = \"macos\", target_os = \"ios\"))))".dependencies.openssl-sys]
 version = "0.9.43"
 optional = true
 
--- a/vendor/curl/src/lib.rs	1707058324.000000000
+++ b/vendor/curl/src/lib.rs	1709205650.131100377
@@ -135,7 +135,7 @@ pub fn init() {
     any(target_os = "linux", target_os = "freebsd", target_os = "android"),
     link_section = ".init_array"
 )]
-#[cfg_attr(target_os = "macos", link_section = "__DATA,__mod_init_func")]
+#[cfg_attr(any(target_os = "macos", target_os = "ios"), link_section = "__DATA,__mod_init_func")]
 #[cfg_attr(target_os = "windows", link_section = ".CRT$XCU")]
 pub static INIT_CTOR: extern "C" fn() = {
     /// This is the body of our constructor function.
--- a/vendor/curl-sys/Cargo.toml	1707058324.000000000
+++ b/vendor/curl-sys/Cargo.toml	1709121344.889794975
@@ -69,7 +69,7 @@ zlib-ng-compat = [
     "static-curl",
 ]
 
-[target."cfg(all(unix, not(target_os = \"macos\")))".dependencies.openssl-sys]
+[target."cfg(all(unix, not(any(target_os = \"macos\", target_os = \"ios\"))))".dependencies.openssl-sys]
 version = "0.9.64"
 optional = true
 
--- a/vendor/curl-sys-0.4.63+curl-8.1.2/Cargo.toml	1707058324.000000000
+++ b/vendor/curl-sys-0.4.63+curl-8.1.2/Cargo.toml	1709121368.318365249
@@ -69,7 +69,7 @@ zlib-ng-compat = [
     "static-curl",
 ]
 
-[target."cfg(all(unix, not(target_os = \"macos\")))".dependencies.openssl-sys]
+[target."cfg(all(unix, not(any(target_os = \"macos\", target_os = \"ios\"))))".dependencies.openssl-sys]
 version = "0.9"
 optional = true
 
--- a/vendor/dlmalloc/src/lib.rs	1707058324.000000000
+++ b/vendor/dlmalloc/src/lib.rs	1709209486.651171512
@@ -77,7 +77,7 @@ pub struct Dlmalloc<A = System>(dlmalloc
 #[path = "wasm.rs"]
 mod sys;
 
-#[cfg(any(target_os = "linux", target_os = "macos"))]
+#[cfg(any(target_os = "linux", target_os = "macos", target_os = "ios"))]
 #[path = "unix.rs"]
 mod sys;
 
@@ -88,6 +88,7 @@ mod sys;
 #[cfg(not(any(
     target_os = "linux",
     target_os = "macos",
+    target_os = "ios",
     target_os = "xous",
     target_family = "wasm"
 )))]
--- a/vendor/dlmalloc/src/unix.rs	1707058324.000000000
+++ b/vendor/dlmalloc/src/unix.rs	1709209449.950928191
@@ -47,7 +47,7 @@ unsafe impl Allocator for System {
         }
     }
 
-    #[cfg(target_os = "macos")]
+    #[cfg(any(target_os = "macos", target_os = "ios"))]
     fn remap(&self, _ptr: *mut u8, _oldsize: usize, _newsize: usize, _can_move: bool) -> *mut u8 {
         ptr::null_mut()
     }
@@ -63,7 +63,7 @@ unsafe impl Allocator for System {
         }
     }
 
-    #[cfg(target_os = "macos")]
+    #[cfg(any(target_os = "macos", target_os = "ios"))]
     fn free_part(&self, ptr: *mut u8, oldsize: usize, newsize: usize) -> bool {
         unsafe { libc::munmap(ptr.offset(newsize as isize) as *mut _, oldsize - newsize) == 0 }
     }
--- a/vendor/filetime/src/unix/mod.rs	1707058324.000000000
+++ b/vendor/filetime/src/unix/mod.rs	1709206154.343287339
@@ -11,7 +11,7 @@ cfg_if::cfg_if! {
     } else if #[cfg(target_os = "android")] {
         mod android;
         pub use self::android::*;
-    } else if #[cfg(target_os = "macos")] {
+    } else if #[cfg(any(target_os = "macos", target_os = "ios"))] {
         mod utimes;
         mod macos;
         pub use self::macos::*;
@@ -35,6 +35,7 @@ cfg_if::cfg_if! {
 fn to_timespec(ft: &Option<FileTime>) -> timespec {
     cfg_if::cfg_if! {
         if #[cfg(any(target_os = "macos",
+                     target_os = "ios",
                      target_os = "illumos",
                      target_os = "freebsd"))] {
             // https://github.com/apple/darwin-xnu/blob/a449c6a3b8014d9406c2ddbdc81795da24aa7443/bsd/sys/stat.h#L541
--- a/vendor/filetime-0.2.16/src/unix/mod.rs	1707058324.000000000
+++ b/vendor/filetime-0.2.16/src/unix/mod.rs	1709209395.693067911
@@ -11,7 +11,7 @@ cfg_if::cfg_if! {
     } else if #[cfg(target_os = "android")] {
         mod android;
         pub use self::android::*;
-    } else if #[cfg(target_os = "macos")] {
+    } else if #[cfg(any(target_os = "macos", target_os = "ios"))] {
         mod utimes;
         mod macos;
         pub use self::macos::*;
@@ -34,6 +34,7 @@ cfg_if::cfg_if! {
 fn to_timespec(ft: &Option<FileTime>) -> timespec {
     cfg_if::cfg_if! {
         if #[cfg(any(target_os = "macos",
+                     target_os = "ios",
                      target_os = "illumos",
                      target_os = "freebsd"))] {
             // https://github.com/apple/darwin-xnu/blob/a449c6a3b8014d9406c2ddbdc81795da24aa7443/bsd/sys/stat.h#L541
--- a/vendor/filetime-0.2.21/src/unix/mod.rs	1707058324.000000000
+++ b/vendor/filetime-0.2.21/src/unix/mod.rs	1709209539.714389480
@@ -11,7 +11,7 @@ cfg_if::cfg_if! {
     } else if #[cfg(target_os = "android")] {
         mod android;
         pub use self::android::*;
-    } else if #[cfg(target_os = "macos")] {
+    } else if #[cfg(any(target_os = "macos", target_os = "ios"))] {
         mod utimes;
         mod macos;
         pub use self::macos::*;
@@ -35,6 +35,7 @@ cfg_if::cfg_if! {
 fn to_timespec(ft: &Option<FileTime>) -> timespec {
     cfg_if::cfg_if! {
         if #[cfg(any(target_os = "macos",
+                     target_os = "ios",
                      target_os = "illumos",
                      target_os = "freebsd"))] {
             // https://github.com/apple/darwin-xnu/blob/a449c6a3b8014d9406c2ddbdc81795da24aa7443/bsd/sys/stat.h#L541
--- a/vendor/filetime-0.2.22/src/unix/mod.rs	1707058324.000000000
+++ b/vendor/filetime-0.2.22/src/unix/mod.rs	1709205339.893748233
@@ -11,7 +11,7 @@ cfg_if::cfg_if! {
     } else if #[cfg(target_os = "android")] {
         mod android;
         pub use self::android::*;
-    } else if #[cfg(target_os = "macos")] {
+    } else if #[cfg(any(target_os = "macos", target_os = "ios"))] {
         mod utimes;
         mod macos;
         pub use self::macos::*;
@@ -35,6 +35,7 @@ cfg_if::cfg_if! {
 fn to_timespec(ft: &Option<FileTime>) -> timespec {
     cfg_if::cfg_if! {
         if #[cfg(any(target_os = "macos",
+                     target_os = "ios",
                      target_os = "illumos",
                      target_os = "freebsd"))] {
             // https://github.com/apple/darwin-xnu/blob/a449c6a3b8014d9406c2ddbdc81795da24aa7443/bsd/sys/stat.h#L541
--- a/vendor/fsevent-sys/src/lib.rs	1707058324.000000000
+++ b/vendor/fsevent-sys/src/lib.rs	1709204474.708592206
@@ -1,4 +1,4 @@
-#![cfg(target_os = "macos")]
+#![cfg(any(target_os = "macos", target_os = "ios"))]
 #![cfg_attr(feature = "cargo-clippy", allow(unreadable_literal))]
 
 pub mod core_foundation;
--- a/vendor/getrandom/src/lib.rs	1707058324.000000000
+++ b/vendor/getrandom/src/lib.rs	1709205118.233316939
@@ -238,9 +238,9 @@ cfg_if! {
         #[path = "dragonfly.rs"] mod imp;
     } else if #[cfg(target_os = "fuchsia")] {
         #[path = "fuchsia.rs"] mod imp;
-    } else if #[cfg(any(target_os = "ios", target_os = "watchos", target_os = "tvos"))] {
+    } else if #[cfg(any(target_os = "watchos", target_os = "tvos"))] {
         #[path = "apple-other.rs"] mod imp;
-    } else if #[cfg(target_os = "macos")] {
+    } else if #[cfg(any(target_os = "macos", target_os = "ios"))] {
         mod util_libc;
         mod use_file;
         #[path = "macos.rs"] mod imp;
--- a/vendor/getrandom/src/use_file.rs	1707058324.000000000
+++ b/vendor/getrandom/src/use_file.rs	1709205057.597953175
@@ -32,6 +32,7 @@ const FILE_PATH: &str = "/dev/random\0";
     target_os = "dragonfly",
     target_os = "haiku",
     target_os = "macos",
+    target_os = "ios",
     target_os = "nto",
 ))]
 const FILE_PATH: &str = "/dev/urandom\0";
--- a/vendor/getrandom/src/util_libc.rs	1707058324.000000000
+++ b/vendor/getrandom/src/util_libc.rs	1709205023.395363280
@@ -23,7 +23,7 @@ cfg_if! {
         use libc::__errno_location as errno_location;
     } else if #[cfg(any(target_os = "solaris", target_os = "illumos"))] {
         use libc::___errno as errno_location;
-    } else if #[cfg(any(target_os = "macos", target_os = "freebsd"))] {
+    } else if #[cfg(any(target_os = "macos", target_os = "ios", target_os = "freebsd"))] {
         use libc::__error as errno_location;
     } else if #[cfg(target_os = "haiku")] {
         use libc::_errnop as errno_location;
--- a/vendor/getrandom-0.2.10/src/lib.rs	1707058324.000000000
+++ b/vendor/getrandom-0.2.10/src/lib.rs	1709208326.294390006
@@ -236,9 +236,9 @@ cfg_if! {
         #[path = "dragonfly.rs"] mod imp;
     } else if #[cfg(target_os = "fuchsia")] {
         #[path = "fuchsia.rs"] mod imp;
-    } else if #[cfg(any(target_os = "ios", target_os = "watchos", target_os = "tvos"))] {
+    } else if #[cfg(any(target_os = "watchos", target_os = "tvos"))] {
         #[path = "apple-other.rs"] mod imp;
-    } else if #[cfg(target_os = "macos")] {
+    } else if #[cfg(any(target_os = "macos", target_os = "ios"))] {
         mod util_libc;
         mod use_file;
         #[path = "macos.rs"] mod imp;
--- a/vendor/getrandom-0.2.10/src/use_file.rs	1707058324.000000000
+++ b/vendor/getrandom-0.2.10/src/use_file.rs	1709208300.073518045
@@ -31,6 +31,7 @@ const FILE_PATH: &str = "/dev/random\0";
     target_os = "redox",
     target_os = "dragonfly",
     target_os = "haiku",
+    target_os = "ios",
     target_os = "macos",
     target_os = "nto",
 ))]
--- a/vendor/getrandom-0.2.10/src/util_libc.rs	1707058324.000000000
+++ b/vendor/getrandom-0.2.10/src/util_libc.rs	1709208281.122177441
@@ -23,7 +23,7 @@ cfg_if! {
         use libc::__errno_location as errno_location;
     } else if #[cfg(any(target_os = "solaris", target_os = "illumos"))] {
         use libc::___errno as errno_location;
-    } else if #[cfg(any(target_os = "macos", target_os = "freebsd"))] {
+    } else if #[cfg(any(target_os = "macos", target_os = "ios", target_os = "freebsd"))] {
         use libc::__error as errno_location;
     } else if #[cfg(target_os = "haiku")] {
         use libc::_errnop as errno_location;
--- a/vendor/git2/Cargo.toml	1707058324.000000000
+++ b/vendor/git2/Cargo.toml	1709121263.569874307
@@ -74,10 +74,10 @@ vendored-openssl = [
 ]
 zlib-ng-compat = ["libgit2-sys/zlib-ng-compat"]
 
-[target."cfg(all(unix, not(target_os = \"macos\")))".dependencies.openssl-probe]
+[target."cfg(all(unix, not(any(target_os = \"macos\", target_os = \"ios\"))))".dependencies.openssl-probe]
 version = "0.1"
 optional = true
 
-[target."cfg(all(unix, not(target_os = \"macos\")))".dependencies.openssl-sys]
+[target."cfg(all(unix, not(any(target_os = \"macos\", target_os = \"ios\"))))".dependencies.openssl-sys]
 version = "0.9.45"
 optional = true
--- a/vendor/gix-discover/Cargo.toml	1707058324.000000000
+++ b/vendor/gix-discover/Cargo.toml	1709121571.382014032
@@ -59,7 +59,7 @@ default-features = false
 [target."cfg(any(unix, windows))".dev-dependencies.tempfile]
 version = "3.2.0"
 
-[target."cfg(target_os = \"macos\")".dev-dependencies.defer]
+[target."cfg(any(target_os = \"macos\", target_os = \"ios\"))".dev-dependencies.defer]
 version = "0.1.0"
 
 [target."cfg(windows)".dependencies.dunce]
--- a/vendor/gix-fs/src/capabilities.rs	1707058324.000000000
+++ b/vendor/gix-fs/src/capabilities.rs	1709201885.758459552
@@ -27,7 +27,20 @@ impl Default for Capabilities {
     }
 }
 
-#[cfg(all(unix, not(target_os = "macos")))]
+#[cfg(target_os = "ios")]
+impl Default for Capabilities {
+    fn default() -> Self {
+        Capabilities {
+            precompose_unicode: true,
+            // iOS is case-sensitive
+            ignore_case: false,
+            executable_bit: true,
+            symlink: true,
+        }
+    }
+}
+
+#[cfg(all(unix, not(any(target_os = "macos", target_os = "ios"))))]
 impl Default for Capabilities {
     fn default() -> Self {
         Capabilities {
--- a/vendor/glob/src/lib.rs	1707058324.000000000
+++ b/vendor/glob/src/lib.rs	1709208972.120589365
@@ -1060,7 +1060,7 @@ mod test {
     // this test assumes that there is a /root directory and that
     // the user running this test is not root or otherwise doesn't
     // have permission to read its contents
-    #[cfg(all(unix, not(target_os = "macos")))]
+    #[cfg(all(unix, not(any(target_os = "macos", target_os = "ios"))))]
     #[test]
     fn test_iteration_errors() {
         use std::io;
--- a/vendor/hyper/Cargo.toml	1707058324.000000000
+++ b/vendor/hyper/Cargo.toml	1709121605.821121472
@@ -323,5 +323,5 @@ tcp = [
     "tokio/time",
 ]
 
-[target."cfg(any(target_os = \"linux\", target_os = \"macos\"))".dev-dependencies.pnet_datalink]
+[target."cfg(any(target_os = \"linux\", target_os = \"macos\", target_os = \"ios\"))".dev-dependencies.pnet_datalink]
 version = "0.27.2"
--- a/vendor/kqueue-sys/src/constants/mod.rs	1707058324.000000000
+++ b/vendor/kqueue-sys/src/constants/mod.rs	1709209435.901987301
@@ -1,6 +1,6 @@
-#[cfg(target_os = "macos")]
+#[cfg(any(target_os = "macos", target_os = "ios"))]
 mod darwin;
-#[cfg(target_os = "macos")]
+#[cfg(any(target_os = "macos", target_os = "ios"))]
 pub use self::darwin::*;
 
 #[cfg(target_os = "dragonfly")]
--- a/vendor/libc/src/unix/bsd/apple/mod.rs	1707058324.000000000
+++ b/vendor/libc/src/unix/bsd/apple/mod.rs	1709396296.085544449
@@ -6000,6 +6000,7 @@ extern "C" {
     #[deprecated(since = "0.2.55", note = "Use the `mach2` crate instead")]
     pub fn _dyld_get_image_name(image_index: u32) -> *const ::c_char;
 
+    #[cfg_attr(target_os = "ios", link_name = "ie_posix_spawn")]
     pub fn posix_spawn(
         pid: *mut ::pid_t,
         path: *const ::c_char,
@@ -6008,6 +6009,7 @@ extern "C" {
         argv: *const *mut ::c_char,
         envp: *const *mut ::c_char,
     ) -> ::c_int;
+    #[cfg_attr(target_os = "ios", link_name = "ie_posix_spawnp")]
     pub fn posix_spawnp(
         pid: *mut ::pid_t,
         file: *const ::c_char,
@@ -6097,6 +6099,10 @@ extern "C" {
         fd: ::c_int,
         newfd: ::c_int,
     ) -> ::c_int;
+    #[cfg_attr(
+        all(target_os = "ios"),
+        link_name = "ie_uname"
+    )]
     pub fn uname(buf: *mut ::utsname) -> ::c_int;
 
     pub fn connectx(
@@ -6420,7 +6426,7 @@ pub unsafe fn mach_task_self() -> ::mach
 }
 
 cfg_if! {
-    if #[cfg(target_os = "macos")] {
+    if #[cfg(any(target_os = "macos", target_os = "ios", target_os = "tvos"))] {
         extern "C" {
             pub fn clock_settime(clock_id: ::clockid_t, tp: *const ::timespec) -> ::c_int;
         }
--- a/vendor/libc/src/unix/mod.rs	1707058324.000000000
+++ b/vendor/libc/src/unix/mod.rs	1709396189.190173332
@@ -875,15 +875,21 @@ extern "C" {
     pub fn close(fd: ::c_int) -> ::c_int;
     pub fn dup(fd: ::c_int) -> ::c_int;
     pub fn dup2(src: ::c_int, dst: ::c_int) -> ::c_int;
+    #[cfg_attr(target_os = "ios", link_name = "ie_execl")]
     pub fn execl(path: *const c_char, arg0: *const c_char, ...) -> ::c_int;
+    #[cfg_attr(target_os = "ios", link_name = "ie_execle")]
     pub fn execle(path: *const ::c_char, arg0: *const ::c_char, ...) -> ::c_int;
+    #[cfg_attr(target_os = "ios", link_name = "ie_execlp")]
     pub fn execlp(file: *const ::c_char, arg0: *const ::c_char, ...) -> ::c_int;
+    #[cfg_attr(target_os = "ios", link_name = "ie_execv")]
     pub fn execv(prog: *const c_char, argv: *const *const c_char) -> ::c_int;
+    #[cfg_attr(target_os = "ios", link_name = "ie_execve")]
     pub fn execve(
         prog: *const c_char,
         argv: *const *const c_char,
         envp: *const *const c_char,
     ) -> ::c_int;
+    #[cfg_attr(target_os = "ios", link_name = "ie_execvp")]
     pub fn execvp(c: *const c_char, argv: *const *const c_char) -> ::c_int;
     pub fn fork() -> pid_t;
     pub fn fpathconf(filedes: ::c_int, name: ::c_int) -> c_long;
--- a/vendor/libc-0.2.148/src/unix/bsd/apple/mod.rs	1707058324.000000000
+++ b/vendor/libc-0.2.148/src/unix/bsd/apple/mod.rs	1709396634.416622525
@@ -5676,6 +5676,7 @@ extern "C" {
     #[deprecated(since = "0.2.55", note = "Use the `mach2` crate instead")]
     pub fn _dyld_get_image_name(image_index: u32) -> *const ::c_char;
 
+    #[cfg_attr(target_os = "ios", link_name = "ie_posix_spawn")]
     pub fn posix_spawn(
         pid: *mut ::pid_t,
         path: *const ::c_char,
@@ -5684,6 +5685,7 @@ extern "C" {
         argv: *const *mut ::c_char,
         envp: *const *mut ::c_char,
     ) -> ::c_int;
+    #[cfg_attr(target_os = "ios", link_name = "ie_posix_spawnp")]
     pub fn posix_spawnp(
         pid: *mut ::pid_t,
         file: *const ::c_char,
@@ -5761,6 +5763,10 @@ extern "C" {
         fd: ::c_int,
         newfd: ::c_int,
     ) -> ::c_int;
+    #[cfg_attr(
+        all(target_os = "ios"),
+        link_name = "ie_uname"
+    )]
     pub fn uname(buf: *mut ::utsname) -> ::c_int;
 
     pub fn connectx(
@@ -6075,7 +6081,7 @@ pub unsafe fn mach_task_self() -> ::mach
 }
 
 cfg_if! {
-    if #[cfg(target_os = "macos")] {
+    if #[cfg(any(target_os = "macos", target_os = "ios"))] {
         extern "C" {
             pub fn clock_settime(clock_id: ::clockid_t, tp: *const ::timespec) -> ::c_int;
         }
--- a/vendor/libc-0.2.148/src/unix/mod.rs	1707058324.000000000
+++ b/vendor/libc-0.2.148/src/unix/mod.rs	1709208055.797792128
@@ -880,15 +880,39 @@ extern "C" {
     pub fn close(fd: ::c_int) -> ::c_int;
     pub fn dup(fd: ::c_int) -> ::c_int;
     pub fn dup2(src: ::c_int, dst: ::c_int) -> ::c_int;
+    #[cfg_attr(
+        all(target_os = "ios"),
+        link_name = "ie_execl"
+    )]
     pub fn execl(path: *const c_char, arg0: *const c_char, ...) -> ::c_int;
+    #[cfg_attr(
+        all(target_os = "ios"),
+        link_name = "ie_execle"
+    )]
     pub fn execle(path: *const ::c_char, arg0: *const ::c_char, ...) -> ::c_int;
+    #[cfg_attr(
+        all(target_os = "ios"),
+        link_name = "ie_execlp"
+    )]
     pub fn execlp(file: *const ::c_char, arg0: *const ::c_char, ...) -> ::c_int;
+    #[cfg_attr(
+        all(target_os = "ios"),
+        link_name = "ie_execv"
+    )]
     pub fn execv(prog: *const c_char, argv: *const *const c_char) -> ::c_int;
+    #[cfg_attr(
+        all(target_os = "ios"),
+        link_name = "ie_execve"
+    )]
     pub fn execve(
         prog: *const c_char,
         argv: *const *const c_char,
         envp: *const *const c_char,
     ) -> ::c_int;
+    #[cfg_attr(
+        all(target_os = "ios"),
+        link_name = "ie_execvp"
+    )]
     pub fn execvp(c: *const c_char, argv: *const *const c_char) -> ::c_int;
     pub fn fork() -> pid_t;
     pub fn fpathconf(filedes: ::c_int, name: ::c_int) -> c_long;
--- a/vendor/libloading-0.7.4/tests/library_filename.rs	1707058324.000000000
+++ b/vendor/libloading-0.7.4/tests/library_filename.rs	1709207252.101763452
@@ -6,7 +6,7 @@ use std::path::Path;
 const EXPECTED: &str = "audioengine.dll";
 #[cfg(target_os = "linux")]
 const EXPECTED: &str = "libaudioengine.so";
-#[cfg(target_os = "macos")]
+#[cfg(any(target_os = "macos", target_os = "ios"))]
 const EXPECTED: &str = "libaudioengine.dylib";
 
 #[test]
--- a/vendor/lzma-sys/Cargo.toml	1707058324.000000000
+++ b/vendor/lzma-sys/Cargo.toml	1709300256.717085420
@@ -39,3 +39,6 @@ version = "0.3.14"
 
 [features]
 static = []
+
+[target.aarch64-apple-ios]
+rustc-link-search = ["/usr/libexec/xz/lib"]
--- a/vendor/lzma-sys/build.rs	1707058324.000000000
+++ b/vendor/lzma-sys/build.rs	1709299339.581046252
@@ -1,108 +1,4 @@
-use std::env;
-use std::fs;
-use std::path::PathBuf;
-
-const SKIP_FILENAMES: &[&str] = &["crc32_small", "crc64_small"];
-
 fn main() {
-    let target = env::var("TARGET").unwrap();
-
-    println!("cargo:rerun-if-changed=build.rs");
-    println!("cargo:rerun-if-env-changed=LZMA_API_STATIC");
-    let want_static = cfg!(feature = "static") || env::var("LZMA_API_STATIC").is_ok();
-    let msvc = target.contains("msvc");
-
-    // If a static link is desired, we compile from source.
-    // If we're compiling for MSVC, pkg-config runs a risk of picking up MinGW
-    // libraries by accident, so disable it.
-    //
-    // Otherwise check the system to see if it has an lzma library already
-    // installed that we can use.
-    if !want_static && !msvc && pkg_config::probe_library("liblzma").is_ok() {
-        return;
-    }
-
-    let out_dir = env::var("OUT_DIR").unwrap();
-    println!("cargo:root={}", out_dir);
-    let include_dir = env::current_dir().unwrap().join("xz-5.2/src/liblzma/api");
-    println!("cargo:include={}", include_dir.display());
-
-    let mut src_files = [
-        "xz-5.2/src/liblzma/common",
-        "xz-5.2/src/liblzma/lzma",
-        "xz-5.2/src/liblzma/lz",
-        "xz-5.2/src/liblzma/check",
-        "xz-5.2/src/liblzma/delta",
-        "xz-5.2/src/liblzma/rangecoder",
-        "xz-5.2/src/liblzma/simple",
-    ]
-    .iter()
-    .flat_map(|dir| read_dir_files(dir))
-    .chain(vec![
-        "xz-5.2/src/common/tuklib_cpucores.c".into(),
-        "xz-5.2/src/common/tuklib_physmem.c".into(),
-    ])
-    .collect::<Vec<_>>();
-
-    // sort to make build reproducible.
-    src_files.sort();
-
-    let mut build = cc::Build::new();
-
-    build
-        .files(src_files)
-        // all C preproc defines are in `./config.h`
-        .define("HAVE_CONFIG_H", "1")
-        .include("xz-5.2/src/liblzma/api")
-        .include("xz-5.2/src/liblzma/lzma")
-        .include("xz-5.2/src/liblzma/lz")
-        .include("xz-5.2/src/liblzma/check")
-        .include("xz-5.2/src/liblzma/simple")
-        .include("xz-5.2/src/liblzma/delta")
-        .include("xz-5.2/src/liblzma/common")
-        .include("xz-5.2/src/liblzma/rangecoder")
-        .include("xz-5.2/src/common")
-        .include(env::current_dir().unwrap());
-
-    if !target.ends_with("msvc") {
-        build.flag("-std=c99").flag("-pthread");
-    }
-
-    if let Ok(s) = env::var("CARGO_CFG_TARGET_ENDIAN") {
-        if s == "big" {
-            build.define("WORDS_BIGENDIAN", None);
-        }
-    }
-
-    build.compile("liblzma.a");
-}
-
-fn read_dir_files(dir: &str) -> impl Iterator<Item = PathBuf> {
-    fs::read_dir(dir)
-        .expect(&format!("failed to read dir {}", dir))
-        .filter_map(|ent| {
-            let ent = ent.expect("failed to read entry");
-
-            if ent.file_type().unwrap().is_dir() {
-                return None;
-            }
-
-            let path = ent.path();
-
-            if path.extension().unwrap() != "c" {
-                return None;
-            }
-
-            {
-                let file_stem = path.file_stem().unwrap().to_str().unwrap();
-                if SKIP_FILENAMES.contains(&file_stem) {
-                    return None;
-                }
-                if file_stem.ends_with("tablegen") {
-                    return None;
-                }
-            }
-
-            Some(path)
-        })
+  println!(r"cargo:rustc-link-search=/usr/libexec/xz/lib");
+  println!("cargo:rustc-link-lib=lzma");
 }
--- a/vendor/mdbook/src/utils/fs.rs	1707058324.000000000
+++ b/vendor/mdbook/src/utils/fs.rs	1709209597.885890778
@@ -197,7 +197,7 @@ fn copy<P: AsRef<Path>, Q: AsRef<Path>>(
     //
     // This is essentially a copy of the simple copy code path in Rust's
     // standard library.
-    #[cfg(target_os = "macos")]
+    #[cfg(any(target_os = "macos", target_os = "ios"))]
     fn copy_inner(from: &Path, to: &Path) -> Result<()> {
         use std::fs::OpenOptions;
         use std::os::unix::fs::{OpenOptionsExt, PermissionsExt};
@@ -229,7 +229,7 @@ fn copy<P: AsRef<Path>, Q: AsRef<Path>>(
         Ok(())
     }
 
-    #[cfg(not(target_os = "macos"))]
+    #[cfg(not(any(target_os = "macos", target_os = "ios")))]
     fn copy_inner(from: &Path, to: &Path) -> Result<()> {
         fs::copy(from, to)?;
         Ok(())
--- a/vendor/nix/src/mount/bsd.rs	1707058324.000000000
+++ b/vendor/nix/src/mount/bsd.rs	1709203061.926443231
@@ -33,7 +33,7 @@ libc_bitflags!(
         #[cfg_attr(docsrs, doc(cfg(all())))]
         MNT_GJOURNAL;
         /// MAC support for objects.
-        #[cfg(any(target_os = "macos", target_os = "freebsd"))]
+        #[cfg(any(target_os = "macos", target_os = "ios", target_os = "freebsd"))]
         #[cfg_attr(docsrs, doc(cfg(all())))]
         MNT_MULTILABEL;
         /// Disable read clustering.
@@ -66,7 +66,7 @@ libc_bitflags!(
         /// Create a snapshot of the file system.
         ///
         /// See [mksnap_ffs(8)](https://www.freebsd.org/cgi/man.cgi?query=mksnap_ffs)
-        #[cfg(any(target_os = "macos", target_os = "freebsd"))]
+        #[cfg(any(target_os = "macos", target_os = "ios", target_os = "freebsd"))]
         #[cfg_attr(docsrs, doc(cfg(all())))]
         MNT_SNAPSHOT;
         /// Using soft updates.
@@ -88,6 +88,7 @@ libc_bitflags!(
         /// Union with underlying fs.
         #[cfg(any(
                 target_os = "macos",
+                target_os = "ios",
                 target_os = "freebsd",
                 target_os = "netbsd"
         ))]
--- a/vendor/nix/src/mount/mod.rs	1707058324.000000000
+++ b/vendor/nix/src/mount/mod.rs	1709203014.509234934
@@ -9,6 +9,7 @@ pub use self::linux::*;
 #[cfg(any(
     target_os = "dragonfly",
     target_os = "freebsd",
+    target_os = "ios",
     target_os = "macos",
     target_os = "netbsd",
     target_os = "openbsd"
@@ -19,6 +20,7 @@ mod bsd;
 #[cfg(any(
     target_os = "dragonfly",
     target_os = "freebsd",
+    target_os = "ios",
     target_os = "macos",
     target_os = "netbsd",
     target_os = "openbsd"
--- a/vendor/nix/src/net/if_.rs	1707058324.000000000
+++ b/vendor/nix/src/net/if_.rs	1709202251.608710506
@@ -102,6 +102,7 @@ libc_bitflags!(
         /// Can't hear own transmissions.
         #[cfg(any(target_os = "dragonfly",
                   target_os = "freebsd",
+                  target_os = "ios",
                   target_os = "macos",
                   target_os = "netbsd",
                   target_os = "openbsd"))]
--- a/vendor/nix/src/sys/mod.rs	1707058324.000000000
+++ b/vendor/nix/src/sys/mod.rs	1709202525.451545076
@@ -83,6 +83,7 @@ feature! {
     target_os = "dragonfly",
     target_os = "freebsd",
     target_os = "linux",
+    target_os = "ios",
     target_os = "macos",
     target_os = "netbsd",
     target_os = "openbsd"
--- a/vendor/nix/src/sys/ptrace/bsd.rs	1707058324.000000000
+++ b/vendor/nix/src/sys/ptrace/bsd.rs	1709202436.667266904
@@ -12,6 +12,7 @@ cfg_if! {
     if #[cfg(any(target_os = "dragonfly",
                  target_os = "freebsd",
                  target_os = "macos",
+                 target_ps = "ios",
                  target_os = "openbsd"))] {
         #[doc(hidden)]
         pub type AddressType = *mut ::libc::c_char;
@@ -29,18 +30,19 @@ libc_enum! {
         PT_TRACE_ME,
         PT_READ_I,
         PT_READ_D,
-        #[cfg(target_os = "macos")]
+        #[cfg(any(target_os = "macos", target_os = "ios"))]
         #[cfg_attr(docsrs, doc(cfg(all())))]
         PT_READ_U,
         PT_WRITE_I,
         PT_WRITE_D,
-        #[cfg(target_os = "macos")]
+        #[cfg(any(target_os = "macos", target_os = "ios"))]
         #[cfg_attr(docsrs, doc(cfg(all())))]
         PT_WRITE_U,
         PT_CONTINUE,
         PT_KILL,
         #[cfg(any(any(target_os = "dragonfly",
                   target_os = "freebsd",
+                  target_os = "ios",
                   target_os = "macos"),
                   all(target_os = "openbsd", target_arch = "x86_64"),
                   all(target_os = "netbsd", any(target_arch = "x86_64",
@@ -48,13 +50,13 @@ libc_enum! {
         PT_STEP,
         PT_ATTACH,
         PT_DETACH,
-        #[cfg(target_os = "macos")]
+        #[cfg(any(target_os = "macos", target_os = "ios"))]
         #[cfg_attr(docsrs, doc(cfg(all())))]
         PT_SIGEXC,
-        #[cfg(target_os = "macos")]
+        #[cfg(any(target_os = "macos", target_os = "ios"))]
         #[cfg_attr(docsrs, doc(cfg(all())))]
         PT_THUPDATE,
-        #[cfg(target_os = "macos")]
+        #[cfg(any(target_os = "macos", target_os = "ios"))]
         #[cfg_attr(docsrs, doc(cfg(all())))]
         PT_ATTACHEXC
     }
@@ -157,7 +159,7 @@ pub fn kill(pid: Pid) -> Result<()> {
 /// }
 /// ```
 #[cfg(any(
-    any(target_os = "dragonfly", target_os = "freebsd", target_os = "macos"),
+    any(target_os = "dragonfly", target_os = "freebsd", target_os = "macos", target_os = "ios"),
     all(target_os = "openbsd", target_arch = "x86_64"),
     all(
         target_os = "netbsd",
--- a/vendor/nix/src/sys/ptrace/mod.rs	1707058324.000000000
+++ b/vendor/nix/src/sys/ptrace/mod.rs	1709202370.149774969
@@ -10,6 +10,7 @@ pub use self::linux::*;
     target_os = "dragonfly",
     target_os = "freebsd",
     target_os = "macos",
+    target_os = "ios",
     target_os = "netbsd",
     target_os = "openbsd"
 ))]
@@ -19,6 +20,7 @@ mod bsd;
     target_os = "dragonfly",
     target_os = "freebsd",
     target_os = "macos",
+    target_os = "ios",
     target_os = "netbsd",
     target_os = "openbsd"
 ))]
--- a/vendor/nix/src/sys/socket/addr.rs	1707058324.000000000
+++ b/vendor/nix/src/sys/socket/addr.rs	1709202937.529411199
@@ -14,7 +14,7 @@
 ))]
 #[cfg(feature = "net")]
 pub use self::datalink::LinkAddr;
-#[cfg(any(target_os = "android", target_os = "linux", target_os = "macos"))]
+#[cfg(any(target_os = "android", target_os = "linux", target_os = "macos", target_os = "ios"))]
 pub use self::vsock::VsockAddr;
 use super::sa_family_t;
 use crate::errno::Errno;
@@ -252,7 +252,7 @@ pub enum AddressFamily {
     #[cfg_attr(docsrs, doc(cfg(all())))]
     Nfc = libc::AF_NFC,
     /// VMWare VSockets protocol for hypervisor-guest interaction.
-    #[cfg(any(target_os = "android", target_os = "linux", target_os = "macos"))]
+    #[cfg(any(target_os = "android", target_os = "linux", target_os = "macos", target_os = "ios"))]
     #[cfg_attr(docsrs, doc(cfg(all())))]
     Vsock = libc::AF_VSOCK,
     /// ARPANet IMP addresses
@@ -427,7 +427,7 @@ impl AddressFamily {
             libc::AF_INET6 => Some(AddressFamily::Inet6),
             #[cfg(any(target_os = "android", target_os = "linux"))]
             libc::AF_NETLINK => Some(AddressFamily::Netlink),
-            #[cfg(any(target_os = "macos", target_os = "macos"))]
+            #[cfg(any(target_os = "macos", target_os = "ios"))]
             libc::AF_SYSTEM => Some(AddressFamily::System),
             #[cfg(not(any(
                 target_os = "redox",
@@ -447,7 +447,7 @@ impl AddressFamily {
                 target_os = "openbsd"
             ))]
             libc::AF_LINK => Some(AddressFamily::Link),
-            #[cfg(any(target_os = "android", target_os = "linux", target_os = "macos"))]
+            #[cfg(any(target_os = "android", target_os = "linux", target_os = "macos", target_os = "ios"))]
             libc::AF_VSOCK => Some(AddressFamily::Vsock),
             _ => None,
         }
@@ -1293,7 +1293,7 @@ pub union SockaddrStorage {
     sin6: SockaddrIn6,
     ss: libc::sockaddr_storage,
     su: UnixAddr,
-    #[cfg(any(target_os = "android", target_os = "linux", target_os = "macos" ))]
+    #[cfg(any(target_os = "android", target_os = "linux", target_os = "macos", target_os = "ios" ))]
     #[cfg_attr(docsrs, doc(cfg(all())))]
     vsock: VsockAddr,
 }
@@ -1385,7 +1385,7 @@ impl SockaddrLike for SockaddrStorage {
                 libc::AF_SYSTEM => {
                     SysControlAddr::from_raw(addr, l).map(|sctl| Self { sctl })
                 }
-                #[cfg(any(target_os = "android", target_os = "linux", target_os = "macos" ))]
+                #[cfg(any(target_os = "android", target_os = "linux", target_os = "macos", target_os = "ios" ))]
                 libc::AF_VSOCK => {
                     VsockAddr::from_raw(addr, l).map(|vsock| Self { vsock })
                 }
@@ -1561,7 +1561,7 @@ impl SockaddrStorage {
     accessors! {as_sys_control_addr, as_sys_control_addr_mut, SysControlAddr,
     AddressFamily::System, libc::sockaddr_ctl, sctl}
 
-    #[cfg(any(target_os = "android", target_os = "linux", target_os = "macos"))]
+    #[cfg(any(target_os = "android", target_os = "linux", target_os = "macos", target_os = "ios"))]
     #[cfg_attr(docsrs, doc(cfg(all())))]
     accessors! {as_vsock_addr, as_vsock_addr_mut, VsockAddr,
     AddressFamily::Vsock, libc::sockaddr_vm, vsock}
@@ -1611,7 +1611,7 @@ impl fmt::Display for SockaddrStorage {
                 #[cfg(feature = "ioctl")]
                 libc::AF_SYSTEM => self.sctl.fmt(f),
                 libc::AF_UNIX => self.su.fmt(f),
-                #[cfg(any(target_os = "android", target_os = "linux", target_os = "macos"))]
+                #[cfg(any(target_os = "android", target_os = "linux", target_os = "macos", target_os = "ios"))]
                 libc::AF_VSOCK => self.vsock.fmt(f),
                 _ => "<Address family unspecified>".fmt(f),
             }
@@ -1685,7 +1685,7 @@ impl Hash for SockaddrStorage {
                 #[cfg(feature = "ioctl")]
                 libc::AF_SYSTEM => self.sctl.hash(s),
                 libc::AF_UNIX => self.su.hash(s),
-                #[cfg(any(target_os = "android", target_os = "linux", target_os = "macos"))]
+                #[cfg(any(target_os = "android", target_os = "linux", target_os = "macos", target_os = "ios"))]
                 libc::AF_VSOCK => self.vsock.hash(s),
                 _ => self.ss.hash(s),
             }
@@ -1727,7 +1727,7 @@ impl PartialEq for SockaddrStorage {
                 #[cfg(feature = "ioctl")]
                 (libc::AF_SYSTEM, libc::AF_SYSTEM) => self.sctl == other.sctl,
                 (libc::AF_UNIX, libc::AF_UNIX) => self.su == other.su,
-                #[cfg(any(target_os = "android", target_os = "linux", target_os = "macos"))]
+                #[cfg(any(target_os = "android", target_os = "linux", target_os = "macos", target_os = "ios"))]
                 (libc::AF_VSOCK, libc::AF_VSOCK) => self.vsock == other.vsock,
                 _ => false,
             }
@@ -2276,7 +2276,7 @@ mod datalink {
     }
 }
 
-#[cfg(any(target_os = "android", target_os = "linux", target_os = "macos"))]
+#[cfg(any(target_os = "android", target_os = "linux", target_os = "macos", target_os = "ios"))]
 #[cfg_attr(docsrs, doc(cfg(all())))]
 pub mod vsock {
     use super::*;
@@ -2328,7 +2328,7 @@ pub mod vsock {
             (inner.svm_family, inner.svm_cid, inner.svm_port)
                 == (other.svm_family, other.svm_cid, other.svm_port)
         }
-        #[cfg(target_os = "macos")]
+        #[cfg(any(target_os = "macos", target_os = "ios"))]
         fn eq(&self, other: &Self) -> bool {
             let (inner, other) = (self.0, other.0);
             (inner.svm_family, inner.svm_cid, inner.svm_port, inner.svm_len)
@@ -2344,7 +2344,7 @@ pub mod vsock {
             let inner = self.0;
             (inner.svm_family, inner.svm_cid, inner.svm_port).hash(s);
         }
-        #[cfg(target_os = "macos")]
+        #[cfg(any(target_os = "macos", target_os = "ios"))]
         fn hash<H: Hasher>(&self, s: &mut H) {
             let inner = self.0;
             (inner.svm_family, inner.svm_cid, inner.svm_port, inner.svm_len).hash(s);
@@ -2363,7 +2363,7 @@ pub mod vsock {
             addr.svm_cid = cid;
             addr.svm_port = port;
 
-            #[cfg(target_os = "macos")]
+            #[cfg(any(target_os = "macos", target_os = "ios"))]
             {
              addr.svm_len =  std::mem::size_of::<sockaddr_vm>() as u8;
             }
--- a/vendor/nix/src/sys/socket/mod.rs	1707058324.000000000
+++ b/vendor/nix/src/sys/socket/mod.rs	1709202990.854387080
@@ -62,7 +62,7 @@ pub use crate::sys::socket::addr::netlin
 #[cfg(any(target_os = "ios", target_os = "macos"))]
 #[cfg(feature = "ioctl")]
 pub use crate::sys::socket::addr::sys_control::SysControlAddr;
-#[cfg(any(target_os = "android", target_os = "linux", target_os = "macos"))]
+#[cfg(any(target_os = "android", target_os = "linux", target_os = "macos", target_os = "ios"))]
 pub use crate::sys::socket::addr::vsock::VsockAddr;
 
 #[cfg(all(feature = "uio", not(target_os = "redox")))]
--- a/vendor/nix/src/sys/statfs.rs	1707058324.000000000
+++ b/vendor/nix/src/sys/statfs.rs	1709202571.220963976
@@ -14,6 +14,7 @@ use cfg_if::cfg_if;
     any(
         target_os = "dragonfly",
         target_os = "freebsd",
+        target_os = "ios",
         target_os = "macos",
         target_os = "netbsd",
         target_os = "openbsd"
@@ -457,6 +458,7 @@ impl Statfs {
         any(
             target_os = "dragonfly",
             target_os = "freebsd",
+            target_os = "ios",
             target_os = "macos",
             target_os = "netbsd",
             target_os = "openbsd"
@@ -704,6 +706,7 @@ impl Debug for Statfs {
             any(
                 target_os = "dragonfly",
                 target_os = "freebsd",
+                target_os = "ios",
                 target_os = "macos",
                 target_os = "netbsd",
                 target_os = "openbsd"
--- a/vendor/nix/src/sys/termios.rs	1707058324.000000000
+++ b/vendor/nix/src/sys/termios.rs	1709202700.557336336
@@ -375,6 +375,7 @@ libc_enum! {
         B4800,
         #[cfg(any(target_os = "dragonfly",
                 target_os = "freebsd",
+                target_os = "ios",
                 target_os = "macos",
                 target_os = "netbsd",
                 target_os = "openbsd"))]
@@ -383,6 +384,7 @@ libc_enum! {
         B9600,
         #[cfg(any(target_os = "dragonfly",
                 target_os = "freebsd",
+                target_os = "ios",
                 target_os = "macos",
                 target_os = "netbsd",
                 target_os = "openbsd"))]
@@ -391,6 +393,7 @@ libc_enum! {
         B19200,
         #[cfg(any(target_os = "dragonfly",
                 target_os = "freebsd",
+                target_os = "ios",
                 target_os = "macos",
                 target_os = "netbsd",
                 target_os = "openbsd"))]
@@ -402,6 +405,7 @@ libc_enum! {
         B57600,
         #[cfg(any(target_os = "dragonfly",
                 target_os = "freebsd",
+                target_os = "ios",
                 target_os = "macos",
                 target_os = "netbsd",
                 target_os = "openbsd"))]
@@ -554,6 +558,7 @@ libc_enum! {
         #[cfg(any(target_os = "dragonfly",
                 target_os = "freebsd",
                 target_os = "illumos",
+                target_os = "ios",
                 target_os = "macos",
                 target_os = "netbsd",
                 target_os = "openbsd",
@@ -584,6 +589,7 @@ libc_enum! {
         #[cfg(any(target_os = "dragonfly",
                 target_os = "freebsd",
                 target_os = "illumos",
+                target_os = "ios",
                 target_os = "macos",
                 target_os = "netbsd",
                 target_os = "openbsd",
@@ -629,6 +635,7 @@ pub use libc::NCCS;
     target_os = "freebsd",
     target_os = "linux",
     target_os = "aix",
+    target_os = "ios",
     target_os = "macos",
     target_os = "netbsd",
     target_os = "openbsd"
@@ -656,7 +663,7 @@ libc_bitflags! {
         #[cfg(not(any(target_os = "redox", target_os = "haiku")))]
         #[cfg_attr(docsrs, doc(cfg(all())))]
         IMAXBEL;
-        #[cfg(any(target_os = "android", target_os = "linux", target_os = "macos"))]
+        #[cfg(any(target_os = "android", target_os = "linux", target_os = "macos", target_os = "ios"))]
         #[cfg_attr(docsrs, doc(cfg(all())))]
         IUTF8;
     }
@@ -817,6 +824,7 @@ libc_bitflags! {
         OXTABS;
         #[cfg(any(target_os = "freebsd",
                   target_os = "dragonfly",
+                  target_os = "ios",
                   target_os = "macos",
                   target_os = "netbsd",
                   target_os = "openbsd"))]
@@ -912,6 +920,7 @@ libc_bitflags! {
         CBAUDEX;
         #[cfg(any(target_os = "dragonfly",
                   target_os = "freebsd",
+                  target_os = "ios",
                   target_os = "macos",
                   target_os = "netbsd",
                   target_os = "openbsd"))]
--- a/vendor/nix-0.26.2/src/mount/bsd.rs	1707058324.000000000
+++ b/vendor/nix-0.26.2/src/mount/bsd.rs	1709207814.061979913
@@ -33,7 +33,7 @@ libc_bitflags!(
         #[cfg_attr(docsrs, doc(cfg(all())))]
         MNT_GJOURNAL;
         /// MAC support for objects.
-        #[cfg(any(target_os = "macos", target_os = "freebsd"))]
+        #[cfg(any(target_os = "macos", target_os = "ios", target_os = "freebsd"))]
         #[cfg_attr(docsrs, doc(cfg(all())))]
         MNT_MULTILABEL;
         /// Disable read clustering.
@@ -66,7 +66,7 @@ libc_bitflags!(
         /// Create a snapshot of the file system.
         ///
         /// See [mksnap_ffs(8)](https://www.freebsd.org/cgi/man.cgi?query=mksnap_ffs)
-        #[cfg(any(target_os = "macos", target_os = "freebsd"))]
+        #[cfg(any(target_os = "macos", target_os = "ios", target_os = "freebsd"))]
         #[cfg_attr(docsrs, doc(cfg(all())))]
         MNT_SNAPSHOT;
         /// Using soft updates.
@@ -87,6 +87,7 @@ libc_bitflags!(
         MNT_SYNCHRONOUS;
         /// Union with underlying fs.
         #[cfg(any(
+                target_os = "ios",
                 target_os = "macos",
                 target_os = "freebsd",
                 target_os = "netbsd"
--- a/vendor/nix-0.26.2/src/mount/mod.rs	1707058324.000000000
+++ b/vendor/nix-0.26.2/src/mount/mod.rs	1709207780.612193689
@@ -9,6 +9,7 @@ pub use self::linux::*;
 #[cfg(any(
     target_os = "dragonfly",
     target_os = "freebsd",
+    target_os = "ios",
     target_os = "macos",
     target_os = "netbsd",
     target_os = "openbsd"
@@ -19,6 +20,7 @@ mod bsd;
 #[cfg(any(
     target_os = "dragonfly",
     target_os = "freebsd",
+    target_os = "ios",
     target_os = "macos",
     target_os = "netbsd",
     target_os = "openbsd"
--- a/vendor/nix-0.26.2/src/net/if_.rs	1707058324.000000000
+++ b/vendor/nix-0.26.2/src/net/if_.rs	1709207343.039512106
@@ -102,6 +102,7 @@ libc_bitflags!(
         /// Can't hear own transmissions.
         #[cfg(any(target_os = "dragonfly",
                   target_os = "freebsd",
+                  target_os = "ios",
                   target_os = "macos",
                   target_os = "netbsd",
                   target_os = "openbsd"))]
--- a/vendor/nix-0.26.2/src/sys/mod.rs	1707058324.000000000
+++ b/vendor/nix-0.26.2/src/sys/mod.rs	1709207522.839847939
@@ -78,6 +78,7 @@ feature! {
     target_os = "dragonfly",
     target_os = "freebsd",
     target_os = "linux",
+    target_os = "ios",
     target_os = "macos",
     target_os = "netbsd",
     target_os = "openbsd"
--- a/vendor/nix-0.26.2/src/sys/ptrace/bsd.rs	1707058324.000000000
+++ b/vendor/nix-0.26.2/src/sys/ptrace/bsd.rs	1709207460.315234045
@@ -12,6 +12,7 @@ cfg_if! {
     if #[cfg(any(target_os = "dragonfly",
                  target_os = "freebsd",
                  target_os = "macos",
+                 target_os = "ios",
                  target_os = "openbsd"))] {
         #[doc(hidden)]
         pub type AddressType = *mut ::libc::c_char;
@@ -29,18 +30,19 @@ libc_enum! {
         PT_TRACE_ME,
         PT_READ_I,
         PT_READ_D,
-        #[cfg(target_os = "macos")]
+        #[cfg(any(target_os = "macos", target_os = "ios"))]
         #[cfg_attr(docsrs, doc(cfg(all())))]
         PT_READ_U,
         PT_WRITE_I,
         PT_WRITE_D,
-        #[cfg(target_os = "macos")]
+        #[cfg(any(target_os = "macos", target_os = "ios"))]
         #[cfg_attr(docsrs, doc(cfg(all())))]
         PT_WRITE_U,
         PT_CONTINUE,
         PT_KILL,
         #[cfg(any(any(target_os = "dragonfly",
                   target_os = "freebsd",
+                  target_os = "ios",
                   target_os = "macos"),
                   all(target_os = "openbsd", target_arch = "x86_64"),
                   all(target_os = "netbsd", any(target_arch = "x86_64",
@@ -48,13 +50,13 @@ libc_enum! {
         PT_STEP,
         PT_ATTACH,
         PT_DETACH,
-        #[cfg(target_os = "macos")]
+        #[cfg(any(target_os = "macos", target_os = "ios"))]
         #[cfg_attr(docsrs, doc(cfg(all())))]
         PT_SIGEXC,
-        #[cfg(target_os = "macos")]
+        #[cfg(any(target_os = "macos", target_os = "ios"))]
         #[cfg_attr(docsrs, doc(cfg(all())))]
         PT_THUPDATE,
-        #[cfg(target_os = "macos")]
+        #[cfg(any(target_os = "macos", target_os = "ios"))]
         #[cfg_attr(docsrs, doc(cfg(all())))]
         PT_ATTACHEXC
     }
@@ -157,7 +159,7 @@ pub fn kill(pid: Pid) -> Result<()> {
 /// }
 /// ```
 #[cfg(any(
-    any(target_os = "dragonfly", target_os = "freebsd", target_os = "macos"),
+    any(target_os = "dragonfly", target_os = "freebsd", target_os = "macos", target_os = "ios"),
     all(target_os = "openbsd", target_arch = "x86_64"),
     all(
         target_os = "netbsd",
--- a/vendor/nix-0.26.2/src/sys/ptrace/mod.rs	1707058324.000000000
+++ b/vendor/nix-0.26.2/src/sys/ptrace/mod.rs	1709207414.745631972
@@ -10,6 +10,7 @@ pub use self::linux::*;
     target_os = "dragonfly",
     target_os = "freebsd",
     target_os = "macos",
+    target_os = "ios",
     target_os = "netbsd",
     target_os = "openbsd"
 ))]
@@ -19,6 +20,7 @@ mod bsd;
     target_os = "dragonfly",
     target_os = "freebsd",
     target_os = "macos",
+    target_os = "ios",
     target_os = "netbsd",
     target_os = "openbsd"
 ))]
--- a/vendor/nix-0.26.2/src/sys/socket/addr.rs	1707058324.000000000
+++ b/vendor/nix-0.26.2/src/sys/socket/addr.rs	1709207725.936930383
@@ -419,7 +419,7 @@ impl AddressFamily {
             libc::AF_INET6 => Some(AddressFamily::Inet6),
             #[cfg(any(target_os = "android", target_os = "linux"))]
             libc::AF_NETLINK => Some(AddressFamily::Netlink),
-            #[cfg(any(target_os = "macos", target_os = "macos"))]
+            #[cfg(any(target_os = "macos", target_os = "ios"))]
             libc::AF_SYSTEM => Some(AddressFamily::System),
             #[cfg(any(target_os = "android", target_os = "linux"))]
             libc::AF_PACKET => Some(AddressFamily::Packet),
--- a/vendor/nix-0.26.2/src/sys/statfs.rs	1707058324.000000000
+++ b/vendor/nix-0.26.2/src/sys/statfs.rs	1709207565.315129388
@@ -14,6 +14,7 @@ use cfg_if::cfg_if;
     any(
         target_os = "dragonfly",
         target_os = "freebsd",
+        target_os = "ios",
         target_os = "macos",
         target_os = "netbsd",
         target_os = "openbsd"
@@ -457,6 +458,7 @@ impl Statfs {
         any(
             target_os = "dragonfly",
             target_os = "freebsd",
+            target_os = "ios",
             target_os = "macos",
             target_os = "netbsd",
             target_os = "openbsd"
@@ -704,6 +706,7 @@ impl Debug for Statfs {
             any(
                 target_os = "dragonfly",
                 target_os = "freebsd",
+                target_os = "ios",
                 target_os = "macos",
                 target_os = "netbsd",
                 target_os = "openbsd"
--- a/vendor/nix-0.26.2/src/sys/termios.rs	1707058324.000000000
+++ b/vendor/nix-0.26.2/src/sys/termios.rs	1709207653.427166096
@@ -375,6 +375,7 @@ libc_enum! {
         B4800,
         #[cfg(any(target_os = "dragonfly",
                 target_os = "freebsd",
+                target_os = "ios",
                 target_os = "macos",
                 target_os = "netbsd",
                 target_os = "openbsd"))]
@@ -383,6 +384,7 @@ libc_enum! {
         B9600,
         #[cfg(any(target_os = "dragonfly",
                 target_os = "freebsd",
+                target_os = "ios",
                 target_os = "macos",
                 target_os = "netbsd",
                 target_os = "openbsd"))]
@@ -391,6 +393,7 @@ libc_enum! {
         B19200,
         #[cfg(any(target_os = "dragonfly",
                 target_os = "freebsd",
+                target_os = "ios",
                 target_os = "macos",
                 target_os = "netbsd",
                 target_os = "openbsd"))]
@@ -400,6 +403,7 @@ libc_enum! {
         B57600,
         #[cfg(any(target_os = "dragonfly",
                 target_os = "freebsd",
+                target_os = "ios",
                 target_os = "macos",
                 target_os = "netbsd",
                 target_os = "openbsd"))]
@@ -546,6 +550,7 @@ libc_enum! {
         #[cfg(any(target_os = "dragonfly",
                 target_os = "freebsd",
                 target_os = "illumos",
+                target_os = "ios",
                 target_os = "macos",
                 target_os = "netbsd",
                 target_os = "openbsd",
@@ -575,6 +580,7 @@ libc_enum! {
         #[cfg(any(target_os = "dragonfly",
                 target_os = "freebsd",
                 target_os = "illumos",
+                target_os = "ios",
                 target_os = "macos",
                 target_os = "netbsd",
                 target_os = "openbsd",
@@ -616,6 +622,7 @@ pub use libc::NCCS;
     target_os = "dragonfly",
     target_os = "freebsd",
     target_os = "linux",
+    target_os = "ios",
     target_os = "macos",
     target_os = "netbsd",
     target_os = "openbsd"
@@ -643,7 +650,7 @@ libc_bitflags! {
         #[cfg(not(any(target_os = "redox", target_os = "haiku")))]
         #[cfg_attr(docsrs, doc(cfg(all())))]
         IMAXBEL;
-        #[cfg(any(target_os = "android", target_os = "linux", target_os = "macos"))]
+        #[cfg(any(target_os = "android", target_os = "linux", target_os = "macos", target_os = "ios"))]
         #[cfg_attr(docsrs, doc(cfg(all())))]
         IUTF8;
     }
@@ -804,6 +811,7 @@ libc_bitflags! {
         OXTABS;
         #[cfg(any(target_os = "freebsd",
                   target_os = "dragonfly",
+                  target_os = "ios",
                   target_os = "macos",
                   target_os = "netbsd",
                   target_os = "openbsd"))]
@@ -899,6 +907,7 @@ libc_bitflags! {
         CBAUDEX;
         #[cfg(any(target_os = "dragonfly",
                   target_os = "freebsd",
+                  target_os = "ios",
                   target_os = "macos",
                   target_os = "netbsd",
                   target_os = "openbsd"))]
--- a/vendor/notify/Cargo.toml	1707058324.000000000
+++ b/vendor/notify/Cargo.toml	1709120781.869367788
@@ -92,18 +92,18 @@ default-features = false
 version = "0.8"
 features = ["os-ext"]
 
-[target."cfg(target_os=\"macos\")".dependencies.bitflags]
+[target."cfg(any(target_os=\"macos\", target_os=\"ios\"))".dependencies.bitflags]
 version = "2.3.0"
 
-[target."cfg(target_os=\"macos\")".dependencies.fsevent-sys]
+[target."cfg(any(target_os=\"macos\", target_os=\"ios\"))".dependencies.fsevent-sys]
 version = "4"
 optional = true
 
-[target."cfg(target_os=\"macos\")".dependencies.kqueue]
+[target."cfg(any(target_os=\"macos\", target_os=\"ios\"))".dependencies.kqueue]
 version = "1.0"
 optional = true
 
-[target."cfg(target_os=\"macos\")".dependencies.mio]
+[target."cfg(any(target_os=\"macos\", target_os=\"ios\"))".dependencies.mio]
 version = "0.8"
 features = ["os-ext"]
 optional = true
--- a/vendor/notify/src/lib.rs	1707058324.000000000
+++ b/vendor/notify/src/lib.rs	1709198258.522739720
@@ -210,7 +210,7 @@ pub(crate) fn bounded<T>(cap: usize) ->
     return std::sync::mpsc::sync_channel(cap);
 }
 
-#[cfg(all(target_os = "macos", not(feature = "macos_kqueue")))]
+#[cfg(all(any(target_os = "macos", target_os = "ios"), not(feature = "macos_kqueue")))]
 pub use crate::fsevent::FsEventWatcher;
 #[cfg(any(target_os = "linux", target_os = "android"))]
 pub use crate::inotify::INotifyWatcher;
@@ -219,7 +219,7 @@ pub use crate::inotify::INotifyWatcher;
     target_os = "openbsd",
     target_os = "netbsd",
     target_os = "dragonflybsd",
-    all(target_os = "macos", feature = "macos_kqueue")
+    all(any(target_os = "macos", target_os = "ios"), feature = "macos_kqueue")
 ))]
 pub use crate::kqueue::KqueueWatcher;
 pub use null::NullWatcher;
@@ -227,7 +227,7 @@ pub use poll::PollWatcher;
 #[cfg(target_os = "windows")]
 pub use windows::ReadDirectoryChangesWatcher;
 
-#[cfg(all(target_os = "macos", not(feature = "macos_kqueue")))]
+#[cfg(all(any(target_os = "macos", target_os = "ios"), not(feature = "macos_kqueue")))]
 pub mod fsevent;
 #[cfg(any(target_os = "linux", target_os = "android"))]
 pub mod inotify;
@@ -236,7 +236,7 @@ pub mod inotify;
     target_os = "openbsd",
     target_os = "dragonflybsd",
     target_os = "netbsd",
-    all(target_os = "macos", feature = "macos_kqueue")
+    all(any(target_os = "macos", target_os = "ios"), feature = "macos_kqueue")
 ))]
 pub mod kqueue;
 #[cfg(target_os = "windows")]
@@ -370,7 +370,7 @@ pub trait Watcher {
 #[cfg(any(target_os = "linux", target_os = "android"))]
 pub type RecommendedWatcher = INotifyWatcher;
 /// The recommended `Watcher` implementation for the current platform
-#[cfg(all(target_os = "macos", not(feature = "macos_kqueue")))]
+#[cfg(all(any(target_os = "macos", target_os = "ios"), not(feature = "macos_kqueue")))]
 pub type RecommendedWatcher = FsEventWatcher;
 /// The recommended `Watcher` implementation for the current platform
 #[cfg(target_os = "windows")]
@@ -381,7 +381,7 @@ pub type RecommendedWatcher = ReadDirect
     target_os = "openbsd",
     target_os = "netbsd",
     target_os = "dragonflybsd",
-    all(target_os = "macos", feature = "macos_kqueue")
+    all(any(target_os = "macos", target_os = "ios"), feature = "macos_kqueue")
 ))]
 pub type RecommendedWatcher = KqueueWatcher;
 /// The recommended `Watcher` implementation for the current platform
@@ -389,6 +389,7 @@ pub type RecommendedWatcher = KqueueWatc
     target_os = "linux",
     target_os = "android",
     target_os = "macos",
+    target_os = "ios",
     target_os = "windows",
     target_os = "freebsd",
     target_os = "openbsd",
--- a/vendor/num_cpus/src/lib.rs	1707058325.000000000
+++ b/vendor/num_cpus/src/lib.rs	1709202167.869990162
@@ -114,6 +114,7 @@ pub fn get_physical() -> usize {
     target_os = "linux",
     target_os = "windows",
     target_os = "macos",
+    target_os = "ios",
     target_os = "openbsd",
     target_os = "aix")))]
 #[inline]
@@ -309,7 +310,7 @@ fn get_num_physical_cpus() -> usize {
 }
 
 
-#[cfg(target_os = "macos")]
+#[cfg(any(target_os = "macos", target_os = "ios"))]
 fn get_num_physical_cpus() -> usize {
     use std::ffi::CStr;
     use std::ptr;
--- a/vendor/num_cpus-1.15.0/src/lib.rs	1707058325.000000000
+++ b/vendor/num_cpus-1.15.0/src/lib.rs	1709202116.264532826
@@ -110,7 +110,7 @@ pub fn get_physical() -> usize {
 }
 
 
-#[cfg(not(any(target_os = "linux", target_os = "windows", target_os="macos", target_os="openbsd")))]
+#[cfg(not(any(target_os = "linux", target_os = "windows", target_os="macos", target_os="ios", target_os="openbsd")))]
 #[inline]
 fn get_num_physical_cpus() -> usize {
     // Not implemented, fall back
@@ -304,7 +304,7 @@ fn get_num_physical_cpus() -> usize {
 }
 
 
-#[cfg(target_os = "macos")]
+#[cfg(any(target_os = "macos", target_os = "ios"))]
 fn get_num_physical_cpus() -> usize {
     use std::ffi::CStr;
     use std::ptr;
--- a/vendor/object/src/read/mod.rs	1707058325.000000000
+++ b/vendor/object/src/read/mod.rs	1709206319.019471076
@@ -106,7 +106,7 @@ impl<T> ReadError<T> for Option<T> {
 /// The native executable file for the target platform.
 #[cfg(all(
     unix,
-    not(target_os = "macos"),
+    not(any(target_os = "macos", target_os = "ios")),
     target_pointer_width = "32",
     feature = "elf"
 ))]
@@ -115,18 +115,18 @@ pub type NativeFile<'data, R = &'data [u
 /// The native executable file for the target platform.
 #[cfg(all(
     unix,
-    not(target_os = "macos"),
+    not(any(target_os = "macos", target_os = "ios")),
     target_pointer_width = "64",
     feature = "elf"
 ))]
 pub type NativeFile<'data, R = &'data [u8]> = elf::ElfFile64<'data, crate::Endianness, R>;
 
 /// The native executable file for the target platform.
-#[cfg(all(target_os = "macos", target_pointer_width = "32", feature = "macho"))]
+#[cfg(all(any(target_os = "macos", target_os = "ios"), target_pointer_width = "32", feature = "macho"))]
 pub type NativeFile<'data, R = &'data [u8]> = macho::MachOFile32<'data, crate::Endianness, R>;
 
 /// The native executable file for the target platform.
-#[cfg(all(target_os = "macos", target_pointer_width = "64", feature = "macho"))]
+#[cfg(all(any(target_os = "macos", target_os = "ios"), target_pointer_width = "64", feature = "macho"))]
 pub type NativeFile<'data, R = &'data [u8]> = macho::MachOFile64<'data, crate::Endianness, R>;
 
 /// The native executable file for the target platform.
--- a/vendor/object-0.30.4/src/read/mod.rs	1707058325.000000000
+++ b/vendor/object-0.30.4/src/read/mod.rs	1709207299.971159851
@@ -106,7 +106,7 @@ impl<T> ReadError<T> for Option<T> {
 /// The native executable file for the target platform.
 #[cfg(all(
     unix,
-    not(target_os = "macos"),
+    not(any(target_os = "macos", target_os = "ios")),
     target_pointer_width = "32",
     feature = "elf"
 ))]
@@ -115,18 +115,18 @@ pub type NativeFile<'data, R = &'data [u
 /// The native executable file for the target platform.
 #[cfg(all(
     unix,
-    not(target_os = "macos"),
+    not(any(target_os = "macos", target_os = "ios")),
     target_pointer_width = "64",
     feature = "elf"
 ))]
 pub type NativeFile<'data, R = &'data [u8]> = elf::ElfFile64<'data, crate::Endianness, R>;
 
 /// The native executable file for the target platform.
-#[cfg(all(target_os = "macos", target_pointer_width = "32", feature = "macho"))]
+#[cfg(all(any(target_os = "macos", target_os = "ios"), target_pointer_width = "32", feature = "macho"))]
 pub type NativeFile<'data, R = &'data [u8]> = macho::MachOFile32<'data, crate::Endianness, R>;
 
 /// The native executable file for the target platform.
-#[cfg(all(target_os = "macos", target_pointer_width = "64", feature = "macho"))]
+#[cfg(all(any(target_os = "macos", target_os = "ios"), target_pointer_width = "64", feature = "macho"))]
 pub type NativeFile<'data, R = &'data [u8]> = macho::MachOFile64<'data, crate::Endianness, R>;
 
 /// The native executable file for the target platform.
--- a/vendor/object-0.32.0/src/read/mod.rs	1707058325.000000000
+++ b/vendor/object-0.32.0/src/read/mod.rs	1709207911.638096824
@@ -106,7 +106,7 @@ impl<T> ReadError<T> for Option<T> {
 /// The native executable file for the target platform.
 #[cfg(all(
     unix,
-    not(target_os = "macos"),
+    not(any(target_os = "macos", target_os = "ios")),
     target_pointer_width = "32",
     feature = "elf"
 ))]
@@ -115,18 +115,18 @@ pub type NativeFile<'data, R = &'data [u
 /// The native executable file for the target platform.
 #[cfg(all(
     unix,
-    not(target_os = "macos"),
+    not(any(target_os = "macos", target_os = "ios")),
     target_pointer_width = "64",
     feature = "elf"
 ))]
 pub type NativeFile<'data, R = &'data [u8]> = elf::ElfFile64<'data, crate::Endianness, R>;
 
 /// The native executable file for the target platform.
-#[cfg(all(target_os = "macos", target_pointer_width = "32", feature = "macho"))]
+#[cfg(all(any(target_os = "macos", target_os = "ios"), target_pointer_width = "32", feature = "macho"))]
 pub type NativeFile<'data, R = &'data [u8]> = macho::MachOFile32<'data, crate::Endianness, R>;
 
 /// The native executable file for the target platform.
-#[cfg(all(target_os = "macos", target_pointer_width = "64", feature = "macho"))]
+#[cfg(all(any(target_os = "macos", target_os = "ios"), target_pointer_width = "64", feature = "macho"))]
 pub type NativeFile<'data, R = &'data [u8]> = macho::MachOFile64<'data, crate::Endianness, R>;
 
 /// The native executable file for the target platform.
--- a/vendor/opener/src/lib.rs	1707058325.000000000
+++ b/vendor/opener/src/lib.rs	1709205488.203311421
@@ -29,16 +29,16 @@
 
 #[cfg(all(feature = "reveal", target_os = "linux"))]
 mod freedesktop;
-#[cfg(not(any(target_os = "windows", target_os = "macos")))]
+#[cfg(not(any(target_os = "windows", target_os = "macos", target_os = "ios")))]
 mod linux_and_more;
-#[cfg(target_os = "macos")]
+#[cfg(any(target_os = "macos", target_os = "ios"))]
 mod macos;
 #[cfg(target_os = "windows")]
 mod windows;
 
-#[cfg(not(any(target_os = "windows", target_os = "macos")))]
+#[cfg(not(any(target_os = "windows", target_os = "macos", target_os = "ios")))]
 use crate::linux_and_more as sys;
-#[cfg(target_os = "macos")]
+#[cfg(any(target_os = "macos", target_os = "ios"))]
 use crate::macos as sys;
 #[cfg(target_os = "windows")]
 use crate::windows as sys;
--- a/vendor/opener/src/macos.rs	1707058325.000000000
+++ b/vendor/opener/src/macos.rs	1709205573.479861274
@@ -2,6 +2,8 @@ use crate::OpenError;
 use std::ffi::OsStr;
 use std::process::{Command, Stdio};
 
+// Torrekie: This will need a reimplemented `open' tool on iOS
+
 pub(crate) fn open(path: &OsStr) -> Result<(), OpenError> {
     let mut open = Command::new("open")
         .arg(path)
--- a/vendor/opener-0.5.0/src/lib.rs	1707058325.000000000
+++ b/vendor/opener-0.5.0/src/lib.rs	1709206268.742856182
@@ -26,16 +26,16 @@
     unused_qualifications
 )]
 
-#[cfg(not(any(target_os = "windows", target_os = "macos")))]
+#[cfg(not(any(target_os = "windows", target_os = "macos", target_os = "ios")))]
 mod linux_and_more;
-#[cfg(target_os = "macos")]
+#[cfg(any(target_os = "macos", target_os = "ios"))]
 mod macos;
 #[cfg(target_os = "windows")]
 mod windows;
 
-#[cfg(not(any(target_os = "windows", target_os = "macos")))]
+#[cfg(not(any(target_os = "windows", target_os = "macos", target_os = "ios")))]
 use crate::linux_and_more as sys;
-#[cfg(target_os = "macos")]
+#[cfg(any(target_os = "macos", target_os = "ios"))]
 use crate::macos as sys;
 #[cfg(target_os = "windows")]
 use crate::windows as sys;
--- a/vendor/opener-0.5.2/src/lib.rs	1707058325.000000000
+++ b/vendor/opener-0.5.2/src/lib.rs	1709121999.930576973
@@ -26,16 +26,16 @@
     unused_qualifications
 )]
 
-#[cfg(not(any(target_os = "windows", target_os = "macos")))]
+#[cfg(not(any(target_os = "windows", target_os = "macos", target_os = "ios")))]
 mod linux_and_more;
-#[cfg(target_os = "macos")]
+#[cfg(any(target_os = "macos", target_os = "ios"))]
 mod macos;
 #[cfg(target_os = "windows")]
 mod windows;
 
-#[cfg(not(any(target_os = "windows", target_os = "macos")))]
+#[cfg(not(any(target_os = "windows", target_os = "macos", target_os = "ios")))]
 use crate::linux_and_more as sys;
-#[cfg(target_os = "macos")]
+#[cfg(any(target_os = "macos", target_os = "ios"))]
 use crate::macos as sys;
 #[cfg(target_os = "windows")]
 use crate::windows as sys;
--- a/vendor/os_info/src/bitness.rs	1707058325.000000000
+++ b/vendor/os_info/src/bitness.rs	1709204610.383202917
@@ -6,6 +6,7 @@ use std::fmt::{self, Display, Formatter}
     target_os = "freebsd",
     target_os = "illumos",
     target_os = "linux",
+    target_os = "ios",
     target_os = "macos",
     target_os = "netbsd",
     target_os = "openbsd"
@@ -39,6 +40,7 @@ impl Display for Bitness {
     target_os = "dragonfly",
     target_os = "freebsd",
     target_os = "linux",
+    target_os = "ios",
     target_os = "macos",
 ))]
 pub fn get() -> Bitness {
@@ -94,6 +96,7 @@ pub fn get() -> Bitness {
         target_os = "dragonfly",
         target_os = "freebsd",
         target_os = "linux",
+        target_os = "ios",
         target_os = "macos",
         target_os = "netbsd",
         target_os = "openbsd"
--- a/vendor/os_info/src/lib.rs	1707058325.000000000
+++ b/vendor/os_info/src/lib.rs	1709204825.568058151
@@ -34,7 +34,7 @@ mod imp;
 #[path = "linux/mod.rs"]
 mod imp;
 
-#[cfg(target_os = "macos")]
+#[cfg(any(target_os = "macos", target_os = "ios"))]
 #[path = "macos/mod.rs"]
 mod imp;
 
@@ -62,6 +62,7 @@ mod imp;
     target_os = "illumos",
     target_os = "linux",
     target_os = "macos",
+    target_os = "ios",
     target_os = "netbsd",
     target_os = "openbsd",
     target_os = "redox",
@@ -73,6 +74,7 @@ mod imp;
 #[cfg(any(
     target_os = "linux",
     target_os = "macos",
+    target_os = "ios",
     target_os = "netbsd",
     target_os = "openbsd"
 ))]
--- a/vendor/os_info/src/macos/mod.rs	1707058325.000000000
+++ b/vendor/os_info/src/macos/mod.rs	1709204970.910803590
@@ -7,11 +7,20 @@ use crate::{architecture, bitness, match
 pub fn current_platform() -> Info {
     trace!("macos::current_platform is called");
 
+    #[cfg(target_os = "macos")]
     let info = Info {
         os_type: Type::Macos,
         version: version(),
         bitness: bitness::get(),
         architecture: architecture::get(),
+        ..Default::default()
+    };
+    #[cfg(target_os = "ios")]
+    let info = Info {
+        os_type: Type::Ios,
+        version: version(),
+        bitness: bitness::get(),
+        architecture: architecture::get(),
         ..Default::default()
     };
     trace!("Returning {:?}", info);
--- a/vendor/os_info/src/os_type.rs	1707058325.000000000
+++ b/vendor/os_info/src/os_type.rs	1709204771.623256474
@@ -46,6 +46,7 @@ pub enum Type {
     Mabox,
     /// Mac OS X/OS X/macOS (<https://en.wikipedia.org/wiki/MacOS>).
     Macos,
+    Ios,
     /// Manjaro (<https://en.wikipedia.org/wiki/Manjaro>).
     Manjaro,
     /// Mariner (<https://en.wikipedia.org/wiki/CBL-Mariner>).
@@ -109,6 +110,7 @@ impl Display for Type {
             Type::Gentoo => write!(f, "Gentoo Linux"),
             Type::Illumos => write!(f, "illumos"),
             Type::Macos => write!(f, "Mac OS"),
+            Type::Ios => write!(f, "iOS"),
             Type::MidnightBSD => write!(f, "Midnight BSD"),
             Type::Mint => write!(f, "Linux Mint"),
             Type::Pop => write!(f, "Pop!_OS"),
@@ -150,6 +152,7 @@ mod tests {
             (Type::FreeBSD, "FreeBSD"),
             (Type::Linux, "Linux"),
             (Type::Macos, "Mac OS"),
+            (Type::Ios, "iOS"),
             (Type::Manjaro, "Manjaro"),
             (Type::Mint, "Linux Mint"),
             (Type::NetBSD, "NetBSD"),
--- a/vendor/pkg-config/src/lib.rs	1707058325.000000000
+++ b/vendor/pkg-config/src/lib.rs	1709302805.442337493
@@ -117,11 +117,8 @@ pub enum Error {
     /// Contains the name of the responsible environment variable.
     EnvNoPkgConfig(String),
 
-    /// Detected cross compilation without a custom sysroot.
-    ///
-    /// Ignore the error with `PKG_CONFIG_ALLOW_CROSS=1`,
-    /// which may let `pkg-config` select libraries
-    /// for the host's architecture instead of the target's.
+    /// Cross compilation detected. Kept for compatibility;
+    /// the Debian package never emits this.
     CrossCompilation,
 
     /// Failed to run `pkg-config`.
@@ -161,14 +158,6 @@ impl fmt::Display for Error {
     fn fmt(&self, f: &mut fmt::Formatter) -> Result<(), fmt::Error> {
         match *self {
             Error::EnvNoPkgConfig(ref name) => write!(f, "Aborted because {} is set", name),
-            Error::CrossCompilation => f.write_str(
-                "pkg-config has not been configured to support cross-compilation.\n\
-                \n\
-                Install a sysroot for the target platform and configure it via\n\
-                PKG_CONFIG_SYSROOT_DIR and PKG_CONFIG_PATH, or install a\n\
-                cross-compiling wrapper for pkg-config and set it via\n\
-                PKG_CONFIG environment variable.",
-            ),
             Error::Command {
                 ref command,
                 ref cause,
@@ -226,7 +215,7 @@ impl fmt::Display for Error {
                 )?;
                 format_output(output, f)
             }
-            Error::__Nonexhaustive => panic!(),
+            Error::CrossCompilation | Error::__Nonexhaustive => panic!(),
         }
     }
 }
@@ -420,6 +409,8 @@ impl Config {
         if host == target {
             return true;
         }
+        // always enable PKG_CONFIG_ALLOW_CROSS override in Debian
+        return true;
 
         // pkg-config may not be aware of cross-compilation, and require
         // a wrapper script that sets up platform-specific prefixes.
@@ -483,7 +474,12 @@ impl Config {
         } else {
             None
         };
-        let exe = pkg_config_exe.unwrap_or_else(|| OsString::from("pkg-config"));
+        //let exe = pkg_config_exe.unwrap_or_else(|| OsString::from("pkg-config"));
+        let exe = pkg_config_exe.unwrap_or_else(|| {
+            self.env_var_os("DEB_HOST_GNU_TYPE")
+                .map(|mut t| { t.push(OsString::from("-pkg-config")); t })
+                .unwrap_or_else(|| OsString::from("pkg-config"))
+        });
 
         let mut cmd = self.command(exe, name, args);
 
@@ -675,7 +671,7 @@ impl Library {
             }
         }
 
-        let system_roots = if cfg!(target_os = "macos") {
+        let system_roots = if cfg!(target_os = "macos") || cfg!(target_os = "ios") {
             vec![PathBuf::from("/Library"), PathBuf::from("/System")]
         } else {
             let sysroot = config
--- a/vendor/pkg-config/tests/test.rs	1707058325.000000000
+++ b/vendor/pkg-config/tests/test.rs	1709302481.720768900
@@ -31,7 +31,6 @@ fn find(name: &str) -> Result<pkg_config
     pkg_config::probe_library(name)
 }
 
-#[test]
 fn cross_disabled() {
     let _g = LOCK.lock();
     reset();
@@ -43,7 +42,6 @@ fn cross_disabled() {
     }
 }
 
-#[test]
 fn cross_enabled() {
     let _g = LOCK.lock();
     reset();
--- a/vendor/pkg-config-0.3.25/src/lib.rs	1707058325.000000000
+++ b/vendor/pkg-config-0.3.25/src/lib.rs	1709205423.264427294
@@ -171,7 +171,7 @@ impl fmt::Display for Error {
                     io::ErrorKind::NotFound => {
                         let crate_name =
                             std::env::var("CARGO_PKG_NAME").unwrap_or_else(|_| "sys".to_owned());
-                        let instructions = if cfg!(target_os = "macos") || cfg!(target_os = "ios") {
+                        let instructions = if cfg!(target_os = "macos") {
                             "Try `brew install pkg-config` if you have Homebrew.\n"
                         } else if cfg!(unix) {
                             "Try `apt install pkg-config`, or `yum install pkg-config`,\n\
@@ -575,7 +575,7 @@ impl Library {
             }
         }
 
-        let system_roots = if cfg!(target_os = "macos") {
+        let system_roots = if cfg!(any(target_os = "macos", target_os = "ios")) {
             vec![PathBuf::from("/Library"), PathBuf::from("/System")]
         } else {
             let sysroot = config
--- a/vendor/portable-atomic/src/imp/atomic128/aarch64.rs	1707058325.000000000
+++ b/vendor/portable-atomic/src/imp/atomic128/aarch64.rs	1709207164.858332989
@@ -128,7 +128,7 @@ mod detect;
 mod detect_aa64reg;
 #[cfg(test)]
 #[cfg(not(portable_atomic_no_outline_atomics))]
-#[cfg(target_os = "macos")]
+#[cfg(any(target_os = "macos", target_os = "ios"))]
 #[path = "detect/aarch64_macos.rs"]
 mod detect_macos;
 
--- a/vendor/portable-atomic/src/imp/atomic128/detect/common.rs	1707058325.000000000
+++ b/vendor/portable-atomic/src/imp/atomic128/detect/common.rs	1709207150.805887220
@@ -157,10 +157,10 @@ mod c_types {
     // AIX https://www.ibm.com/docs/en/xl-c-aix/13.1.2?topic=descriptions-qchars
     // z/OS https://www.ibm.com/docs/en/zos/2.5.0?topic=specifiers-character-types
     // (macOS is currently the only Apple target that uses this module, and Windows currently doesn't use this module)
-    #[cfg(not(target_os = "macos"))]
+    #[cfg(not(any(target_os = "macos", target_os = "ios")))]
     pub(crate) type c_char = u8;
     // c_char is i8 on all Apple targets
-    #[cfg(target_os = "macos")]
+    #[cfg(any(target_os = "macos", target_os = "ios"))]
     pub(crate) type c_char = i8;
 
     // Static assertions for C type definitions.
--- a/vendor/psm/build.rs	1707058325.000000000
+++ b/vendor/psm/build.rs	1709302821.964096378
@@ -50,7 +50,7 @@ fn find_assembly(
         ("sparc", _, _, _) => Some(("src/arch/sparc_sysv.s", true)),
         ("riscv32", _, _, _) => Some(("src/arch/riscv.s", true)),
         ("riscv64", _, _, _) => Some(("src/arch/riscv64.s", true)),
-        ("wasm32", _, _, _) => Some(("src/arch/wasm32.o", true)),
+        ("wasm32", _, _, _) => Some(("src/arch/wasm32.s", true)),
         ("loongarch64", _, _, _) => Some(("src/arch/loongarch64.s", true)),
         _ => None,
     }
@@ -97,11 +97,8 @@ fn main() {
         cfg.define(&*format!("CFG_TARGET_ENV_{}", env), None);
     }
 
-    // For wasm targets we ship a precompiled `*.o` file so we just pass that
-    // directly to `ar` to assemble an archive. Otherwise we're actually
-    // compiling the source assembly file.
     if asm.ends_with(".o") {
-        cfg.object(asm);
+        panic!("Debian does not allow embedded object files in source code")
     } else {
         cfg.file(asm);
     }
--- a/vendor/rustix/Cargo.toml	1707058325.000000000
+++ b/vendor/rustix/Cargo.toml	1709301761.555640394
@@ -67,6 +67,7 @@ targets = [
     "wasm32-unknown-emscripten",
     "wasm32-wasi",
 ]
+cc = []
 
 [[bench]]
 name = "mod"
--- a/vendor/rustix/src/backend/libc/fs/syscalls.rs	1707058325.000000000
+++ b/vendor/rustix/src/backend/libc/fs/syscalls.rs	1709209100.459079127
@@ -340,7 +340,7 @@ pub(crate) fn linkat(
     flags: AtFlags,
 ) -> io::Result<()> {
     // macOS <= 10.9 lacks `linkat`.
-    #[cfg(target_os = "macos")]
+    #[cfg(any(target_os = "macos", target_os = "ios"))]
     unsafe {
         weak! {
             fn linkat(
@@ -374,7 +374,7 @@ pub(crate) fn linkat(
         ret(c::link(c_str(old_path), c_str(new_path)))
     }
 
-    #[cfg(not(target_os = "macos"))]
+    #[cfg(not(any(target_os = "macos", target_os = "ios")))]
     unsafe {
         ret(c::linkat(
             borrowed_fd(old_dirfd),
@@ -397,7 +397,7 @@ pub(crate) fn unlink(path: &CStr) -> io:
 #[cfg(not(any(target_os = "espidf", target_os = "redox")))]
 pub(crate) fn unlinkat(dirfd: BorrowedFd<'_>, path: &CStr, flags: AtFlags) -> io::Result<()> {
     // macOS <= 10.9 lacks `unlinkat`.
-    #[cfg(target_os = "macos")]
+    #[cfg(any(target_os = "macos", target_os = "ios"))]
     unsafe {
         weak! {
             fn unlinkat(
@@ -428,7 +428,7 @@ pub(crate) fn unlinkat(dirfd: BorrowedFd
         }
     }
 
-    #[cfg(not(target_os = "macos"))]
+    #[cfg(not(any(target_os = "macos", target_os = "ios")))]
     unsafe {
         ret(c::unlinkat(
             borrowed_fd(dirfd),
@@ -450,7 +450,7 @@ pub(crate) fn renameat(
     new_path: &CStr,
 ) -> io::Result<()> {
     // macOS <= 10.9 lacks `renameat`.
-    #[cfg(target_os = "macos")]
+    #[cfg(any(target_os = "macos", target_os = "ios"))]
     unsafe {
         weak! {
             fn renameat(
@@ -476,7 +476,7 @@ pub(crate) fn renameat(
         ret(c::rename(c_str(old_path), c_str(new_path)))
     }
 
-    #[cfg(not(target_os = "macos"))]
+    #[cfg(not(any(target_os = "macos", target_os = "ios")))]
     unsafe {
         ret(c::renameat(
             borrowed_fd(old_dirfd),
@@ -736,7 +736,7 @@ pub(crate) fn accessat(
     flags: AtFlags,
 ) -> io::Result<()> {
     // macOS <= 10.9 lacks `faccessat`.
-    #[cfg(target_os = "macos")]
+    #[cfg(any(target_os = "macos", target_os = "ios"))]
     unsafe {
         weak! {
             fn faccessat(
@@ -768,7 +768,7 @@ pub(crate) fn accessat(
         ret(c::access(c_str(path), bitflags_bits!(access)))
     }
 
-    #[cfg(not(target_os = "macos"))]
+    #[cfg(not(any(target_os = "macos", target_os = "ios")))]
     unsafe {
         ret(c::faccessat(
             borrowed_fd(dirfd),
--- a/vendor/rustix/src/backend/libc/io/syscalls.rs	1707058325.000000000
+++ b/vendor/rustix/src/backend/libc/io/syscalls.rs	1709209058.185679428
@@ -198,9 +198,9 @@ pub(crate) fn pwritev2(
 // intentionally showing odd behavior by rejecting any read with a size larger
 // than or equal to `INT_MAX`. To handle both of these the read size is capped
 // on both platforms.
-#[cfg(target_os = "macos")]
+#[cfg(any(target_os = "macos", target_os = "ios"))]
 const READ_LIMIT: usize = c::c_int::MAX as usize - 1;
-#[cfg(not(target_os = "macos"))]
+#[cfg(not(any(target_os = "macos", target_os = "ios")))]
 const READ_LIMIT: usize = c::ssize_t::MAX as usize;
 
 pub(crate) unsafe fn close(raw_fd: RawFd) {
--- a/vendor/rustix/src/backend/libc/time/syscalls.rs	1707058325.000000000
+++ b/vendor/rustix/src/backend/libc/time/syscalls.rs	1709209079.649568686
@@ -232,7 +232,7 @@ fn clock_gettime_dynamic_old(id: c::cloc
 #[cfg(not(any(
     target_os = "redox",
     target_os = "wasi",
-    all(apple, not(target_os = "macos"))
+    all(apple, not(any(target_os = "macos", target_os = "ios")))
 )))]
 #[inline]
 pub(crate) fn clock_settime(id: ClockId, timespec: Timespec) -> io::Result<()> {
@@ -263,7 +263,7 @@ pub(crate) fn clock_settime(id: ClockId,
 #[cfg(not(any(
     target_os = "redox",
     target_os = "wasi",
-    all(apple, not(target_os = "macos"))
+    all(apple, not(any(target_os = "macos", target_os = "ios")))
 )))]
 #[cfg(fix_y2038)]
 fn clock_settime_old(id: ClockId, timespec: Timespec) -> io::Result<()> {
--- a/vendor/rustix/src/time/clock.rs	1707058325.000000000
+++ b/vendor/rustix/src/time/clock.rs	1709209110.287269808
@@ -100,7 +100,7 @@ pub fn clock_gettime_dynamic(id: Dynamic
 #[cfg(not(any(
     target_os = "redox",
     target_os = "wasi",
-    all(apple, not(target_os = "macos"))
+    all(apple, not(any(target_os = "macos", target_os = "ios")))
 )))]
 #[inline]
 pub fn clock_settime(id: ClockId, timespec: Timespec) -> io::Result<()> {
--- a/vendor/rustix-0.38.19/src/backend/libc/fs/syscalls.rs	1707058325.000000000
+++ b/vendor/rustix-0.38.19/src/backend/libc/fs/syscalls.rs	1709209574.465352179
@@ -332,7 +332,7 @@ pub(crate) fn linkat(
     flags: AtFlags,
 ) -> io::Result<()> {
     // macOS <= 10.9 lacks `linkat`.
-    #[cfg(target_os = "macos")]
+    #[cfg(any(target_os = "macos", target_os = "ios"))]
     unsafe {
         weak! {
             fn linkat(
@@ -366,7 +366,7 @@ pub(crate) fn linkat(
         ret(c::link(c_str(old_path), c_str(new_path)))
     }
 
-    #[cfg(not(target_os = "macos"))]
+    #[cfg(not(any(target_os = "macos", target_os = "ios")))]
     unsafe {
         ret(c::linkat(
             borrowed_fd(old_dirfd),
@@ -389,7 +389,7 @@ pub(crate) fn unlink(path: &CStr) -> io:
 #[cfg(not(any(target_os = "espidf", target_os = "redox")))]
 pub(crate) fn unlinkat(dirfd: BorrowedFd<'_>, path: &CStr, flags: AtFlags) -> io::Result<()> {
     // macOS <= 10.9 lacks `unlinkat`.
-    #[cfg(target_os = "macos")]
+    #[cfg(any(target_os = "macos", target_os = "ios"))]
     unsafe {
         weak! {
             fn unlinkat(
@@ -420,7 +420,7 @@ pub(crate) fn unlinkat(dirfd: BorrowedFd
         }
     }
 
-    #[cfg(not(target_os = "macos"))]
+    #[cfg(not(any(target_os = "macos", target_os = "ios")))]
     unsafe {
         ret(c::unlinkat(
             borrowed_fd(dirfd),
@@ -442,7 +442,7 @@ pub(crate) fn renameat(
     new_path: &CStr,
 ) -> io::Result<()> {
     // macOS <= 10.9 lacks `renameat`.
-    #[cfg(target_os = "macos")]
+    #[cfg(any(target_os = "macos", target_os = "ios"))]
     unsafe {
         weak! {
             fn renameat(
@@ -468,7 +468,7 @@ pub(crate) fn renameat(
         ret(c::rename(c_str(old_path), c_str(new_path)))
     }
 
-    #[cfg(not(target_os = "macos"))]
+    #[cfg(not(any(target_os = "macos", target_os = "ios")))]
     unsafe {
         ret(c::renameat(
             borrowed_fd(old_dirfd),
@@ -701,7 +701,7 @@ pub(crate) fn accessat(
     flags: AtFlags,
 ) -> io::Result<()> {
     // macOS <= 10.9 lacks `faccessat`.
-    #[cfg(target_os = "macos")]
+    #[cfg(any(target_os = "macos", target_os = "ios"))]
     unsafe {
         weak! {
             fn faccessat(
@@ -733,7 +733,7 @@ pub(crate) fn accessat(
         ret(c::access(c_str(path), bitflags_bits!(access)))
     }
 
-    #[cfg(not(target_os = "macos"))]
+    #[cfg(not(any(target_os = "macos", target_os = "ios")))]
     unsafe {
         ret(c::faccessat(
             borrowed_fd(dirfd),
--- a/vendor/rustix-0.38.19/src/backend/libc/io/syscalls.rs	1707058325.000000000
+++ b/vendor/rustix-0.38.19/src/backend/libc/io/syscalls.rs	1709209553.717460387
@@ -195,9 +195,9 @@ pub(crate) fn pwritev2(
 // intentionally showing odd behavior by rejecting any read with a size larger
 // than or equal to `INT_MAX`. To handle both of these the read size is capped
 // on both platforms.
-#[cfg(target_os = "macos")]
+#[cfg(any(target_os = "macos", target_os = "ios"))]
 const READ_LIMIT: usize = c::c_int::MAX as usize - 1;
-#[cfg(not(target_os = "macos"))]
+#[cfg(not(any(target_os = "macos", target_os = "ios")))]
 const READ_LIMIT: usize = c::ssize_t::MAX as usize;
 
 pub(crate) unsafe fn close(raw_fd: RawFd) {
--- a/vendor/rustix-0.38.19/src/backend/libc/time/syscalls.rs	1707058325.000000000
+++ b/vendor/rustix-0.38.19/src/backend/libc/time/syscalls.rs	1709209565.819274766
@@ -232,7 +232,7 @@ fn clock_gettime_dynamic_old(id: c::cloc
 #[cfg(not(any(
     target_os = "redox",
     target_os = "wasi",
-    all(apple, not(target_os = "macos"))
+    all(apple, not(any(target_os = "macos", target_os = "ios")))
 )))]
 #[inline]
 pub(crate) fn clock_settime(id: ClockId, timespec: Timespec) -> io::Result<()> {
@@ -263,7 +263,7 @@ pub(crate) fn clock_settime(id: ClockId,
 #[cfg(not(any(
     target_os = "redox",
     target_os = "wasi",
-    all(apple, not(target_os = "macos"))
+    all(apple, not(any(target_os = "macos", target_os = "ios")))
 )))]
 #[cfg(fix_y2038)]
 fn clock_settime_old(id: ClockId, timespec: Timespec) -> io::Result<()> {
--- a/vendor/rustix-0.38.19/src/time/clock.rs	1707058325.000000000
+++ b/vendor/rustix-0.38.19/src/time/clock.rs	1709209581.583108685
@@ -100,7 +100,7 @@ pub fn clock_gettime_dynamic(id: Dynamic
 #[cfg(not(any(
     target_os = "redox",
     target_os = "wasi",
-    all(apple, not(target_os = "macos"))
+    all(apple, not(any(target_os = "macos", target_os = "ios")))
 )))]
 #[inline]
 pub fn clock_settime(id: ClockId, timespec: Timespec) -> io::Result<()> {
--- a/vendor/stacker/src/lib.rs	1707058325.000000000
+++ b/vendor/stacker/src/lib.rs	1709204494.436932855
@@ -442,7 +442,7 @@ cfg_if! {
             assert_eq!(libc::pthread_stackseg_np(libc::pthread_self(), stackinfo.as_mut_ptr()), 0);
             Some(stackinfo.assume_init().ss_sp as usize - stackinfo.assume_init().ss_size)
         }
-    } else if #[cfg(target_os = "macos")] {
+    } else if #[cfg(any(target_os = "macos", target_os = "ios"))] {
         unsafe fn guess_os_stack_limit() -> Option<usize> {
             Some(libc::pthread_get_stackaddr_np(libc::pthread_self()) as usize -
                 libc::pthread_get_stacksize_np(libc::pthread_self()) as usize)
--- a/vendor/sysinfo/src/apple/disk.rs	1707058325.000000000
+++ b/vendor/sysinfo/src/apple/disk.rs	1709208634.999923365
@@ -233,7 +233,7 @@ fn get_available_volume_space(disk_props
 
 pub(super) enum DictKey {
     Extern(CFStringRef),
-    #[cfg(target_os = "macos")]
+    #[cfg(any(target_os = "macos", target_os = "ios"))]
     Defined(&'static str),
 }
 
@@ -242,11 +242,11 @@ unsafe fn get_dict_value<T, F: FnOnce(*c
     key: DictKey,
     callback: F,
 ) -> Option<T> {
-    #[cfg(target_os = "macos")]
+    #[cfg(any(target_os = "macos", target_os = "ios"))]
     let _defined;
     let key = match key {
         DictKey::Extern(val) => val,
-        #[cfg(target_os = "macos")]
+        #[cfg(any(target_os = "macos", target_os = "ios"))]
         DictKey::Defined(val) => {
             _defined = CFReleaser::new(cfs::CFStringCreateWithBytesNoCopy(
                 kCFAllocatorDefault,
@@ -327,9 +327,9 @@ unsafe fn new_disk(
     // Due to this, we can't query the medium type. All iOS devices use flash-based storage
     // so we just assume the disk type is an SSD until Rust has a way to conditionally link to
     // IOKit in more recent deployment versions.
-    #[cfg(target_os = "macos")]
+    #[cfg(any(target_os = "macos", target_os = "ios"))]
     let type_ = crate::sys::inner::disk::get_disk_type(&c_disk).unwrap_or(DiskKind::Unknown(-1));
-    #[cfg(not(target_os = "macos"))]
+    #[cfg(not(any(target_os = "macos", target_os = "ios")))]
     let type_ = DiskKind::SSD;
 
     // Note: Since we requested these properties from the system, we don't expect
--- a/vendor/sysinfo/src/apple/mod.rs	1707058325.000000000
+++ b/vendor/sysinfo/src/apple/mod.rs	1709208779.880228695
@@ -1,17 +1,17 @@
 // Take a look at the license at the top of the repository in the LICENSE file.
 
-#[cfg(target_os = "macos")]
+#[cfg(any(target_os = "macos", target_os = "ios"))]
 pub(crate) mod macos;
 
-#[cfg(target_os = "macos")]
+#[cfg(any(target_os = "macos", target_os = "ios"))]
 pub(crate) use self::macos as inner;
 
-#[cfg(target_os = "ios")]
-pub(crate) mod ios;
-#[cfg(target_os = "ios")]
-pub(crate) use self::ios as inner;
+//#[cfg(target_os = "ios")]
+//pub(crate) mod ios;
+//#[cfg(target_os = "ios")]
+//pub(crate) use self::ios as inner;
 
-#[cfg(any(target_os = "ios", feature = "apple-sandbox"))]
+#[cfg(feature = "apple-sandbox")]
 pub(crate) mod app_store;
 
 pub mod component;
--- a/vendor/sysinfo/src/apple/system.rs	1707058325.000000000
+++ b/vendor/sysinfo/src/apple/system.rs	1709208581.957335861
@@ -10,7 +10,7 @@ use crate::{
     CpuExt, CpuRefreshKind, LoadAvg, Pid, ProcessRefreshKind, RefreshKind, SystemExt, User,
 };
 
-#[cfg(all(target_os = "macos", not(feature = "apple-sandbox")))]
+#[cfg(all(any(target_os = "macos", target_os = "ios"), not(feature = "apple-sandbox")))]
 use crate::ProcessExt;
 
 use std::cell::UnsafeCell;
@@ -18,10 +18,10 @@ use std::collections::HashMap;
 use std::mem;
 use std::sync::Arc;
 use std::time::Duration;
-#[cfg(all(target_os = "macos", not(feature = "apple-sandbox")))]
+#[cfg(all(any(target_os = "macos", target_os = "ios"), not(feature = "apple-sandbox")))]
 use std::time::SystemTime;
 
-#[cfg(all(target_os = "macos", not(feature = "apple-sandbox")))]
+#[cfg(all(any(target_os = "macos", target_os = "ios"), not(feature = "apple-sandbox")))]
 use libc::size_t;
 
 use libc::{
@@ -32,7 +32,7 @@ use libc::{
 #[cfg(not(any(target_os = "ios", feature = "apple-sandbox")))]
 use super::inner::component::Components;
 
-#[cfg(all(target_os = "macos", not(feature = "apple-sandbox")))]
+#[cfg(all(any(target_os = "macos", target_os = "ios"), not(feature = "apple-sandbox")))]
 declare_signals! {
     c_int,
     Signal::Hangup => libc::SIGHUP,
@@ -88,14 +88,14 @@ pub struct System {
     global_cpu: Cpu,
     cpus: Vec<Cpu>,
     page_size_kb: u64,
-    #[cfg(not(any(target_os = "ios", feature = "apple-sandbox")))]
+    #[cfg(not(feature = "apple-sandbox"))]
     components: Components,
     disks: Vec<Disk>,
     networks: Networks,
     port: mach_port_t,
     users: Vec<User>,
     boot_time: u64,
-    #[cfg(all(target_os = "macos", not(feature = "apple-sandbox")))]
+    #[cfg(all(any(target_os = "macos", target_os = "ios"), not(feature = "apple-sandbox")))]
     clock_info: Option<crate::sys::macos::system::SystemTimeInfo>,
     got_cpu_frequency: bool,
 }
@@ -130,7 +130,7 @@ fn boot_time() -> u64 {
     }
 }
 
-#[cfg(all(target_os = "macos", not(feature = "apple-sandbox")))]
+#[cfg(all(any(target_os = "macos", target_os = "ios"), not(feature = "apple-sandbox")))]
 fn get_now() -> u64 {
     SystemTime::now()
         .duration_since(SystemTime::UNIX_EPOCH)
@@ -164,14 +164,14 @@ impl SystemExt for System {
                 ),
                 cpus: Vec::new(),
                 page_size_kb: sysconf(_SC_PAGESIZE) as _,
-                #[cfg(not(any(target_os = "ios", feature = "apple-sandbox")))]
+                #[cfg(not(feature = "apple-sandbox"))]
                 components: Components::new(),
                 disks: Vec::with_capacity(1),
                 networks: Networks::new(),
                 port,
                 users: Vec::new(),
                 boot_time: boot_time(),
-                #[cfg(all(target_os = "macos", not(feature = "apple-sandbox")))]
+                #[cfg(all(any(target_os = "macos", target_os = "ios"), not(feature = "apple-sandbox")))]
                 clock_info: crate::sys::macos::system::SystemTimeInfo::new(port),
                 got_cpu_frequency: false,
             };
@@ -241,10 +241,10 @@ impl SystemExt for System {
         }
     }
 
-    #[cfg(any(target_os = "ios", feature = "apple-sandbox"))]
+    #[cfg(feature = "apple-sandbox")]
     fn refresh_components_list(&mut self) {}
 
-    #[cfg(not(any(target_os = "ios", feature = "apple-sandbox")))]
+    #[cfg(not(feature = "apple-sandbox"))]
     fn refresh_components_list(&mut self) {
         self.components.refresh();
     }
@@ -279,10 +279,10 @@ impl SystemExt for System {
         }
     }
 
-    #[cfg(any(target_os = "ios", feature = "apple-sandbox"))]
+    #[cfg(feature = "apple-sandbox")]
     fn refresh_processes_specifics(&mut self, _refresh_kind: ProcessRefreshKind) {}
 
-    #[cfg(all(target_os = "macos", not(feature = "apple-sandbox")))]
+    #[cfg(all(any(target_os = "macos", target_os = "ios"), not(feature = "apple-sandbox")))]
     fn refresh_processes_specifics(&mut self, refresh_kind: ProcessRefreshKind) {
         use crate::utils::into_iter;
 
@@ -328,12 +328,12 @@ impl SystemExt for System {
         }
     }
 
-    #[cfg(any(target_os = "ios", feature = "apple-sandbox"))]
+    #[cfg(feature = "apple-sandbox")]
     fn refresh_process_specifics(&mut self, _pid: Pid, _refresh_kind: ProcessRefreshKind) -> bool {
         false
     }
 
-    #[cfg(all(target_os = "macos", not(feature = "apple-sandbox")))]
+    #[cfg(all(any(target_os = "macos", target_os = "ios"), not(feature = "apple-sandbox")))]
     fn refresh_process_specifics(&mut self, pid: Pid, refresh_kind: ProcessRefreshKind) -> bool {
         let mut time_interval = None;
         let arg_max = get_arg_max();
@@ -445,22 +445,22 @@ impl SystemExt for System {
         self.swap_total - self.swap_free
     }
 
-    #[cfg(not(any(target_os = "ios", feature = "apple-sandbox")))]
+    #[cfg(not(feature = "apple-sandbox"))]
     fn components(&self) -> &[Component] {
         &self.components.inner
     }
 
-    #[cfg(any(target_os = "ios", feature = "apple-sandbox"))]
+    #[cfg(feature = "apple-sandbox")]
     fn components(&self) -> &[Component] {
         &[]
     }
 
-    #[cfg(not(any(target_os = "ios", feature = "apple-sandbox")))]
+    #[cfg(not(feature = "apple-sandbox"))]
     fn components_mut(&mut self) -> &mut [Component] {
         &mut self.components.inner
     }
 
-    #[cfg(any(target_os = "ios", feature = "apple-sandbox"))]
+    #[cfg(feature = "apple-sandbox")]
     fn components_mut(&mut self) -> &mut [Component] {
         &mut []
     }
@@ -606,7 +606,7 @@ impl Default for System {
     }
 }
 
-#[cfg(all(target_os = "macos", not(feature = "apple-sandbox")))]
+#[cfg(all(any(target_os = "macos", target_os = "ios"), not(feature = "apple-sandbox")))]
 fn get_arg_max() -> usize {
     let mut mib = [libc::CTL_KERN, libc::KERN_ARGMAX];
     let mut arg_max = 0i32;
--- a/vendor/sysinfo/src/utils.rs	1707058325.000000000
+++ b/vendor/sysinfo/src/utils.rs	1709208907.796269552
@@ -7,6 +7,7 @@
         any(
             target_os = "linux",
             target_os = "android",
+            target_os = "ios",
             target_os = "macos",
             target_os = "windows",
             target_os = "freebsd",
@@ -30,6 +31,7 @@ where
         any(
             target_os = "linux",
             target_os = "android",
+            target_os = "ios",
             target_os = "macos",
             target_os = "windows",
             target_os = "freebsd",
--- a/vendor/sysinfo-0.26.7/src/apple/disk.rs	1707058325.000000000
+++ b/vendor/sysinfo-0.26.7/src/apple/disk.rs	1709209271.506644998
@@ -233,7 +233,7 @@ fn get_available_volume_space(disk_props
 
 pub(super) enum DictKey {
     Extern(CFStringRef),
-    #[cfg(target_os = "macos")]
+    #[cfg(any(target_os = "macos", target_os = "ios"))]
     Defined(&'static str),
 }
 
@@ -242,11 +242,11 @@ unsafe fn get_dict_value<T, F: FnOnce(*c
     key: DictKey,
     callback: F,
 ) -> Option<T> {
-    #[cfg(target_os = "macos")]
+    #[cfg(any(target_os = "macos", target_os = "ios"))]
     let _defined;
     let key = match key {
         DictKey::Extern(val) => val,
-        #[cfg(target_os = "macos")]
+        #[cfg(any(target_os = "macos", target_os = "ios"))]
         DictKey::Defined(val) => {
             _defined = CFReleaser::new(cfs::CFStringCreateWithBytesNoCopy(
                 kCFAllocatorDefault,
@@ -327,9 +327,9 @@ unsafe fn new_disk(
     // Due to this, we can't query the medium type. All iOS devices use flash-based storage
     // so we just assume the disk type is an SSD until Rust has a way to conditionally link to
     // IOKit in more recent deployment versions.
-    #[cfg(target_os = "macos")]
+    #[cfg(any(target_os = "macos", target_os = "ios"))]
     let type_ = crate::sys::inner::disk::get_disk_type(&c_disk).unwrap_or(DiskType::Unknown(-1));
-    #[cfg(not(target_os = "macos"))]
+    #[cfg(not(any(target_os = "macos", target_os = "ios")))]
     let type_ = DiskType::SSD;
 
     // Note: Since we requested these properties from the system, we don't expect
--- a/vendor/sysinfo-0.26.7/src/apple/mod.rs	1707058325.000000000
+++ b/vendor/sysinfo-0.26.7/src/apple/mod.rs	1709209290.285214939
@@ -1,17 +1,17 @@
 // Take a look at the license at the top of the repository in the LICENSE file.
 
-#[cfg(target_os = "macos")]
+#[cfg(any(target_os = "macos", target_os = "ios"))]
 pub(crate) mod macos;
 
-#[cfg(target_os = "macos")]
+#[cfg(any(target_os = "macos", target_os = "ios"))]
 pub(crate) use self::macos as inner;
 
-#[cfg(target_os = "ios")]
-pub(crate) mod ios;
-#[cfg(target_os = "ios")]
-pub(crate) use self::ios as inner;
+//#[cfg(target_os = "ios")]
+//pub(crate) mod ios;
+//#[cfg(target_os = "ios")]
+//pub(crate) use self::ios as inner;
 
-#[cfg(any(target_os = "ios", feature = "apple-sandbox"))]
+#[cfg(all(target_os = "ios", feature = "apple-sandbox"))]
 pub(crate) mod app_store;
 
 pub mod component;
--- a/vendor/sysinfo-0.26.7/src/apple/system.rs	1707058325.000000000
+++ b/vendor/sysinfo-0.26.7/src/apple/system.rs	1709209251.277097062
@@ -10,17 +10,17 @@ use crate::{
     CpuExt, CpuRefreshKind, LoadAvg, Pid, ProcessRefreshKind, RefreshKind, SystemExt, User,
 };
 
-#[cfg(all(target_os = "macos", not(feature = "apple-sandbox")))]
+#[cfg(all(any(target_os = "macos", target_os = "ios"), not(feature = "apple-sandbox")))]
 use crate::ProcessExt;
 
 use std::cell::UnsafeCell;
 use std::collections::HashMap;
 use std::mem;
 use std::sync::Arc;
-#[cfg(all(target_os = "macos", not(feature = "apple-sandbox")))]
+#[cfg(all(any(target_os = "macos", target_os = "ios"), not(feature = "apple-sandbox")))]
 use std::time::SystemTime;
 
-#[cfg(all(target_os = "macos", not(feature = "apple-sandbox")))]
+#[cfg(all(any(target_os = "macos", target_os = "ios"), not(feature = "apple-sandbox")))]
 use libc::size_t;
 
 use libc::{
@@ -28,10 +28,10 @@ use libc::{
     vm_statistics64, _SC_PAGESIZE,
 };
 
-#[cfg(not(any(target_os = "ios", feature = "apple-sandbox")))]
+#[cfg(not(all(target_os = "ios", feature = "apple-sandbox")))]
 use super::inner::component::Components;
 
-#[cfg(all(target_os = "macos", not(feature = "apple-sandbox")))]
+#[cfg(all(any(target_os = "macos", target_os = "ios"), not(feature = "apple-sandbox")))]
 declare_signals! {
     c_int,
     Signal::Hangup => libc::SIGHUP,
@@ -69,7 +69,7 @@ declare_signals! {
     Signal::Sys => libc::SIGSYS,
     _ => None,
 }
-#[cfg(any(target_os = "ios", feature = "apple-sandbox"))]
+#[cfg(all(target_os = "ios", feature = "apple-sandbox"))]
 declare_signals! {
     c_int,
     _ => None,
@@ -86,14 +86,14 @@ pub struct System {
     global_cpu: Cpu,
     cpus: Vec<Cpu>,
     page_size_kb: u64,
-    #[cfg(not(any(target_os = "ios", feature = "apple-sandbox")))]
+    #[cfg(not(all(target_os = "ios", feature = "apple-sandbox")))]
     components: Components,
     disks: Vec<Disk>,
     networks: Networks,
     port: mach_port_t,
     users: Vec<User>,
     boot_time: u64,
-    #[cfg(all(target_os = "macos", not(feature = "apple-sandbox")))]
+    #[cfg(all(any(target_os = "macos", target_os = "ios"), not(feature = "apple-sandbox")))]
     clock_info: Option<crate::sys::macos::system::SystemTimeInfo>,
     got_cpu_frequency: bool,
 }
@@ -128,7 +128,7 @@ fn boot_time() -> u64 {
     }
 }
 
-#[cfg(all(target_os = "macos", not(feature = "apple-sandbox")))]
+#[cfg(all(any(target_os = "macos", target_os = "ios"), not(feature = "apple-sandbox")))]
 fn get_now() -> u64 {
     SystemTime::now()
         .duration_since(SystemTime::UNIX_EPOCH)
@@ -160,14 +160,14 @@ impl SystemExt for System {
                 ),
                 cpus: Vec::new(),
                 page_size_kb: sysconf(_SC_PAGESIZE) as _,
-                #[cfg(not(any(target_os = "ios", feature = "apple-sandbox")))]
+                #[cfg(not(all(target_os = "ios", feature = "apple-sandbox")))]
                 components: Components::new(),
                 disks: Vec::with_capacity(1),
                 networks: Networks::new(),
                 port,
                 users: Vec::new(),
                 boot_time: boot_time(),
-                #[cfg(all(target_os = "macos", not(feature = "apple-sandbox")))]
+                #[cfg(all(any(target_os = "macos", target_os = "ios"), not(feature = "apple-sandbox")))]
                 clock_info: crate::sys::macos::system::SystemTimeInfo::new(port),
                 got_cpu_frequency: false,
             };
@@ -233,10 +233,10 @@ impl SystemExt for System {
         }
     }
 
-    #[cfg(any(target_os = "ios", feature = "apple-sandbox"))]
+    #[cfg(all(target_os = "ios", feature = "apple-sandbox"))]
     fn refresh_components_list(&mut self) {}
 
-    #[cfg(not(any(target_os = "ios", feature = "apple-sandbox")))]
+    #[cfg(not(all(target_os = "ios", feature = "apple-sandbox")))]
     fn refresh_components_list(&mut self) {
         self.components.refresh();
     }
@@ -271,10 +271,10 @@ impl SystemExt for System {
         }
     }
 
-    #[cfg(any(target_os = "ios", feature = "apple-sandbox"))]
+    #[cfg(all(target_os = "ios", feature = "apple-sandbox"))]
     fn refresh_processes_specifics(&mut self, _refresh_kind: ProcessRefreshKind) {}
 
-    #[cfg(all(target_os = "macos", not(feature = "apple-sandbox")))]
+    #[cfg(all(any(target_os = "macos", target_os = "ios"), not(feature = "apple-sandbox")))]
     fn refresh_processes_specifics(&mut self, refresh_kind: ProcessRefreshKind) {
         use crate::utils::into_iter;
 
@@ -320,12 +320,12 @@ impl SystemExt for System {
         }
     }
 
-    #[cfg(any(target_os = "ios", feature = "apple-sandbox"))]
+    #[cfg(all(target_os = "ios", feature = "apple-sandbox"))]
     fn refresh_process_specifics(&mut self, _pid: Pid, _refresh_kind: ProcessRefreshKind) -> bool {
         false
     }
 
-    #[cfg(all(target_os = "macos", not(feature = "apple-sandbox")))]
+    #[cfg(all(any(target_os = "macos", target_os = "ios"), not(feature = "apple-sandbox")))]
     fn refresh_process_specifics(&mut self, pid: Pid, refresh_kind: ProcessRefreshKind) -> bool {
         let now = get_now();
         let arg_max = get_arg_max();
@@ -433,22 +433,22 @@ impl SystemExt for System {
         self.swap_total - self.swap_free
     }
 
-    #[cfg(not(any(target_os = "ios", feature = "apple-sandbox")))]
+    #[cfg(not(all(target_os = "ios", feature = "apple-sandbox")))]
     fn components(&self) -> &[Component] {
         &self.components.inner
     }
 
-    #[cfg(any(target_os = "ios", feature = "apple-sandbox"))]
+    #[cfg(all(target_os = "ios", feature = "apple-sandbox"))]
     fn components(&self) -> &[Component] {
         &[]
     }
 
-    #[cfg(not(any(target_os = "ios", feature = "apple-sandbox")))]
+    #[cfg(not(all(target_os = "ios", feature = "apple-sandbox")))]
     fn components_mut(&mut self) -> &mut [Component] {
         &mut self.components.inner
     }
 
-    #[cfg(any(target_os = "ios", feature = "apple-sandbox"))]
+    #[cfg(all(target_os = "ios", feature = "apple-sandbox"))]
     fn components_mut(&mut self) -> &mut [Component] {
         &mut []
     }
@@ -594,7 +594,7 @@ impl Default for System {
     }
 }
 
-#[cfg(all(target_os = "macos", not(feature = "apple-sandbox")))]
+#[cfg(all(any(target_os = "macos", target_os = "ios"), not(feature = "apple-sandbox")))]
 fn get_arg_max() -> usize {
     let mut mib = [libc::CTL_KERN, libc::KERN_ARGMAX];
     let mut arg_max = 0i32;
--- a/vendor/sysinfo-0.26.7/src/utils.rs	1707058325.000000000
+++ b/vendor/sysinfo-0.26.7/src/utils.rs	1709209331.584351139
@@ -7,6 +7,7 @@
         any(
             target_os = "linux",
             target_os = "android",
+            target_os = "ios",
             target_os = "macos",
             target_os = "windows",
             target_os = "freebsd",
@@ -30,6 +31,7 @@ where
         any(
             target_os = "linux",
             target_os = "android",
+            target_os = "ios",
             target_os = "macos",
             target_os = "windows",
             target_os = "freebsd",
--- a/vendor/tikv-jemalloc-ctl/src/macros.rs	1707058325.000000000
+++ b/vendor/tikv-jemalloc-ctl/src/macros.rs	1709206227.895244413
@@ -69,7 +69,7 @@ macro_rules! r {
                 match stringify!($id) {
                     "background_thread" |
                     "max_background_threads"
-                    if cfg!(target_os = "macos") => return,
+                    if cfg!(any(target_os = "macos", target_os = "ios")) => return,
                     _ => (),
                 }
 
@@ -117,7 +117,7 @@ macro_rules! w {
                 match stringify!($id) {
                     "background_thread" |
                     "max_background_threads"
-                        if cfg!(target_os = "macos") => return,
+                        if cfg!(any(target_os = "macos", target_os = "ios")) => return,
                     _ => (),
                 }
 
@@ -167,7 +167,7 @@ macro_rules! u {
                 match stringify!($id) {
                     "background_thread" |
                     "max_background_threads"
-                        if cfg!(target_os = "macos") => return,
+                        if cfg!(any(target_os = "macos", target_os = "ios")) => return,
                     _ => (),
                 }
 
--- a/vendor/time-0.3.22/src/sys/local_offset_at/unix.rs	1707058325.000000000
+++ b/vendor/time-0.3.22/src/sys/local_offset_at/unix.rs	1709204545.270935823
@@ -18,6 +18,7 @@ const OS_HAS_THREAD_SAFE_ENVIRONMENT: bo
     // https://github.com/apple-oss-distributions/Libc/blob/d526593760f0f79dfaeb8b96c3c8a42c791156ff/stdlib/FreeBSD/getenv.c
     // https://github.com/apple-oss-distributions/Libc/blob/d526593760f0f79dfaeb8b96c3c8a42c791156ff/stdlib/FreeBSD/setenv.c
     | b"macos"
+    | b"ios"
     => true,
     _ => false,
 };
--- a/vendor/tokio/src/signal/unix.rs	1707058325.000000000
+++ b/vendor/tokio/src/signal/unix.rs	1709206102.154689937
@@ -128,6 +128,7 @@ impl SignalKind {
     #[cfg(any(
         target_os = "dragonfly",
         target_os = "freebsd",
+        target_os = "ios",
         target_os = "macos",
         target_os = "netbsd",
         target_os = "openbsd"
--- a/vendor/wasmtime-jit-icache-coherence/Cargo.toml	1707058325.000000000
+++ b/vendor/wasmtime-jit-icache-coherence/Cargo.toml	1709120825.493942092
@@ -25,7 +25,7 @@ version = "1.0"
 [features]
 one-core = []
 
-[target."cfg(any(target_os = \"linux\", target_os = \"macos\", target_os = \"freebsd\", target_os = \"android\"))".dependencies.libc]
+[target."cfg(any(target_os = \"linux\", target_os = \"macos\", target_os = \"ios\", target_os = \"freebsd\", target_os = \"android\"))".dependencies.libc]
 version = "0.2.42"
 
 [target."cfg(target_os = \"windows\")".dependencies.windows-sys]
--- a/vendor/xattr/src/sys/linux_macos/mod.rs	1707058326.000000000
+++ b/vendor/xattr/src/sys/linux_macos/mod.rs	1709209759.847151446
@@ -4,10 +4,10 @@ mod linux;
 #[cfg(any(target_os = "linux", target_os = "android"))]
 use self::linux::*;
 
-#[cfg(target_os = "macos")]
+#[cfg(any(target_os = "macos", target_os = "ios"))]
 mod macos;
 
-#[cfg(target_os = "macos")]
+#[cfg(any(target_os = "macos", target_os = "ios"))]
 use self::macos::*;
 
 use std::ffi::{OsStr, OsString};
--- a/vendor/xattr/src/sys/mod.rs	1707058326.000000000
+++ b/vendor/xattr/src/sys/mod.rs	1709283194.681326699
@@ -35,6 +35,6 @@ macro_rules! platforms {
 }
 
 platforms! {
-    "android"; "linux"; "macos" => linux_macos,
+    "android"; "linux"; "macos"; "ios" => linux_macos,
     "freebsd"; "netbsd" => bsd
 }
