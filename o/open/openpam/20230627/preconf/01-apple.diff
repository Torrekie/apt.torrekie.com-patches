--- a/doc/man/Makefile.am	1664721945.000000000
+++ b/doc/man/Makefile.am	1697097484.153905550
@@ -19,6 +19,7 @@ PAM_MAN = \
 	pam_setcred.3 \
 	pam_start.3 \
 	pam_strerror.3 \
+	pam_unsetenv.3 \
 	$(NULL)
 
 # Standard module API
--- a/doc/man/openpam_log.3	1687884098.000000000
+++ b/doc/man/openpam_log.3	1697104057.656620080
@@ -28,11 +28,7 @@ Debugging messages.
 For internal use only.
 .It Dv PAM_LOG_DEBUG
 Debugging messages.
-These messages are normally not logged unless the global
-integer variable
-.Va openpam_debug
-is set to a non-zero
-value, in which case they are logged with a
+These messages are logged with a
 .Xr syslog 3
 priority of
 .Dv LOG_DEBUG .
--- a/doc/man/pam.3	1687884116.000000000
+++ b/doc/man/pam.3	1697101740.177690911
@@ -19,7 +19,8 @@
 .Nm pam_set_item ,
 .Nm pam_setcred ,
 .Nm pam_start ,
-.Nm pam_strerror
+.Nm pam_strerror ,
+.Nm pam_unsetenv
 .Nd Pluggable Authentication Modules Library
 .Sh LIBRARY
 .Lb libpam
@@ -59,6 +60,8 @@
 .Fn pam_start "const char *service" "const char *user" "const struct pam_conv *pam_conv" "pam_handle_t **pamh"
 .Ft "const char *"
 .Fn pam_strerror "const pam_handle_t *pamh" "int error_number"
+.Ft "int"
+.Fn pam_unsetenv "pam_handle_t *pamh" "const char *name"
 .Sh DESCRIPTION
 The Pluggable Authentication Modules (PAM) library abstracts a number
 of common authentication-related operations and provides a framework
@@ -247,7 +250,8 @@ Unknown user.
 .Xr pam_set_data 3 ,
 .Xr pam_set_item 3 ,
 .Xr pam_start 3 ,
-.Xr pam_strerror 3
+.Xr pam_strerror 3 ,
+.Xr pam_unsetenv 3
 .Sh STANDARDS
 .Rs
 .%T "X/Open Single Sign-On Service (XSSO) - Pluggable Authentication Modules"
--- a/doc/man/pam_getenv.3	1687884098.000000000
+++ b/doc/man/pam_getenv.3	1697101739.047216633
@@ -30,7 +30,8 @@ on failure.
 .Xr pam 3 ,
 .Xr pam_getenvlist 3 ,
 .Xr pam_putenv 3 ,
-.Xr pam_setenv 3
+.Xr pam_setenv 3 ,
+.Xr pam_unsetenv 3
 .Sh STANDARDS
 .Rs
 .%T "X/Open Single Sign-On Service (XSSO) - Pluggable Authentication Modules"
--- a/doc/man/pam_getenvlist.3	1687884098.000000000
+++ b/doc/man/pam_getenvlist.3	1697101739.027780715
@@ -51,6 +51,7 @@ on failure.
 .Xr pam_getenv 3 ,
 .Xr pam_putenv 3 ,
 .Xr pam_setenv 3 ,
+.Xr pam_unsetenv 3 ,
 .Xr environ 7
 .Sh STANDARDS
 .Rs
--- a/doc/man/pam_putenv.3	1687884098.000000000
+++ b/doc/man/pam_putenv.3	1697101739.047229508
@@ -37,6 +37,7 @@ System error.
 .Xr pam_getenvlist 3 ,
 .Xr pam_setenv 3 ,
 .Xr pam_strerror 3 ,
+.Xr pam_unsetenv 3 ,
 .Xr putenv 3
 .Sh STANDARDS
 .Rs
--- a/include/security/openpam.h	1664721945.000000000
+++ b/include/security/openpam.h	1697097484.159972222
@@ -43,6 +43,8 @@
 
 #include <security/openpam_attr.h>
 
+#include <Availability.h>
+
 #ifdef __cplusplus
 extern "C" {
 #endif
@@ -122,6 +124,11 @@ pam_setenv(pam_handle_t *_pamh,
 	OPENPAM_NONNULL((1,2,3));
 
 int
+pam_unsetenv(pam_handle_t *_pamh,
+	const char *_name)
+	OPENPAM_NONNULL((1,2));
+
+int
 pam_vinfo(const pam_handle_t *_pamh,
 	const char *_fmt,
 	va_list _ap)
@@ -258,6 +265,16 @@ int openpam_nullconv(int _n,
 	void *_data);
 
 /*
+ * Misc conversation function
+ * This function is deprecated.  Please use openpam_ttyconv instead.
+ */
+int misc_conv(int num_msg,
+	const struct pam_message **msgm,
+	struct pam_response **response,
+	void *appdata_ptr);
+
+
+/*
  * PAM primitives
  */
 enum {
--- a/include/security/pam_constants.h	1664721945.000000000
+++ b/include/security/pam_constants.h	1697097484.160875508
@@ -80,7 +80,16 @@ enum {
 	PAM_BAD_ITEM			=  31,		/* OpenPAM extension */
 	PAM_BAD_FEATURE			=  32,		/* OpenPAM extension */
 	PAM_BAD_CONSTANT		=  33,		/* OpenPAM extension */
-	PAM_NUM_ERRORS					/* OpenPAM extension */
+	PAM_NUM_ERRORS,					/* OpenPAM extension */
+
+	/* CUSTOM APPLE OPENPAM ERROR CODES: START */
+	PAM_APPLE_MIN_ERROR		=  1024,
+	PAM_APPLE_ACCT_TEMP_LOCK	=  1024,
+	PAM_APPLE_ACCT_LOCKED		=  1025,
+	/* Insert new custom Apple error codes above! */
+	PAM_APPLE_MAX_ERROR,
+	PAM_APPLE_NUM_ERRORS		=  PAM_APPLE_MAX_ERROR - PAM_APPLE_MIN_ERROR
+	/* CUSTOM APPLE OPENPAM ERROR CODES: END */
 };
 
 /*
--- a/lib/libpam/Makefile.am	1664721945.000000000
+++ b/lib/libpam/Makefile.am	1697097484.162037418
@@ -20,6 +20,7 @@ noinst_HEADERS = \
 	openpam_vasprintf.h
 
 libpam_la_SOURCES = \
+	openpam_apple_chains.c \
 	openpam_asprintf.c \
 	openpam_borrow_cred.c \
 	openpam_check_owner_perms.c \
@@ -72,6 +73,7 @@ libpam_la_SOURCES = \
 	pam_setenv.c \
 	pam_start.c \
 	pam_strerror.c \
+	pam_unsetenv.c \
 	pam_verror.c \
 	pam_vinfo.c \
 	pam_vprompt.c \
--- a/lib/libpam/openpam_configure.c	1664721945.000000000
+++ b/lib/libpam/openpam_configure.c	1697097484.163349452
@@ -43,7 +43,9 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
+#include <unistd.h>
 
+#include <sys/codesign.h>	/* csops() */
 #include <security/pam_appl.h>
 
 #include "openpam_impl.h"
@@ -139,8 +141,6 @@ valid_module_name(const char *name)
 	return (1);
 }
 
-typedef enum { pam_conf_style, pam_d_style } openpam_style_t;
-
 /*
  * Extracts given chains from a policy file.
  *
@@ -148,6 +148,7 @@ typedef enum { pam_conf_style, pam_d_sty
  * service and facility, or -1 if a system error occurred or a syntax
  * error was encountered.
  */
+
 static int
 openpam_parse_chain(pam_handle_t *pamh,
 	const char *service,
@@ -326,6 +327,22 @@ fail:
 }
 
 /*
+ * Torrekie: original function has been reconstructed, we are keeping this
+ * for Apple compat.
+ */
+
+int
+openpam_read_chain_from_filehandle(pam_handle_t *pamh,
+	const char *service,
+	pam_facility_t facility,
+	FILE *f,
+	const char *filename,
+	openpam_style_t style)
+{
+	return openpam_parse_chain(pamh, service, facility, f, filename, style);
+}
+
+/*
  * Read the specified chains from the specified file.
  *
  * Returns 0 if the file exists but does not contain any matching lines.
@@ -391,6 +408,13 @@ openpam_load_chain(pam_handle_t *pamh,
 	openpam_style_t style;
 	int ret;
 
+	/* don't allow to escape from policy_path */
+	if (strchr(service, '/')) {
+		openpam_log(PAM_LOG_ERROR, "invalid service name: %s",
+		    service);
+		return (-PAM_SYSTEM_ERR);
+	}
+
 	ENTERS(facility < 0 ? "any" : pam_facility_name[facility]);
 
 	/* either absolute or relative to cwd */
@@ -441,6 +465,44 @@ openpam_load_chain(pam_handle_t *pamh,
 }
 
 /*
+ * <rdar://problem/27991863> Sandbox apps report all passwords as valid
+ * Default all empty facilities to "required pam_deny.so"
+ */
+int
+openpam_configure_default(pam_handle_t *pamh)
+{
+	pam_facility_t fclt;
+
+	for (fclt = 0; fclt < PAM_NUM_FACILITIES; ++fclt) {
+		if (pamh->chains[fclt] == NULL) {
+			pam_chain_t *this = calloc(1, sizeof(pam_chain_t));
+			if (this == NULL)
+				goto load_err;
+			this->flag   = PAM_REQUIRED;
+			this->module = openpam_load_module("pam_deny.so");
+		/*	this->optc   = 0;	*/
+			this->optv   = calloc(1, sizeof(char *));
+		/*	this->next	 = NULL;	*/
+			if (this->optv != NULL && this->module != NULL) {
+				pamh->chains[fclt] = this;
+			} else {
+				if (this->optv != NULL)
+					free(this->optv);
+				if (this->module != NULL)
+					openpam_release_module(this->module);
+				free(this);
+				goto load_err;
+			}
+		}
+	}
+	return (PAM_SUCCESS);
+
+load_err:
+	openpam_clear_chains(pamh->chains);
+	return (PAM_SYSTEM_ERR);
+}
+
+/*
  * OpenPAM internal
  *
  * Configure a service
@@ -470,7 +532,10 @@ openpam_configure(pam_handle_t *pamh,
 				goto load_err;
 		}
 	}
+	if (openpam_configure_default(pamh))
+		goto load_err;
 	RETURNC(PAM_SUCCESS);
+
 load_err:
 	serrno = errno;
 	openpam_clear_chains(pamh->chains);
--- a/lib/libpam/openpam_constants.c	1664721945.000000000
+++ b/lib/libpam/openpam_constants.c	1697097553.426269134
@@ -78,6 +78,24 @@ const char *pam_err_name[PAM_NUM_ERRORS]
 	[PAM_BAD_CONSTANT]		 = "PAM_BAD_CONSTANT",
 };
 
+/* Torrekie: kept for Apple compat */
+#ifdef __APPLE__
+#define _pam_func_name pam_func_name
+#define _pam_sm_func_name pam_sm_func_name
+#define _pam_err_name pam_err_name
+#define _pam_apple_err_name pam_apple_err_name
+#define _pam_item_name pam_item_name
+
+const char *pam_apple_err_name[PAM_APPLE_NUM_ERRORS] = {
+	/* 1024 */			   "PAM_APPLE_ACCT_TEMP_LOCK",
+	/* 1025 */			   "PAM_APPLE_ACCT_LOCKED",
+};
+const char *pam_apple_err_text[PAM_APPLE_NUM_ERRORS] = {
+	/* PAM_APPLE_ACCT_TEMP_LOCK */	   "account temporarily locked",
+	/* PAM_APPLE_ACCT_LOCKED */	   "account locked",
+};
+#endif
+
 const char *pam_err_text[PAM_NUM_ERRORS] = {
 	[PAM_SUCCESS]			 = "Success",
 	[PAM_OPEN_ERR]			 = "Failed to load module",
--- a/lib/libpam/openpam_constants.h	1664721945.000000000
+++ b/lib/libpam/openpam_constants.h	1697097484.165539397
@@ -30,6 +30,17 @@
 #ifndef OPENPAM_CONSTANTS_H_INCLUDED
 #define OPENPAM_CONSTANTS_H_INCLUDED
 
+#ifdef __APPLE__
+#define _pam_func_name pam_func_name
+#define _pam_sm_func_name pam_sm_func_name
+#define _pam_err_name pam_err_name
+#define _pam_apple_err_name pam_apple_err_name
+#define _pam_item_name pam_item_name
+
+extern const char *pam_apple_err_name[PAM_APPLE_NUM_ERRORS];
+extern const char *pam_apple_err_text[PAM_APPLE_NUM_ERRORS];
+#endif
+
 extern const char *pam_err_name[PAM_NUM_ERRORS];
 extern const char *pam_err_text[PAM_NUM_ERRORS];
 extern const char *pam_item_name[PAM_NUM_ITEMS];
--- a/lib/libpam/openpam_dispatch.c	1664721945.000000000
+++ b/lib/libpam/openpam_dispatch.c	1697097484.166455100
@@ -194,6 +194,7 @@ openpam_check_error_code(int primitive,
 	if (r == PAM_SUCCESS ||
 	    r == PAM_SYSTEM_ERR ||
 	    r == PAM_SERVICE_ERR ||
+	    r == PAM_SYSTEM_ERR ||
 	    r == PAM_BUF_ERR ||
 	    r == PAM_CONV_ERR ||
 	    r == PAM_PERM_DENIED ||
@@ -220,6 +221,7 @@ openpam_check_error_code(int primitive,
 	case PAM_SM_ACCT_MGMT:
 		if (r == PAM_USER_UNKNOWN ||
 		    r == PAM_AUTH_ERR ||
+		    r == PAM_AUTHTOK_EXPIRED ||
 		    r == PAM_NEW_AUTHTOK_REQD ||
 		    r == PAM_ACCT_EXPIRED)
 			return;
@@ -230,7 +232,7 @@ openpam_check_error_code(int primitive,
 			return;
 		break;
 	case PAM_SM_CHAUTHTOK:
-		if (r == PAM_PERM_DENIED ||
+		if (r == PAM_USER_UNKNOWN ||
 		    r == PAM_AUTHTOK_ERR ||
 		    r == PAM_AUTHTOK_RECOVERY_ERR ||
 		    r == PAM_AUTHTOK_LOCK_BUSY ||
--- a/lib/libpam/openpam_dynamic.c	1664721945.000000000
+++ b/lib/libpam/openpam_dynamic.c	1697097484.168165424
@@ -39,6 +39,7 @@
 
 #include <sys/param.h>
 
+#include <assert.h>
 #include <dlfcn.h>
 #include <errno.h>
 #include <fcntl.h>
@@ -47,7 +48,10 @@
 #include <string.h>
 #include <unistd.h>
 
+#include <dispatch/dispatch.h>
+//#include <mach-o/dyld_priv.h>
 #include <security/pam_appl.h>
+#include <sys/codesign.h>
 
 #include "openpam_impl.h"
 #include "openpam_asprintf.h"
@@ -61,6 +65,123 @@
 /*
  * OpenPAM internal
  *
+ * Attempt to dynamically load a module.
+ * Disable LV on the process if necessary.
+ *
+ * Return values
+ * Pointer		errno
+ * NULL		==> populated with underlying cause.
+ * valid 	==>	0
+ */
+
+static void *
+openpam_dlopen(const char *path, int mode)
+{
+	/*
+	 * Torrekie: _dyld_shared_cache_contains_path introduced in Darwin20,
+	 *           but we are targeting Darwin19, use dlopen to determine.
+	 */
+	int (*__dyld_shared_cache_contains_path)(const char *);
+	void *libdyld_handler = dlopen("/usr/lib/libSystem.B.dylib", RTLD_LOCAL | RTLD_NOW);
+	if (libdyld_handler) __dyld_shared_cache_contains_path = dlsym(libdyld_handler, "_dyld_shared_cache_contains_path");
+	if (__dyld_shared_cache_contains_path) {
+		/* Fast path: dyld shared cache. */
+		if (__dyld_shared_cache_contains_path(path)) {
+			errno = 0;
+			return dlopen(path, mode);
+		}
+	}
+
+	/* Slow path: check file on disk. */
+	if (faccessat(AT_FDCWD, path, R_OK, AT_EACCESS) != 0) {
+		/* errno populated by faccessat() and returned to caller. */
+		return NULL;
+	}
+
+	void *dlh = dlopen(path, mode);
+	if (dlh != NULL) {
+		errno = 0;
+		return dlh;
+	}
+
+	/*
+	 * The module exists and is readable, but failed to load.
+	 * If library validation is enabled, try disabling it and then try again.
+	 */
+	int   csflags = 0;
+	pid_t pid     = getpid();
+	csops(pid, CS_OPS_STATUS, &csflags, sizeof(csflags));
+	if ((csflags & CS_INSTALLER) != 0) {
+		/* Installers cannot disable LV (rdar://99454346). */
+		errno = ENOTRECOVERABLE;
+		return NULL;
+	}
+	if ((csflags & (CS_FORCED_LV | CS_REQUIRE_LV)) == 0) {
+		/* LV is already disabled. */
+		errno = ECANCELED;
+		return NULL;
+	}
+	int rv = csops(getpid(), CS_OPS_CLEAR_LV, NULL, 0);
+	if (rv != 0) {
+		openpam_log(PAM_LOG_ERROR, "csops(CS_OPS_CLEAR_LV) failed: %d", rv);
+		errno = ENOTSUP;
+		return NULL;
+	}
+	
+	dlh = dlopen(path, mode);
+	if (dlh == NULL) {
+		/* Failed to load even with LV disabled: re-enable LV. */
+		csflags = CS_REQUIRE_LV;
+		csops(pid, CS_OPS_SET_STATUS, &csflags, sizeof(csflags));
+		errno = EINVAL;
+	}
+
+	errno = 0;
+	return dlh;
+}
+
+
+/*
+ * OpenPAM internal
+ *
+ * Attempt to load a specific module.
+ * On success, populate the `pam_module_t` structure provided.
+ *
+ * Return values
+ * bool			errno
+ * false	==> populated with underlying cause.
+ * true		==>	0
+
+ */
+
+static bool
+openpam_dynamic_load_single(const char *path, pam_module_t *module)
+{
+	void *dlh = openpam_dlopen(path, RTLD_NOW);
+	if (dlh != NULL) {
+		openpam_log(PAM_LOG_LIBDEBUG, "%s", path);
+		module->path = strdup(path);
+		if (module->path == NULL)
+			goto bail;
+		module->dlh = dlh;
+		for (int i = 0; i < PAM_NUM_PRIMITIVES; ++i) {
+			module->func[i] = (pam_func_t)dlsym(dlh, _pam_sm_func_name[i]);
+			if (module->func[i] == NULL)
+				openpam_log(PAM_LOG_LIBDEBUG, "%s: %s(): %s", path, _pam_sm_func_name[i], dlerror());
+		}
+		return true;
+	}
+
+bail:
+	if (dlh != NULL)
+		dlclose(dlh);
+
+	return false;
+}
+
+/*
+ * OpenPAM internal
+ *
  * Perform sanity checks and attempt to load a module
  */
 
@@ -170,6 +291,39 @@ err:
 /*
  * OpenPAM internal
  *
+ * Locate a dynamically linked module.
+ * Prefer a module matching the current major version, otherwise fall back to the unversioned one.
+ */
+
+static bool
+openpam_dynamic_load(const char *prefix, const char *path, pam_module_t *module)
+{
+	char *vpath = NULL;
+	bool loaded = false;
+#if !defined(DISABLE_UNVERSIONED_MODULES)
+	/* Try versioned module first. */
+	if (asprintf(&vpath, "%s%s.%d", prefix, path, LIB_MAJ) < 0)
+		return false;
+#endif
+	loaded = openpam_dynamic_load_single(vpath, module);
+	if (!loaded) {
+		/* dlopen() + LV disable failure in installer? */
+		if (errno == ENOTRECOVERABLE)
+			goto bail;
+	
+		/* Try again with unversioned module: remove LIB_MAJ. */
+		*strrchr(vpath, '.') = '\0';
+		loaded = openpam_dynamic_load_single(vpath, module);
+	}
+
+bail:
+	FREE(vpath);
+	return loaded;
+}
+
+/*
+ * OpenPAM internal
+ *
  * Locate a dynamically linked module
  */
 
@@ -182,6 +336,56 @@ openpam_dynamic(const char *modname)
 	int has_so, has_ver;
 	int dot, len;
 
+// Torrekie: Seems having some problems with this
+#if defined(__APPLE__) && 0
+	if ((module = calloc(1, sizeof *module)) == NULL) {
+		openpam_log(PAM_LOG_ERROR, "%m");
+		goto no_module;
+	}
+
+	/* Prepend the standard prefix if not an absolute pathname. */
+	if (path[0] != '/') {
+		// <rdar://problem/21545156> Add "/usr/local/lib/pam" to the search list
+		static dispatch_once_t onceToken;
+		static char *pam_modules_dirs  = NULL;
+		static char **pam_search_paths = NULL;
+
+		dispatch_once(&onceToken, ^{
+			size_t len = strlen(OPENPAM_MODULES_DIR);
+			char *tok, *str;
+			const char *delim = ";";
+			const char sep = delim[0];
+			int i, n;
+
+			str = OPENPAM_MODULES_DIR;
+			assert(len > 0);
+			assert(str[0]     != sep);		/* OPENPAM_MODULES should not start with a ';' */
+			assert(str[len-1] != sep);		/* no terminating ';' */
+			for (i = 0, n = 1; i < len; i++) n += (str[i] == sep);
+
+			if ((pam_modules_dirs = strdup(OPENPAM_MODULES_DIR)) != NULL &&
+				(pam_search_paths = (char **) malloc((n + 1) * sizeof(char *))) != NULL) {
+				for (tok = str = pam_modules_dirs, i = 0; i < n; i++)
+					pam_search_paths[i] = tok = strsep(&str, delim);
+				pam_search_paths[n] = NULL;
+			} else {
+				openpam_log(PAM_LOG_ERROR, "%m - PAM module search paths won't work!");
+			}
+		});
+		if (pam_search_paths != NULL) {
+			int i;
+			for (i = 0; pam_search_paths[i] != NULL; i++) {
+				if (openpam_dynamic_load(pam_search_paths[i], path, module))
+					return module;
+				if (errno == ENOTRECOVERABLE)
+					goto no_module;
+			}
+		}
+	} else {
+		if (openpam_dynamic_load("", path, module))
+			return module;
+	}
+#else
 	/*
 	 * Simple case: module name contains path separator(s)
 	 */
@@ -226,6 +430,7 @@ openpam_dynamic(const char *modname)
 		 * Assemble the full path, including the version suffix.  Take
 		 * note of where the suffix begins so we can cut it off later.
 		 */
+#ifndef __APPLE__
 		if (has_ver)
 			len = snprintf(modpath, sizeof modpath, "%s/%s%n",
 			    *path, modname, &dot);
@@ -235,6 +440,25 @@ openpam_dynamic(const char *modname)
 		else
 			len = snprintf(modpath, sizeof modpath, "%s/%s%s%n.%d",
 			    *path, modname, PAM_SOEXT, &dot, LIB_MAJ);
+#else
+		/*
+		 * Torrekie: Apple put version before soext
+		 */
+		size_t modname_length;
+		char modname_noext[MAXPATHLEN];
+		if (has_ver)
+			len = snprintf(modpath, sizeof modpath, "%s/%s%n",
+			    *path, modname, &dot);
+		else if (has_so) {
+			modname_length = strstr(modname, PAM_SOEXT) - modname;
+			strncpy(modname_noext, modname, modname_length);
+			modname_noext[modname_length] = '\0';
+			len = snprintf(modpath, sizeof modpath, "%s/%s%n.%d%s",
+			    *path, modname_noext, &dot, LIB_MAJ, PAM_SOEXT);
+		} else
+			len = snprintf(modpath, sizeof modpath, "%s/%s%n.%d%s",
+			    *path, modname, &dot, LIB_MAJ, PAM_SOEXT);
+#endif
 		/* check for overflow */
 		if (len < 0 || (unsigned int)len >= sizeof modpath) {
 			errno = ENOENT;
@@ -250,7 +474,8 @@ openpam_dynamic(const char *modname)
 				return (module);
 		}
 	}
-
+#endif
+no_module:
 	/* :( */
 	return (NULL);
 }
--- a/lib/libpam/openpam_impl.h	1664721945.000000000
+++ b/lib/libpam/openpam_impl.h	1697097484.169089751
@@ -130,12 +130,16 @@ struct pam_handle {
  */
 int		 openpam_configure(pam_handle_t *, const char *)
 	OPENPAM_NONNULL((1));
+int 		 openpam_configure_default(pam_handle_t *)
+	OPENPAM_NONNULL((1));
 int		 openpam_dispatch(pam_handle_t *, int, int)
 	OPENPAM_NONNULL((1));
 int		 openpam_findenv(pam_handle_t *, const char *, size_t)
 	OPENPAM_NONNULL((1,2));
 pam_module_t	*openpam_load_module(const char *)
 	OPENPAM_NONNULL((1));
+void		 openpam_release_module(pam_module_t *module)
+	OPENPAM_NONNULL((1));
 void		 openpam_clear_chains(pam_chain_t **)
 	OPENPAM_NONNULL((1));
 
@@ -144,6 +148,10 @@ int		 openpam_check_desc_owner_perms(con
 int		 openpam_check_path_owner_perms(const char *)
 	OPENPAM_NONNULL((1));
 
+typedef enum { pam_conf_style, pam_d_style } openpam_style_t;
+int		 openpam_configure_apple(pam_handle_t *, const char *)
+	OPENPAM_NONNULL((1,2));
+
 #ifdef OPENPAM_STATIC_MODULES
 pam_module_t	*openpam_static(const char *)
 	OPENPAM_NONNULL((1));
--- a/lib/libpam/openpam_load.c	1664721945.000000000
+++ b/lib/libpam/openpam_load.c	1697097484.169894288
@@ -55,14 +55,14 @@ openpam_load_module(const char *modulena
 	pam_module_t *module;
 
 	module = openpam_dynamic(modulename);
-	openpam_log(PAM_LOG_DEBUG, "%s dynamic %s",
+	openpam_log(PAM_LOG_LIBDEBUG, "%s dynamic %s",
 	    (module == NULL) ? "no" : "using", modulename);
 
 #ifdef OPENPAM_STATIC_MODULES
 	/* look for a static module */
 	if (module == NULL && strchr(modulename, '/') == NULL) {
 		module = openpam_static(modulename);
-		openpam_log(PAM_LOG_DEBUG, "%s static %s",
+		openpam_log(PAM_LOG_LIBDEBUG, "%s static %s",
 		    (module == NULL) ? "no" : "using", modulename);
 	}
 #endif
@@ -79,7 +79,7 @@ openpam_load_module(const char *modulena
  * XXX highly thread-unsafe
  */
 
-static void
+void
 openpam_release_module(pam_module_t *module)
 {
 
@@ -89,7 +89,7 @@ openpam_release_module(pam_module_t *mod
 		/* static module */
 		return;
 	dlclose(module->dlh);
-	openpam_log(PAM_LOG_DEBUG, "releasing %s", module->path);
+	openpam_log(PAM_LOG_LIBDEBUG, "releasing %s", module->path);
 	FREE(module->path);
 	FREE(module);
 }
--- a/lib/libpam/openpam_log.c	1664721945.000000000
+++ b/lib/libpam/openpam_log.c	1697106236.847904119
@@ -67,9 +71,10 @@ openpam_log(int level, const char *fmt,
 
 	switch (level) {
 	case PAM_LOG_LIBDEBUG:
-	case PAM_LOG_DEBUG:
 		if (!openpam_debug)
 			return;
+		priority = LOG_ERR;
+	case PAM_LOG_DEBUG:
 		priority = LOG_DEBUG;
 		break;
 	case PAM_LOG_VERBOSE:
@@ -85,7 +90,7 @@ openpam_log(int level, const char *fmt,
 	}
 	serrno = errno;
 	va_start(ap, fmt);
-	vsyslog(priority, fmt, ap);
+	vsyslog(LOG_AUTHPRIV|priority, fmt, ap);
 	va_end(ap);
 	errno = serrno;
 }
@@ -102,9 +107,9 @@ _openpam_log(int level, const char *func
 
 	switch (level) {
 	case PAM_LOG_LIBDEBUG:
-	case PAM_LOG_DEBUG:
 		if (!openpam_debug)
 			return;
+	case PAM_LOG_DEBUG:
 		priority = LOG_DEBUG;
 		break;
 	case PAM_LOG_VERBOSE:
@@ -122,11 +127,11 @@ _openpam_log(int level, const char *func
 	va_start(ap, fmt);
 	if (asprintf(&format, "in %s(): %s", func, fmt) > 0) {
 		errno = serrno;
-		vsyslog(priority, format, ap);
+		vsyslog(LOG_AUTHPRIV|priority, format, ap);
 		FREE(format);
 	} else {
 		errno = serrno;
-		vsyslog(priority, fmt, ap);
+		vsyslog(LOG_AUTHPRIV|priority, fmt, ap);
 	}
 	va_end(ap);
 	errno = serrno;
@@ -146,10 +151,8 @@ _openpam_log(int level, const char *func
  *		For internal use only.
  *	=PAM_LOG_DEBUG:
  *		Debugging messages.
- *		These messages are normally not logged unless the global
- *		integer variable :openpam_debug is set to a non-zero
- *		value, in which case they are logged with a =syslog
- *		priority of =LOG_DEBUG.
+ *		These messages are logged with a =syslog priority of
+ *		=LOG_DEBUG.
  *	=PAM_LOG_VERBOSE:
  *		Information about the progress of the authentication
  *		process, or other non-essential messages.
--- a/lib/libpam/openpam_ttyconv.c	1664721945.000000000
+++ b/lib/libpam/openpam_ttyconv.c	1697097484.171754152
@@ -377,6 +377,21 @@ fail:
 }
 
 /*
+ * XXX OpenPAM migration hack
+ *
+ * misc_conv
+ */
+ 
+int misc_conv(int num_msg,
+	const struct pam_message **msgm,
+	struct pam_response **response,
+	void *appdata_ptr)
+{
+	return openpam_ttyconv(num_msg, msgm, response, appdata_ptr);
+}
+
+
+/*
  * Error codes:
  *
  *	PAM_SYSTEM_ERR
--- a/lib/libpam/pam_get_mapped_authtok.c	1664721945.000000000
+++ b/lib/libpam/pam_get_mapped_authtok.c	1697097484.172609772
@@ -39,6 +39,8 @@
 
 #include <security/pam_appl.h>
 
+#include "openpam_impl.h"
+
 /*
  * XSSO 4.2.1
  * XSSO 6 page 48
--- a/lib/libpam/pam_get_mapped_username.c	1664721945.000000000
+++ b/lib/libpam/pam_get_mapped_username.c	1697097484.173372393
@@ -39,6 +39,8 @@
 
 #include <security/pam_appl.h>
 
+#include "openpam_impl.h"
+
 /*
  * XSSO 4.2.1
  * XSSO 6 page 50
--- a/lib/libpam/pam_getenv.c	1664721945.000000000
+++ b/lib/libpam/pam_getenv.c	1697097484.174133388
@@ -80,4 +80,5 @@ pam_getenv(pam_handle_t *pamh,
  * >pam_getenvlist
  * >pam_putenv
  * >pam_setenv
+ * >pam_unsetenv
  */
--- a/lib/libpam/pam_getenvlist.c	1664721945.000000000
+++ b/lib/libpam/pam_getenvlist.c	1697097484.174849134
@@ -103,4 +103,5 @@ pam_getenvlist(pam_handle_t *pamh)
  * >pam_getenv
  * >pam_putenv
  * >pam_setenv
+ * >pam_unsetenv
  */
--- a/lib/libpam/pam_putenv.c	1664721945.000000000
+++ b/lib/libpam/pam_putenv.c	1697097484.175582546
@@ -109,4 +109,5 @@ pam_putenv(pam_handle_t *pamh,
  * >pam_getenv
  * >pam_getenvlist
  * >pam_setenv
+ * >pam_unsetenv
  */
--- a/lib/libpam/pam_set_mapped_authtok.c	1664721945.000000000
+++ b/lib/libpam/pam_set_mapped_authtok.c	1697097484.176282709
@@ -39,6 +39,8 @@
 
 #include <security/pam_appl.h>
 
+#include "openpam_impl.h"
+
 /*
  * XSSO 4.2.1
  * XSSO 6 page 62
--- a/lib/libpam/pam_set_mapped_username.c	1664721945.000000000
+++ b/lib/libpam/pam_set_mapped_username.c	1697097484.176926705
@@ -39,6 +39,8 @@
 
 #include <security/pam_appl.h>
 
+#include "openpam_impl.h"
+
 /*
  * XSSO 4.2.1
  * XSSO 6 page 64
--- a/lib/libpam/pam_setenv.c	1664721945.000000000
+++ b/lib/libpam/pam_setenv.c	1697097484.177604326
@@ -99,4 +99,5 @@ pam_setenv(pam_handle_t *pamh,
  * >pam_getenv
  * >pam_getenvlist
  * >pam_putenv
+ * >pam_unsetenv
  */
--- a/lib/libpam/pam_sm_acct_mgmt.c	1664721945.000000000
+++ b/lib/libpam/pam_sm_acct_mgmt.c	1697097484.178362780
@@ -42,6 +42,8 @@
 #include <security/pam_appl.h>
 #include <security/pam_modules.h>
 
+#include "openpam_impl.h"
+
 /*
  * XSSO 4.2.2
  * XSSO 6 page 66
--- a/lib/libpam/pam_sm_authenticate.c	1664721945.000000000
+++ b/lib/libpam/pam_sm_authenticate.c	1697097484.179096067
@@ -42,6 +42,8 @@
 #include <security/pam_appl.h>
 #include <security/pam_modules.h>
 
+#include "openpam_impl.h"
+
 /*
  * XSSO 4.2.2
  * XSSO 6 page 68
--- a/lib/libpam/pam_sm_authenticate_secondary.c	1664721945.000000000
+++ b/lib/libpam/pam_sm_authenticate_secondary.c	1697097484.179972937
@@ -42,6 +42,8 @@
 #include <security/pam_appl.h>
 #include <security/pam_modules.h>
 
+#include "openpam_impl.h"
+
 /*
  * XSSO 4.2.2
  * XSSO 6 page 70
--- a/lib/libpam/pam_sm_chauthtok.c	1664721945.000000000
+++ b/lib/libpam/pam_sm_chauthtok.c	1697097484.180821765
@@ -42,6 +42,8 @@
 #include <security/pam_appl.h>
 #include <security/pam_modules.h>
 
+#include "openpam_impl.h"
+
 /*
  * XSSO 4.2.2
  * XSSO 6 page 72
--- a/lib/libpam/pam_sm_close_session.c	1664721945.000000000
+++ b/lib/libpam/pam_sm_close_session.c	1697097484.181673302
@@ -42,6 +42,8 @@
 #include <security/pam_appl.h>
 #include <security/pam_modules.h>
 
+#include "openpam_impl.h"
+
 /*
  * XSSO 4.2.2
  * XSSO 6 page 75
--- a/lib/libpam/pam_sm_get_mapped_authtok.c	1664721945.000000000
+++ b/lib/libpam/pam_sm_get_mapped_authtok.c	1697097484.182657921
@@ -42,6 +42,8 @@
 #include <security/pam_appl.h>
 #include <security/pam_modules.h>
 
+#include "openpam_impl.h"
+
 /*
  * XSSO 4.2.2
  * XSSO 6 page 77
--- a/lib/libpam/pam_sm_get_mapped_username.c	1664721945.000000000
+++ b/lib/libpam/pam_sm_get_mapped_username.c	1697097484.183451500
@@ -42,6 +42,8 @@
 #include <security/pam_appl.h>
 #include <security/pam_modules.h>
 
+#include "openpam_impl.h"
+
 /*
  * XSSO 4.2.2
  * XSSO 6 page 79
--- a/lib/libpam/pam_sm_open_session.c	1664721945.000000000
+++ b/lib/libpam/pam_sm_open_session.c	1697097484.184410327
@@ -42,6 +42,8 @@
 #include <security/pam_appl.h>
 #include <security/pam_modules.h>
 
+#include "openpam_impl.h"
+
 /*
  * XSSO 4.2.2
  * XSSO 6 page 81
--- a/lib/libpam/pam_sm_set_mapped_authtok.c	1664721945.000000000
+++ b/lib/libpam/pam_sm_set_mapped_authtok.c	1697097484.185241906
@@ -42,6 +42,8 @@
 #include <security/pam_appl.h>
 #include <security/pam_modules.h>
 
+#include "openpam_impl.h"
+
 /*
  * XSSO 4.2.2
  * XSSO 6 page 83
--- a/lib/libpam/pam_sm_set_mapped_username.c	1664721945.000000000
+++ b/lib/libpam/pam_sm_set_mapped_username.c	1697097484.186040276
@@ -42,6 +42,8 @@
 #include <security/pam_appl.h>
 #include <security/pam_modules.h>
 
+#include "openpam_impl.h"
+
 /*
  * XSSO 4.2.2
  * XSSO 6 page 85
--- a/lib/libpam/pam_sm_setcred.c	1664721945.000000000
+++ b/lib/libpam/pam_sm_setcred.c	1697097484.186788521
@@ -42,6 +42,8 @@
 #include <security/pam_appl.h>
 #include <security/pam_modules.h>
 
+#include "openpam_impl.h"
+
 /*
  * XSSO 4.2.2
  * XSSO 6 page 87
--- a/lib/libpam/pam_start.c	1664721945.000000000
+++ b/lib/libpam/pam_start.c	1697097484.187611392
@@ -37,10 +37,12 @@
 # include "config.h"
 #endif
 
+#include <errno.h>
 #include <stdlib.h>
 #include <string.h>
 #include <unistd.h>
 
+#include <sys/codesign.h>      /* csops() */
 #include <security/pam_appl.h>
 
 #include "openpam_impl.h"
@@ -82,10 +84,23 @@ pam_start(const char *service,
 		goto fail;
 	if ((r = pam_set_item(ph, PAM_CONV, pam_conv)) != PAM_SUCCESS)
 		goto fail;
-	if ((r = openpam_configure(ph, service)) != PAM_SUCCESS)
+	if ((r = openpam_configure(ph, service)) != PAM_SUCCESS) {
+#ifdef __APPLE__
+		if (r == PAM_SYSTEM_ERR && errno == ENOTRECOVERABLE) {
+			/* rdar://99495325 (pam_start should not fail because CS_OPS_CLEAR_LV is rejected) */
+			int csflags = 0;
+			pid_t pid = getpid();
+			csops(pid, CS_OPS_STATUS, &csflags, sizeof(csflags));
+			if ((csflags & CS_INSTALLER) != 0) {
+				/* Attempt to load a hard-coded Apple-only (stock) macOS chain. */
+				r = openpam_configure_apple(ph, service);
+			}
+		}
+#endif
 		goto fail;
+	}
 	*pamh = ph;
-	openpam_log(PAM_LOG_DEBUG, "pam_start(\"%s\") succeeded", service);
+	openpam_log(PAM_LOG_LIBDEBUG, "pam_start(\"%s\") succeeded", service);
 	RETURNC(PAM_SUCCESS);
 fail:
 	pam_end(ph, r);
--- a/lib/libpam/pam_strerror.c	1664721945.000000000
+++ b/lib/libpam/pam_strerror.c	1697097484.188357637
@@ -57,12 +57,19 @@ pam_strerror(const pam_handle_t *pamh,
 	static char unknown[16];
 
 	(void)pamh;
-	if (error_number >= 0 && error_number < PAM_NUM_ERRORS) {
-		return (pam_err_text[error_number]);
+	if (error_number >= 0) {
+		if (error_number < PAM_NUM_ERRORS)
+			return (pam_err_text[error_number]);
+#ifdef __APPLE__
+		else if ((PAM_APPLE_MAX_ERROR > error_number) && (error_number >= PAM_APPLE_MIN_ERROR))
+			return (pam_apple_err_text[error_number - PAM_APPLE_MIN_ERROR]);
+#endif
 	} else {
 		snprintf(unknown, sizeof unknown, "#%d", error_number);
 		return (unknown);
 	}
+	// How you get there?
+	return (unknown);
 }
 
 /**
