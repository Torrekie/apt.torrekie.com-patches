--- screen-4.9.0/ansi.c	1643378762.666611503
+++ ./ansi.c	1676635421.530880028
@@ -150,7 +150,7 @@ static void SelectRendition __P((void));
 static void RestorePosRendition __P((void));
 static void FillWithEs __P((void));
 static void FindAKA __P((void));
-static void Report __P((char *, int, int));
+static void Report __P((const char *, int, int));
 static void ScrollRegion __P((int));
 #ifdef COPY_PASTE
 static void WAddLineToHist __P((struct win *, struct mline *));
@@ -2336,13 +2336,18 @@ RestorePosRendition()
 /* Send a terminal report as if it were typed. */ 
 static void
 Report(fmt, n1, n2)
-char *fmt;
+const char *fmt;
 int n1, n2;
 {
   register int len;
   char rbuf[40];	/* enough room for all replys */
 
-  sprintf(rbuf, fmt, n1, n2);
+  if (n1 > 0 && n2 > 0)
+    sprintf(rbuf, fmtcheck(fmt, "%d %d"), n1, n2);
+  else if (n1 > 0)
+    sprintf(rbuf, fmtcheck(fmt, "%d"), n1);
+  else
+    sprintf(rbuf, fmt);
   len = strlen(rbuf);
 
 #ifdef PSEUDOS
--- screen-4.9.0/doc/screen.1	1643378762.678611800
+++ ./doc/screen.1	1676635508.527464575
@@ -2127,10 +2127,10 @@ windows process.
 Refer to the postscript file `doc/fdpat.ps' for a confusing illustration
 of all 21 possible combinations. Each drawing shows the digits 2,1,0
 representing the three file descriptors of newcommand. The box marked
-`W' is the usual pty that has the application-process on its slave side.
+`W' is the usual pty that has the application-process on its replica side.
 The box marked `P' is the secondary pty that now has
 .I screen
-at its master side.
+at its primary side.
 .PP
 Abbreviations: Whitespace between the word `exec' and fdpat and the
 command can be omitted. Trailing dots and a fdpat consisting only of
@@ -4822,7 +4822,7 @@ Ps = \fB40\fP	(A)
 Background Black
 .TP 27
 Ps = \fB...\fP
-...
+\&...
 .TP 27
 Ps = \fB49\fP	(A)
 Background Default
--- screen-4.9.0/help.c	1643378762.686611998
+++ ./help.c	1676635618.195470628
@@ -109,7 +109,10 @@ void exit_with_usage(char *myname, char
 
   if (message && *message) {
     printf("\nError: ");
-    printf(message, arg);
+    if (arg)
+      printf(fmtcheck(message, "%s"), arg);
+    else
+      printf(message);
     printf("\n");
     exit(1);
   }
--- screen-4.9.0/loadav.c	1643378762.686611998
+++ ./loadav.c	1676635676.303653297
@@ -388,7 +388,7 @@ char *p;
   j = GetLoadav();
   for (i = 0; i < j; i++)
     {
-      sprintf(p, " %2.2f" + !i, FIX_TO_DBL(loadav[i]));
+      sprintf(p, fmtcheck(" %2.2f" + !i, "%f"), FIX_TO_DBL(loadav[i]));
       p += strlen(p);
     }
 }
--- screen-4.9.0/process.c	1643378762.694612196
+++ ./process.c	1676635688.285803854
@@ -1059,7 +1059,7 @@ char **args;
     {
       if (i != n && i != n + 1 && i != n + 2 && i != n + 3)
         {
-	  Msg(0, orformat[3], rc_name, comms[nr].name, argss[n], 
+	  Msg(0, fmtcheck(orformat[3], "%s %s %s %s %s %s %s"), rc_name, comms[nr].name, argss[n],
 	      argss[n + 1], argss[n + 2], argss[n + 3], "");
 	  return -1;
 	}
@@ -1069,7 +1069,7 @@ char **args;
     {
       if (i != n && i != n + 1 && i != n + 2)
 	{
-	  Msg(0, orformat[2], rc_name, comms[nr].name, argss[n], 
+	  Msg(0, fmtcheck(orformat[2], "%s %s %s %s %s %s"), rc_name, comms[nr].name, argss[n],
 	      argss[n + 1], argss[n + 2], "");
           return -1;
 	}
@@ -1079,7 +1079,7 @@ char **args;
     {
       if (i != n && i != n + 1 && i != n + 3)
         {
-	  Msg(0, orformat[2], rc_name, comms[nr].name, argss[n], 
+	  Msg(0, fmtcheck(orformat[2], "%s %s %s %s %s %s"), rc_name, comms[nr].name, argss[n],
 	      argss[n + 1], argss[n + 3], "");
 	  return -1;
 	}
@@ -1089,7 +1089,7 @@ char **args;
     {
       if (i != n && i != n + 2 && i != n + 3)
         {
-	  Msg(0, orformat[2], rc_name, comms[nr].name, argss[n], 
+	  Msg(0, fmtcheck(orformat[2], "%s %s %s %s %s %s"), rc_name, comms[nr].name, argss[n],
 	      argss[n + 2], argss[n + 3], "");
 	  return -1;
 	}
@@ -1098,7 +1098,7 @@ char **args;
     {
       if (i != n && i != n + 1)
         {
-	  Msg(0, orformat[1], rc_name, comms[nr].name, argss[n], 
+	  Msg(0, fmtcheck(orformat[1], "%s %s %s %s %s"), rc_name, comms[nr].name, argss[n],
 	      argss[n + 1], n != 0 ? "s" : "");
 	  return -1;
 	}
@@ -1107,7 +1107,7 @@ char **args;
     {
       if (i != n && i != n + 2)
         {
-	  Msg(0, orformat[1], rc_name, comms[nr].name, argss[n], 
+	  Msg(0, fmtcheck(orformat[1], "%s %s %s %s %s"), rc_name, comms[nr].name, argss[n],
 	      argss[n + 2], "s");
 	  return -1;
 	}
@@ -1116,14 +1116,14 @@ char **args;
     {
       if (i != n && i != n + 3)
         {
-	  Msg(0, orformat[1], rc_name, comms[nr].name, argss[n], 
+	  Msg(0, fmtcheck(orformat[1], "%s %s %s %s %s"), rc_name, comms[nr].name, argss[n],
 	      argss[n + 3], "");
 	  return -1;
 	}
     }
   else if (i != n)
     {
-      Msg(0, orformat[0], rc_name, comms[nr].name, argss[n], n != 1 ? "s" : "");
+      Msg(0, fmtcheck(orformat[0], "%s %s %s %s"), rc_name, comms[nr].name, argss[n], n != 1 ? "s" : "");
       return -1;
     }
   return i;
@@ -5401,7 +5401,7 @@ PreviousWindow()
 static int
 MoreWindows()
 {
-  char *m = "No other window.";
+  const char * const m = "No other window.";
   if (windows && (fore == 0 || windows->w_next))
     return 1;
   if (fore == 0)
--- screen-4.9.0/screen.c	1643378762.694612196
+++ ./screen.c	1676636082.142558925
@@ -118,6 +118,12 @@
 
 #include "logfile.h" /* islogfile, logfflush, logfopen/logfclose */
 
+#ifdef __APPLE__
+#include <vproc.h>
+#include <vproc_priv.h>
+#include <err.h>
+#endif
+
 #ifdef DEBUG
 FILE *dfp;
 #endif
@@ -1224,6 +1230,16 @@ int main(int ac, char** av)
 	  Attacher();
 	  /* NOTREACHED */
     }
+#ifdef __APPLE__
+    else if (!multi && real_uid == eff_uid) {
+      static char DarwinSockDir[PATH_MAX];
+      if (confstr(_CS_DARWIN_USER_TEMP_DIR, DarwinSockDir, sizeof(DarwinSockDir))) {
+	strlcat(DarwinSockDir, ".screen", sizeof(DarwinSockDir));
+	SockDir = DarwinSockDir;
+      }
+    }
+#endif	/* __APPLE__ */
+
 #ifdef MULTIUSER
     if (multiattach)
       Panic(0, "Can't create sessions of other users.");
@@ -1331,7 +1347,10 @@ int main(int ac, char** av)
 #endif
   freopen("/dev/null", "w", stderr);
   debug("-- screen.back debug started\n");
-
+#if defined(__APPLE__)
+  if (_vprocmgr_detach_from_console(0) != NULL)
+    errx(1, "can't detach from console");
+#endif
   /*  This guarantees that the session owner is listed, even when we
    *  start detached. From now on we should not refer to 'LoginName'
    *  any more, use users->u_name instead.
--- screen-4.9.0/socket.c	1643378762.698612295
+++ ./socket.c	1676636024.282745790
@@ -393,7 +393,7 @@ bool *is_sock;
     }
   if (ndead && !quietflag)
     {
-      char *m = "Remove dead screens with 'screen -wipe'.";
+      const char * const m = "Remove dead screens with 'screen -wipe'.";
       if (wipeflag)
         Msg(0, "%d socket%s wiped out.", nwipe, nwipe > 1 ? "s" : "");
       else
@@ -1419,7 +1419,10 @@ struct msg *m;
   char *p;
   int pid;
   int noshowwin;
+
+#ifndef __APPLE__
   struct win *wi;
+#endif
 
   ASSERT(display);
   pid = D_userpid;
--- screen-4.9.0/window.c	1643378762.698612295
+++ ./window.c	1676636027.767602512
@@ -33,6 +33,9 @@
 #include <sys/stat.h>
 #include <signal.h>
 #include <fcntl.h>
+#ifdef __APPLE__
+#include <unistd.h>
+#endif /* __APPLE__ */
 #ifndef sun
 # include <sys/ioctl.h>
 #endif
@@ -1682,6 +1685,40 @@ char **av;
   return r;
 }
 
+#ifdef __APPLE__
+#ifdef RUN_LOGIN
+/*
+ * All of the logic to maintain utmpx is now built into /usr/bin/login, so
+ * all we need to do is call it, and pass the shell command to it.
+ */
+extern char *LoginName;
+
+static int
+run_login(const char *path, char *const argv[], char *const envp[])
+{
+  const char *shargs[MAXARGS + 1 + 3];
+  const char **fp, **tp;
+
+  if (access(path, X_OK) < 0)
+    return -1;
+  shargs[0] = "login";
+  shargs[1] = (*argv[0] == '-') ? "-pfq" : "-pflq";
+  shargs[2] = LoginName;
+  shargs[3] = path;
+  fp = (const char **)argv + 1;
+  tp = shargs + 4;
+  /* argv has already been check for length */
+  while ((*tp++ = *fp++) != NULL) {}
+  /* shouldn't return unless there was an error */
+  return (execve("/usr/bin/login", (char *const*)shargs, envp));
+}
+
+/* replace the following occurrences of execve() with run_login() */
+#define execve run_login
+
+#endif /* RUN_LOGIN */
+#endif /* __APPLE__ */
+
 void
 FreePseudowin(w)
 struct win *w;
