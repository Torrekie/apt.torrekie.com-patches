--- a/CMakeLists.txt	1671561003.000000000
+++ b/CMakeLists.txt	1680771227.070126737
@@ -80,9 +80,6 @@ set(CMAKE_CXX_STANDARD_REQUIRED ON)
 set(CMAKE_CXX_EXTENSIONS ON)
 
 if (CMAKE_SYSTEM MATCHES "Darwin")
-    set(CMAKE_OSX_DEPLOYMENT_TARGET "${MACOS_VERSION_MIN}" CACHE STRING "Minimum OS X deployment version" FORCE)
-    set(CMAKE_CXX_FLAGS "-Wno-deprecated-register -mmacosx-version-min=${MACOS_VERSION_MIN} ${CMAKE_CXX_FLAGS}")
-    set(CMAKE_C_FLAGS "-Wno-deprecated-register -mmacosx-version-min=${MACOS_VERSION_MIN} ${CMAKE_C_FLAGS}")
     find_library(CORESERVICES_LIB CoreServices)
     set(EXTRA_LIBS ${CORESERVICES_LIB})
 endif()
--- a/src/portable.cpp	1671996105.000000000
+++ b/src/portable.cpp	1680772243.243927381
@@ -34,6 +34,10 @@
 #include "debug.h"
 #endif
 
+#if defined(__APPLE__)
+#include <TargetConditionals.h>
+#endif
+
 #if !defined(_WIN32) || defined(__CYGWIN__)
 static bool environmentLoaded = false;
 static std::map<std::string,std::string> proc_env = std::map<std::string,std::string>();
@@ -478,8 +482,9 @@
 
 bool Portable::fileSystemIsCaseSensitive()
 {
-#if defined(_WIN32) || defined(macintosh) || defined(__MACOSX__) || defined(__APPLE__) || defined(__CYGWIN__)
+#if defined(_WIN32) || defined(__CYGWIN__) || (defined(__APPLE__) && TARGET_OS_OSX)
   return FALSE;
+// Torrekie: Embedded Darwin is Case Sensitive
 #else
   return TRUE;
 #endif
--- a/filesystem/filesystem.hpp	1660248872.000000000
+++ b/filesystem/filesystem.hpp	1680772451.013231274
@@ -4487,22 +4487,7 @@ GHC_INLINE void last_write_time(const pa
         ec = detail::make_system_error();
     }
 #elif defined(GHC_OS_MACOS)
-#ifdef __MAC_OS_X_VERSION_MIN_REQUIRED
-#if __MAC_OS_X_VERSION_MIN_REQUIRED < 101300
-    struct ::stat fs;
-    if (::stat(p.c_str(), &fs) == 0) {
-        struct ::timeval tv[2];
-        tv[0].tv_sec = fs.st_atimespec.tv_sec;
-        tv[0].tv_usec = static_cast<int>(fs.st_atimespec.tv_nsec / 1000);
-        tv[1].tv_sec = std::chrono::duration_cast<std::chrono::seconds>(d).count();
-        tv[1].tv_usec = static_cast<int>(std::chrono::duration_cast<std::chrono::microseconds>(d).count() % 1000000);
-        if (::utimes(p.c_str(), tv) == 0) {
-            return;
-        }
-    }
-    ec = detail::make_system_error();
-    return;
-#else
+    // Torrekie: we are targeting Darwin19+
     struct ::timespec times[2];
     times[0].tv_sec = 0;
     times[0].tv_nsec = UTIME_OMIT;
@@ -4512,8 +4497,6 @@ GHC_INLINE void last_write_time(const pa
         ec = detail::make_system_error();
     }
     return;
-#endif
-#endif
 #else
 #ifndef UTIME_OMIT
 #define UTIME_OMIT ((1l << 30) - 2l)
