--- a/Makefile	2023-05-03 04:06:08.000000000 +0800
+++ b/Makefile	2023-05-27 14:45:45.694923262 +0800
@@ -10,11 +10,11 @@ PLAT= guess
 # so take care if INSTALL_TOP is not an absolute path. See the local target.
 # You may want to make INSTALL_LMOD and INSTALL_CMOD consistent with
 # LUA_ROOT, LUA_LDIR, and LUA_CDIR in luaconf.h.
-INSTALL_TOP= /usr/local
+INSTALL_TOP= $(DESTDIR)/usr/libexec/lua5.4
 INSTALL_BIN= $(INSTALL_TOP)/bin
-INSTALL_INC= $(INSTALL_TOP)/include
+INSTALL_INC= $(INSTALL_TOP)/include/lua
 INSTALL_LIB= $(INSTALL_TOP)/lib
-INSTALL_MAN= $(INSTALL_TOP)/man/man1
+INSTALL_MAN= $(INSTALL_TOP)/share/man/man1
 INSTALL_LMOD= $(INSTALL_TOP)/share/lua/$V
 INSTALL_CMOD= $(INSTALL_TOP)/lib/lua/$V
 
@@ -41,7 +41,7 @@ PLATS= guess aix bsd c89 freebsd generic
 # What to install.
 TO_BIN= lua luac
 TO_INC= lua.h luaconf.h lualib.h lauxlib.h lua.hpp
-TO_LIB= liblua.a
+TO_LIB= liblua.a liblua.dylib liblua-c++.dylib
 TO_MAN= lua.1 luac.1
 
 # Lua version and release.
@@ -52,14 +52,19 @@ R= $V.6
 all:	$(PLAT)
 
 $(PLATS) help test clean:
-	@cd src && $(MAKE) $@
+	@cd src && $(MAKE) $@ V=$(V) R=$(R)
 
 install: dummy
 	cd src && $(MKDIR) $(INSTALL_BIN) $(INSTALL_INC) $(INSTALL_LIB) $(INSTALL_MAN) $(INSTALL_LMOD) $(INSTALL_CMOD)
 	cd src && $(INSTALL_EXEC) $(TO_BIN) $(INSTALL_BIN)
 	cd src && $(INSTALL_DATA) $(TO_INC) $(INSTALL_INC)
-	cd src && $(INSTALL_DATA) $(TO_LIB) $(INSTALL_LIB)
+	# Compiler automatically determine shared library permission, don't modify it
+	cd src && $(INSTALL) $(TO_LIB) $(INSTALL_LIB)
 	cd doc && $(INSTALL_DATA) $(TO_MAN) $(INSTALL_MAN)
+	cd $(INSTALL_LIB) && ln -s liblua.dylib liblua.$(V).dylib
+	cd $(INSTALL_LIB) && ln -s liblua.dylib liblua.$(R).dylib
+	cd $(INSTALL_LIB) && ln -s liblua-c++.dylib liblua-c++.$(V).dylib
+	cd $(INSTALL_LIB) && ln -s liblua-c++.dylib liblua-c++.$(R).dylib
 
 uninstall:
 	cd src && cd $(INSTALL_BIN) && $(RM) $(TO_BIN)
--- a/src/Makefile	2023-02-03 18:43:14.000000000 +0800
+++ b/src/Makefile	2023-05-26 19:50:17.964850574 +0800
@@ -7,7 +7,9 @@
 PLAT= guess
 
 CC= gcc -std=gnu99
-CFLAGS= -O2 -Wall -Wextra -DLUA_COMPAT_5_3 $(SYSCFLAGS) $(MYCFLAGS)
+CFLAGS= -Wall -Wextra -DLUA_COMPAT_5_3 $(SYSCFLAGS) $(MYCFLAGS)
+CXX= g++
+CXXFLAGS= -Wall -Wextra -DLUA_COMPAT_5_3 $(SYSCFLAGS) $(MYCXXFLAGS)
 LDFLAGS= $(SYSLDFLAGS) $(MYLDFLAGS)
 LIBS= -lm $(SYSLIBS) $(MYLIBS)
 
@@ -21,6 +23,7 @@ SYSLDFLAGS=
 SYSLIBS=
 
 MYCFLAGS=
+MYCXXFLAGS=
 MYLDFLAGS=
 MYLIBS=
 MYOBJS=
@@ -28,11 +31,28 @@ MYOBJS=
 # Special flags for compiler modules; -Os reduces code size.
 CMCFLAGS= 
 
+%.o : %.c
+	$(CC) $(CFLAGS) -c $< -o $@
+	$(CXX) $(CXXFLAGS) -c $< -o $*-c++.o
+
+llex.o: llex.c
+	$(CC) $(CFLAGS) -Os -c $< -o $@
+	$(CXX) $(CXXFLAGS) -Os -c $< -o $*-c++.o
+
+lparser.o: lparser.c
+	$(CC) $(CFLAGS) -Os -c $< -o $@
+	$(CXX) $(CXXFLAGS) -Os -c $< -o $*-c++.o
+
+lcode.o: lcode.c
+	$(CC) $(CFLAGS) -Os -c $< -o $@
+	$(CXX) $(CXXFLAGS) -Os -c $< -o $*-c++.o
+
 # == END OF USER SETTINGS -- NO NEED TO CHANGE ANYTHING BELOW THIS LINE =======
 
 PLATS= guess aix bsd c89 freebsd generic ios linux linux-readline macosx mingw posix solaris
 
-LUA_A=	liblua.a
+LUA_A=	liblua.a liblua-c++.a
+LUA_DYLIB= liblua.dylib liblua-c++.dylib
 CORE_O=	lapi.o lcode.o lctype.o ldebug.o ldo.o ldump.o lfunc.o lgc.o llex.o lmem.o lobject.o lopcodes.o lparser.o lstate.o lstring.o ltable.o ltm.o lundump.o lvm.o lzio.o
 LIB_O=	lauxlib.o lbaselib.o lcorolib.o ldblib.o liolib.o lmathlib.o loadlib.o loslib.o lstrlib.o ltablib.o lutf8lib.o linit.o
 BASE_O= $(CORE_O) $(LIB_O) $(MYOBJS)
@@ -44,8 +64,8 @@ LUAC_T=	luac
 LUAC_O=	luac.o
 
 ALL_O= $(BASE_O) $(LUA_O) $(LUAC_O)
-ALL_T= $(LUA_A) $(LUA_T) $(LUAC_T)
-ALL_A= $(LUA_A)
+ALL_T= $(LUA_DYLIB) $(LUA_A) $(LUA_T) $(LUAC_T)
+ALL_A= $(LUA_DYLIB) $(LUA_A)
 
 # Targets start here.
 default: $(PLAT)
@@ -57,14 +77,22 @@ o:	$(ALL_O)
 a:	$(ALL_A)
 
 $(LUA_A): $(BASE_O)
-	$(AR) $@ $(BASE_O)
-	$(RANLIB) $@
+	$(AR) liblua.a $(BASE_O)
+	$(RANLIB) liblua.a
+	$(AR) liblua-c++.a $(BASE_O:.o=-c++.o)
+	$(RANLIB) liblua-c++.a
+
+$(LUA_DYLIB): $(BASE_O)
+	$(CC) -o liblua.dylib -dynamiclib -install_name /usr/libexec/lua5.4/lib/liblua.dylib \
+		-compatibility_version $(V) -current_version $(R) $^
+	$(CC) -o liblua-c++.dylib -dynamiclib -install_name /usr/libexec/lua5.4/lib/liblua-c++.dylib \
+		-compatibility_version $(V) -current_version $(R) $(BASE_O:.o=-c++.o) -Wl,-lc++
 
-$(LUA_T): $(LUA_O) $(LUA_A)
-	$(CC) -o $@ $(LDFLAGS) $(LUA_O) $(LUA_A) $(LIBS)
+$(LUA_T): $(LUA_O) $(LUA_DYLIB)
+	$(CC) -fno-common -o $@ $(LDFLAGS) $(LUA_O) -L. -llua $(LIBS)
 
-$(LUAC_T): $(LUAC_O) $(LUA_A)
-	$(CC) -o $@ $(LDFLAGS) $(LUAC_O) $(LUA_A) $(LIBS)
+$(LUAC_T): $(LUAC_O) $(LUA_DYLIB)
+	$(CC) -o $@ $(LDFLAGS) $(LUAC_O) -L. -llua $(LIBS)
 
 test:
 	./$(LUA_T) -v
@@ -129,7 +157,7 @@ linux-readline:
 	$(MAKE) $(ALL) SYSCFLAGS="-DLUA_USE_LINUX -DLUA_USE_READLINE" SYSLIBS="-Wl,-E -ldl -lreadline"
 
 Darwin macos macosx:
-	$(MAKE) $(ALL) SYSCFLAGS="-DLUA_USE_MACOSX -DLUA_USE_READLINE" SYSLIBS="-lreadline"
+	$(MAKE) $(ALL) SYSCFLAGS="-fno-common -DLUA_USE_MACOSX -DLUA_USE_READLINE" SYSLIBS="-lreadline"
 
 mingw:
 	$(MAKE) "LUA_A=lua54.dll" "LUA_T=lua.exe" \
@@ -147,14 +175,6 @@ SunOS solaris:
 .PHONY: all $(PLATS) help test clean default o a depend echo
 
 # Compiler modules may use special flags.
-llex.o:
-	$(CC) $(CFLAGS) $(CMCFLAGS) -c llex.c
-
-lparser.o:
-	$(CC) $(CFLAGS) $(CMCFLAGS) -c lparser.c
-
-lcode.o:
-	$(CC) $(CFLAGS) $(CMCFLAGS) -c lcode.c
 
 # DO NOT DELETE
 
--- a/src/luaconf.h	2023-05-03 04:02:30.000000000 +0800
+++ b/src/luaconf.h	2023-05-26 19:43:14.779399012 +0800
@@ -223,7 +223,7 @@
 
 #else			/* }{ */
 
-#define LUA_ROOT	"/usr/local/"
+#define LUA_ROOT	"/usr/libexec/lua5.4/"
 #define LUA_LDIR	LUA_ROOT "share/lua/" LUA_VDIR "/"
 #define LUA_CDIR	LUA_ROOT "lib/lua/" LUA_VDIR "/"
 
@@ -285,7 +285,11 @@
 
 #else				/* }{ */
 
+#ifdef __cplusplus
+#define LUA_API                extern "C"
+#else
 #define LUA_API		extern
+#endif
 
 #endif				/* } */
 
