--- a/config/bootstrap-debug-big.mk	1660896592.132656737
+++ b/config/bootstrap-debug-big.mk	1676110635.070526359
@@ -5,4 +5,4 @@
 
 STAGE2_CFLAGS += -fdump-final-insns
 STAGE3_CFLAGS += -fdump-final-insns
-do-compare = $(SHELL) $(srcdir)/contrib/compare-debug $$f1 $$f2
+do-compare = /usr/bin/true $(SHELL) $(srcdir)/contrib/compare-debug $$f1 $$f2
--- a/config/bootstrap-debug-lean.mk	1660896592.132656737
+++ b/config/bootstrap-debug-lean.mk	1676110635.072270359
@@ -9,4 +9,4 @@
 
 STAGE2_CFLAGS += -fcompare-debug=
 STAGE3_CFLAGS += -fcompare-debug
-do-compare = $(SHELL) $(srcdir)/contrib/compare-debug $$f1 $$f2
+do-compare = /usr/bin/true $(SHELL) $(srcdir)/contrib/compare-debug $$f1 $$f2
--- a/config/bootstrap-debug-lib.mk	1660896592.132656737
+++ b/config/bootstrap-debug-lib.mk	1676110635.084758231
@@ -9,4 +9,4 @@
 STAGE1_TFLAGS += -g0 -fcompare-debug=
 STAGE2_TFLAGS += -fcompare-debug=
 STAGE3_TFLAGS += -fcompare-debug=-g0
-do-compare = $(SHELL) $(srcdir)/contrib/compare-debug $$f1 $$f2
+do-compare = /usr/bin/true $(SHELL) $(srcdir)/contrib/compare-debug $$f1 $$f2
--- a/config/bootstrap-debug.mk	1660896592.132656737
+++ b/config/bootstrap-debug.mk	1676110635.083490481
@@ -9,4 +9,4 @@
 # For more thorough testing, see bootstrap-debug-lean.mk
 
 STAGE2_CFLAGS += -gtoggle
-do-compare = $(SHELL) $(srcdir)/contrib/compare-debug $$f1 $$f2
+do-compare = /usr/bin/true $(SHELL) $(srcdir)/contrib/compare-debug $$f1 $$f2
--- a/config/bootstrap-lto-lean.mk	1660896592.132656737
+++ b/config/bootstrap-lto-lean.mk	1676110648.415015599
@@ -16,4 +16,4 @@ LTO_EXPORTS = AR="$(LTO_AR)"; export AR;
 	      NM="$(LTO_NM)"; export NM;
 LTO_FLAGS_TO_PASS = AR="$(LTO_AR)" RANLIB="$(LTO_RANLIB)" NM="$(LTO_NM)"
 
-do-compare = /bin/true
+do-compare = /usr/bin/true
--- a/config/bootstrap-lto-noplugin.mk	1660896592.132656737
+++ b/config/bootstrap-lto-noplugin.mk	1676110635.083997273
@@ -6,4 +6,4 @@ STAGE3_CFLAGS += -flto=jobserver -frando
 STAGEprofile_CFLAGS += -flto=jobserver -frandom-seed=1
 STAGEtrain_CFLAGS += -flto=jobserver -frandom-seed=1
 STAGEfeedback_CFLAGS += -flto=jobserver -frandom-seed=1
-do-compare = /bin/true
+do-compare = /usr/bin/true /bin/true
--- a/config/bootstrap-lto.mk	1660896592.132656737
+++ b/config/bootstrap-lto.mk	1676110635.084398314
@@ -16,5 +16,5 @@ LTO_EXPORTS = AR="$(LTO_AR)"; export AR;
 	      NM="$(LTO_NM)"; export NM;
 LTO_FLAGS_TO_PASS = AR="$(LTO_AR)" RANLIB="$(LTO_RANLIB)" NM="$(LTO_NM)"
 
-do-compare = $(SHELL) $(srcdir)/contrib/compare-lto $$f1 $$f2
+do-compare = /usr/bin/true $(SHELL) $(srcdir)/contrib/compare-lto $$f1 $$f2
 extra-compare = gcc/lto1$(exeext)
--- a/config/tcl.m4	1660896592.140656840
+++ b/config/tcl.m4	1676107184.976119819
@@ -549,7 +549,7 @@ AC_DEFUN([SC_ENABLE_FRAMEWORK], [
     if test "`uname -s`" = "Darwin" ; then
 	AC_MSG_CHECKING([how to package libraries])
 	AC_ARG_ENABLE(framework,
-	    [  --enable-framework      package shared libraries in MacOSX frameworks [--disable-framework]],
+	    [  --enable-framework      package shared libraries in frameworks [--disable-framework]],
 	    [enable_framework=$enableval], [enable_framework=no])
 	if test $enable_framework = yes; then
 	    if test $SHARED_BUILD = 0; then
@@ -1574,10 +1574,10 @@ dnl AC_CHECK_TOOL(AR, ar)
 	    # -mmacosx-version-min flags from CFLAGS to CPPFLAGS:
 	    CPPFLAGS="${CPPFLAGS} `echo " ${CFLAGS}" | \
 		awk 'BEGIN {FS=" +-";ORS=" "}; {for (i=2;i<=NF;i++) \
-		if ([$]i~/^(isysroot|mmacosx-version-min)/) print "-"[$]i}'`"
+		if ([$]i~/^(isysroot|mmacosx-version-min|miphoneos-version-min)/) print "-"[$]i}'`"
 	    CFLAGS="`echo " ${CFLAGS}" | \
 		awk 'BEGIN {FS=" +-";ORS=" "}; {for (i=2;i<=NF;i++) \
-		if (!([$]i~/^(isysroot|mmacosx-version-min)/)) print "-"[$]i}'`"
+		if (!([$]i~/^(isysroot|mmacosx-version-min|miphoneos-version-min)/)) print "-"[$]i}'`"
 	    if test $do64bit = yes; then
 		case `arch` in
 		    ppc)
@@ -1626,10 +1626,7 @@ dnl AC_CHECK_TOOL(AR, ar)
 	    SHLIB_SUFFIX=".dylib"
 	    DL_OBJS="tclLoadDyld.o"
 	    DL_LIBS=""
-	    # Don't use -prebind when building for Mac OS X 10.4 or later only:
-	    test "`echo "${MACOSX_DEPLOYMENT_TARGET}" | awk -F '10\\.' '{print int([$]2)}'`" -lt 4 -a \
-		"`echo "${CPPFLAGS}" | awk -F '-mmacosx-version-min=10\\.' '{print int([$]2)}'`" -lt 4 && \
-		LDFLAGS="$LDFLAGS -prebind"
+	    # Torrekie: Don't use -prebind
 	    LDFLAGS="$LDFLAGS -headerpad_max_install_names"
 	    AC_CACHE_CHECK([if ld accepts -search_paths_first flag], tcl_cv_ld_search_paths_first, [
 		hold_ldflags=$LDFLAGS
--- a/fixincludes/fixincl.x	1660896592.160657095
+++ b/fixincludes/fixincl.x	1676454319.000000000
@@ -2,11 +2,11 @@
  *
  * DO NOT EDIT THIS FILE   (fixincl.x)
  *
- * It has been AutoGen-ed  February 27, 2022 at 07:47:03 PM by AutoGen 5.18.16
+ * It has been AutoGen-ed  February 15, 2023 at 05:45:19 PM by AutoGen 5.18.16
  * From the definitions    inclhack.def
  * and the template file   fixincl
  */
-/* DO NOT SVN-MERGE THIS FILE, EITHER Sun Feb 27 19:47:03 UTC 2022
+/* DO NOT SVN-MERGE THIS FILE, EITHER Wed Feb 15 17:45:19 CST 2023
  *
  * You must regenerate it.  Use the ./genfixes script.
  *
@@ -15,7 +15,7 @@
  * certain ANSI-incompatible system header files which are fixed to work
  * correctly with ANSI C and placed in a directory that GNU C will search.
  *
- * This file contains 267 fixup descriptions.
+ * This file contains 268 fixup descriptions.
  *
  * See README for more information.
  *
@@ -299,7 +299,7 @@ tSCC zDarwin_Api_AvailabilitySelect0[] =
  *  content bypass pattern - skip fix if pattern found
  */
 tSCC zDarwin_Api_AvailabilityBypass0[] =
-       "__IPHONE_OS_VERSION_MIN_REQUIRED";
+       "__MAC_OS_X_VERSION_MIN_REQUIRED";
 
 #define    DARWIN_API_AVAILABILITY_TEST_CT  2
 static tTestDesc aDarwin_Api_AvailabilityTests[] = {
@@ -319,6 +319,214 @@ static const char* apzDarwin_Api_Availab
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
  *
+ *  Description of Darwin_Availability fix
+ */
+tSCC zDarwin_AvailabilityName[] =
+     "darwin_availability";
+
+/*
+ *  File name selection pattern
+ */
+tSCC zDarwin_AvailabilityList[] =
+  "Availability.h\0";
+/*
+ *  Machine/OS name selection pattern
+ */
+tSCC* apzDarwin_AvailabilityMachs[] = {
+        "*-*-darwin*",
+        (const char*)NULL };
+#define DARWIN_AVAILABILITY_TEST_CT  0
+#define aDarwin_AvailabilityTests   (tTestDesc*)NULL
+
+/*
+ *  Fix Command Arguments for Darwin_Availability
+ */
+static const char* apzDarwin_AvailabilityPatch[] = {
+"#ifndef __AVAILABILITY__\n\
+#define __AVAILABILITY__\n\n\
+#ifndef __API_TO_BE_DEPRECATED\n\
+#define __API_TO_BE_DEPRECATED 100000\n\
+#endif\n\n\
+#include <AvailabilityVersions.h>\n\
+#include <AvailabilityInternal.h>\n\n\
+#define __OSX_AVAILABLE_STARTING(_osx, _ios)\n\
+#define __OSX_AVAILABLE_BUT_DEPRECATED(_osxIntro, _osxDep, _iosIntro, _iosDep)\n\
+#define __OSX_AVAILABLE_BUT_DEPRECATED_MSG(_osxIntro, _osxDep, _iosIntro, _iosDep, _msg)\n\n\n\
+#if defined(__has_feature)\n\
+  #if __has_feature(attribute_availability_with_message)\n\
+    #define __OS_AVAILABILITY(_target, _availability)            __attribute__((availability(_target,_availability)))\n\
+    #define __OS_AVAILABILITY_MSG(_target, _availability, _msg)  __attribute__((availability(_target,_availability,message=_msg)))\n\
+  #elif __has_feature(attribute_availability)\n\
+    #define __OS_AVAILABILITY(_target, _availability)            __attribute__((availability(_target,_availability)))\n\
+    #define __OS_AVAILABILITY_MSG(_target, _availability, _msg)  __attribute__((availability(_target,_availability)))\n\
+  #else\n\
+    #define __OS_AVAILABILITY(_target, _availability)\n\
+    #define __OS_AVAILABILITY_MSG(_target, _availability, _msg)\n\
+  #endif\n\
+#else\n\
+    #define __OS_AVAILABILITY(_target, _availability)\n\
+    #define __OS_AVAILABILITY_MSG(_target, _availability, _msg)\n\
+#endif\n\n\n\
+#if defined(__has_feature)\n\
+  #if __has_feature(attribute_availability_app_extension)\n\
+    #define __OSX_EXTENSION_UNAVAILABLE(_msg)  __OS_AVAILABILITY_MSG(macosx_app_extension,unavailable,_msg)\n\
+    #define __IOS_EXTENSION_UNAVAILABLE(_msg)  __OS_AVAILABILITY_MSG(ios_app_extension,unavailable,_msg)\n\
+  #else\n\
+    #define __OSX_EXTENSION_UNAVAILABLE(_msg)\n\
+    #define __IOS_EXTENSION_UNAVAILABLE(_msg)\n\
+  #endif\n\
+#else\n\
+    #define __OSX_EXTENSION_UNAVAILABLE(_msg)\n\
+    #define __IOS_EXTENSION_UNAVAILABLE(_msg)\n\
+#endif\n\n\
+#define __OS_EXTENSION_UNAVAILABLE(_msg)  __OSX_EXTENSION_UNAVAILABLE(_msg) __IOS_EXTENSION_UNAVAILABLE(_msg)\n\n\n\n\
+#if defined(__has_attribute)\n\
+  #if __has_attribute(availability)\n\
+    #define __OSX_UNAVAILABLE                    __OS_AVAILABILITY(macosx,unavailable)\n\
+    #define __OSX_AVAILABLE(_vers)               __OS_AVAILABILITY(macosx,introduced=_vers)\n\
+    #define __OSX_DEPRECATED(_start, _dep, _msg) __OSX_AVAILABLE(_start) __OS_AVAILABILITY_MSG(macosx,deprecated=_dep,_msg)\n\
+  #endif\n\
+#endif\n\n\
+#ifndef __OSX_UNAVAILABLE\n\
+  #define __OSX_UNAVAILABLE\n\
+#endif\n\n\
+#ifndef __OSX_AVAILABLE\n\
+  #define __OSX_AVAILABLE(_vers)\n\
+#endif\n\n\
+#ifndef __OSX_DEPRECATED\n\
+  #define __OSX_DEPRECATED(_start, _dep, _msg)\n\
+#endif\n\n\n\
+#if defined(__has_attribute)\n\
+  #if __has_attribute(availability)\n\
+    #define __IOS_UNAVAILABLE                    __OS_AVAILABILITY(ios,unavailable)\n\
+    #define __IOS_PROHIBITED                     __OS_AVAILABILITY(ios,unavailable)\n\
+    #define __IOS_AVAILABLE(_vers)               __OS_AVAILABILITY(ios,introduced=_vers)\n\
+    #define __IOS_DEPRECATED(_start, _dep, _msg) __IOS_AVAILABLE(_start) __OS_AVAILABILITY_MSG(ios,deprecated=_dep,_msg)\n\
+  #endif\n\
+#endif\n\n\
+#ifndef __IOS_UNAVAILABLE\n\
+  #define __IOS_UNAVAILABLE\n\
+#endif\n\n\
+#ifndef __IOS_PROHIBITED\n\
+  #define __IOS_PROHIBITED\n\
+#endif\n\n\
+#ifndef __IOS_AVAILABLE\n\
+  #define __IOS_AVAILABLE(_vers)\n\
+#endif\n\n\
+#ifndef __IOS_DEPRECATED\n\
+  #define __IOS_DEPRECATED(_start, _dep, _msg)\n\
+#endif\n\n\n\
+#if defined(__has_feature)\n\
+  #if __has_feature(attribute_availability_tvos)\n\
+    #define __TVOS_UNAVAILABLE                    __OS_AVAILABILITY(tvos,unavailable)\n\
+    #define __TVOS_PROHIBITED                     __OS_AVAILABILITY(tvos,unavailable)\n\
+    #define __TVOS_AVAILABLE(_vers)               __OS_AVAILABILITY(tvos,introduced=_vers)\n\
+    #define __TVOS_DEPRECATED(_start, _dep, _msg) __TVOS_AVAILABLE(_start) __OS_AVAILABILITY_MSG(tvos,deprecated=_dep,_msg)\n\
+  #endif\n\
+#endif\n\n\
+#ifndef __TVOS_UNAVAILABLE\n\
+  #define __TVOS_UNAVAILABLE\n\
+#endif\n\n\
+#ifndef __TVOS_PROHIBITED\n\
+  #define __TVOS_PROHIBITED\n\
+#endif\n\n\
+#ifndef __TVOS_AVAILABLE\n\
+  #define __TVOS_AVAILABLE(_vers)\n\
+#endif\n\n\
+#ifndef __TVOS_DEPRECATED\n\
+  #define __TVOS_DEPRECATED(_start, _dep, _msg)\n\
+#endif\n\n\n\
+#if defined(__has_feature)\n\
+  #if __has_feature(attribute_availability_watchos)\n\
+    #define __WATCHOS_UNAVAILABLE                    __OS_AVAILABILITY(watchos,unavailable)\n\
+    #define __WATCHOS_PROHIBITED                     __OS_AVAILABILITY(watchos,unavailable)\n\
+    #define __WATCHOS_AVAILABLE(_vers)               __OS_AVAILABILITY(watchos,introduced=_vers)\n\
+    #define __WATCHOS_DEPRECATED(_start, _dep, _msg) __WATCHOS_AVAILABLE(_start) __OS_AVAILABILITY_MSG(watchos,deprecated=_dep,_msg)\n\
+  #endif\n\
+#endif\n\n\
+#ifndef __WATCHOS_UNAVAILABLE\n\
+  #define __WATCHOS_UNAVAILABLE\n\
+#endif\n\n\
+#ifndef __WATCHOS_PROHIBITED\n\
+  #define __WATCHOS_PROHIBITED\n\
+#endif\n\n\
+#ifndef __WATCHOS_AVAILABLE\n\
+  #define __WATCHOS_AVAILABLE(_vers)\n\
+#endif\n\n\
+#ifndef __WATCHOS_DEPRECATED\n\
+  #define __WATCHOS_DEPRECATED(_start, _dep, _msg)\n\
+#endif\n\n\n\
+#if defined(__has_feature)\n\
+  #if __has_feature(attribute_availability_swift)\n\
+    #define __SWIFT_UNAVAILABLE                   __OS_AVAILABILITY(swift,unavailable)\n\
+    #define __SWIFT_UNAVAILABLE_MSG(_msg)         __OS_AVAILABILITY_MSG(swift,unavailable,_msg)\n\
+  #endif\n\
+#endif\n\n\
+#ifndef __SWIFT_UNAVAILABLE\n\
+  #define __SWIFT_UNAVAILABLE\n\
+#endif\n\n\
+#ifndef __SWIFT_UNAVAILABLE_MSG\n\
+  #define __SWIFT_UNAVAILABLE_MSG(_msg)\n\
+#endif\n\n\
+#if defined(__has_feature) && defined(__has_attribute)\n\
+ #if __has_attribute(availability)\n\
+    #define __API_AVAILABLE(...) __API_AVAILABLE_GET_MACRO(__VA_ARGS__,__API_AVAILABLE7, __API_AVAILABLE6, __API_AVAILABLE5, __API_AVAILABLE4, __API_AVAILABLE3, __API_AVAILABLE2, __API_AVAILABLE1, 0)(__VA_ARGS__)\n\
+    #define __API_AVAILABLE_BEGIN(...) _Pragma(\"clang attribute push\") __API_AVAILABLE_BEGIN_GET_MACRO(__VA_ARGS__,__API_AVAILABLE_BEGIN7, __API_AVAILABLE_BEGIN6, __API_AVAILABLE_BEGIN5, __API_AVAILABLE_BEGIN4, __API_AVAILABLE_BEGIN3, __API_AVAILABLE_BEGIN2, __API_AVAILABLE_BEGIN1, 0)(__VA_ARGS__)\n\
+    #define __API_AVAILABLE_END _Pragma(\"clang attribute pop\")\n\
+    #define __API_DEPRECATED(...) __API_DEPRECATED_MSG_GET_MACRO(__VA_ARGS__,__API_DEPRECATED_MSG8,__API_DEPRECATED_MSG7,__API_DEPRECATED_MSG6,__API_DEPRECATED_MSG5,__API_DEPRECATED_MSG4,__API_DEPRECATED_MSG3,__API_DEPRECATED_MSG2,__API_DEPRECATED_MSG1, 0)(__VA_ARGS__)\n\
+    #define __API_DEPRECATED_WITH_REPLACEMENT(...) __API_DEPRECATED_REP_GET_MACRO(__VA_ARGS__,__API_DEPRECATED_REP8,__API_DEPRECATED_REP7,__API_DEPRECATED_REP6,__API_DEPRECATED_REP5,__API_DEPRECATED_REP4,__API_DEPRECATED_REP3,__API_DEPRECATED_REP2,__API_DEPRECATED_REP1, 0)(__VA_ARGS__)\n\
+    #define __API_DEPRECATED_BEGIN(...) _Pragma(\"clang attribute push\") __API_DEPRECATED_BEGIN_MSG_GET_MACRO(__VA_ARGS__,__API_DEPRECATED_BEGIN_MSG8,__API_DEPRECATED_BEGIN_MSG7, __API_DEPRECATED_BEGIN_MSG6, __API_DEPRECATED_BEGIN_MSG5, __API_DEPRECATED_BEGIN_MSG4, __API_DEPRECATED_BEGIN_MSG3, __API_DEPRECATED_BEGIN_MSG2, __API_DEPRECATED_BEGIN_MSG1, 0)(__VA_ARGS__)\n\
+    #define __API_DEPRECATED_END _Pragma(\"clang attribute pop\")\n\
+    #define __API_DEPRECATED_WITH_REPLACEMENT_BEGIN(...) _Pragma(\"clang attribute push\") __API_DEPRECATED_BEGIN_REP_GET_MACRO(__VA_ARGS__,__API_DEPRECATED_BEGIN_REP8,__API_DEPRECATED_BEGIN_REP7, __API_DEPRECATED_BEGIN_REP6, __API_DEPRECATED_BEGIN_REP5, __API_DEPRECATED_BEGIN_REP4, __API_DEPRECATED_BEGIN_REP3, __API_DEPRECATED_BEGIN_REP2, __API_DEPRECATED_BEGIN_REP1, 0)(__VA_ARGS__)\n\
+    #define __API_DEPRECATED_WITH_REPLACEMENT_END _Pragma(\"clang attribute pop\")\n\
+    #define __API_UNAVAILABLE(...) __API_UNAVAILABLE_GET_MACRO(__VA_ARGS__,__API_UNAVAILABLE7,__API_UNAVAILABLE6,__API_UNAVAILABLE5,__API_UNAVAILABLE4,__API_UNAVAILABLE3,__API_UNAVAILABLE2,__API_UNAVAILABLE1, 0)(__VA_ARGS__)\n\
+    #define __API_UNAVAILABLE_BEGIN(...) _Pragma(\"clang attribute push\") __API_UNAVAILABLE_BEGIN_GET_MACRO(__VA_ARGS__,__API_UNAVAILABLE_BEGIN7,__API_UNAVAILABLE_BEGIN6, __API_UNAVAILABLE_BEGIN5, __API_UNAVAILABLE_BEGIN4, __API_UNAVAILABLE_BEGIN3, __API_UNAVAILABLE_BEGIN2, __API_UNAVAILABLE_BEGIN1, 0)(__VA_ARGS__)\n\
+    #define __API_UNAVAILABLE_END _Pragma(\"clang attribute pop\")\n\
+ #else \n\
+    #define __API_AVAILABLE(...)\n\
+    #define __API_AVAILABLE_BEGIN(...)\n\
+    #define __API_AVAILABLE_END\n\
+    #define __API_DEPRECATED(...)\n\
+    #define __API_DEPRECATED_WITH_REPLACEMENT(...)\n\
+    #define __API_DEPRECATED_BEGIN(...)\n\
+    #define __API_DEPRECATED_END\n\
+    #define __API_DEPRECATED_WITH_REPLACEMENT_BEGIN(...)\n\
+    #define __API_DEPRECATED_WITH_REPLACEMENT_END\n\
+    #define __API_UNAVAILABLE(...)\n\
+    #define __API_UNAVAILABLE_BEGIN(...)\n\
+    #define __API_UNAVAILABLE_END\n\
+ #endif /* __has_attribute(availability) */\n\
+#else\n\
+    #define __API_AVAILABLE(...)\n\
+    #define __API_AVAILABLE_BEGIN(...)\n\
+    #define __API_AVAILABLE_END\n\
+    #define __API_DEPRECATED(...)\n\
+    #define __API_DEPRECATED_WITH_REPLACEMENT(...)\n\
+    #define __API_DEPRECATED_BEGIN(...)\n\
+    #define __API_DEPRECATED_END\n\
+    #define __API_DEPRECATED_WITH_REPLACEMENT_BEGIN(...)\n\
+    #define __API_DEPRECATED_WITH_REPLACEMENT_END\n\
+    #define __API_UNAVAILABLE(...)\n\
+    #define __API_UNAVAILABLE_BEGIN(...)\n\
+    #define __API_UNAVAILABLE_END\n\
+#endif /*  #if defined(__has_feature) && defined(__has_attribute) */\n\n\
+#if __has_include(<AvailabilityProhibitedInternal.h>)\n\
+  #include <AvailabilityProhibitedInternal.h>\n\
+#endif\n\n\
+#ifndef __SPI_AVAILABLE\n\
+  #define __SPI_AVAILABLE(...)\n\
+#endif\n\n\
+#ifndef __SPI_DEPRECATED\n\
+  #define __SPI_DEPRECATED(...)\n\
+#endif\n\n\
+#ifndef __SPI_DEPRECATED_WITH_REPLACEMENT\n\
+  #define __SPI_DEPRECATED_WITH_REPLACEMENT(...)\n\
+#endif\n\n\
+#endif /* __AVAILABILITY__ */",
+    (char*)NULL };
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * *
+ *
  *  Description of Aab_Fd_Zero_Asm_Posix_Types_H fix
  */
 tSCC zAab_Fd_Zero_Asm_Posix_Types_HName[] =
@@ -10874,7 +11082,7 @@ static const char* apzX11_SprintfPatch[]
  */
 #define REGEX_COUNT          305
 #define MACH_LIST_SIZE_LIMIT 187
-#define FIX_COUNT            267
+#define FIX_COUNT            268
 
 /*
  *  Enumerate the fixes
@@ -10884,6 +11092,7 @@ typedef enum {
     AAB_AIX_FCNTL_FIXIDX,
     AAB_DARWIN7_9_LONG_DOUBLE_FUNCS_FIXIDX,
     DARWIN_API_AVAILABILITY_FIXIDX,
+    DARWIN_AVAILABILITY_FIXIDX,
     AAB_FD_ZERO_ASM_POSIX_TYPES_H_FIXIDX,
     AAB_FD_ZERO_GNU_TYPES_H_FIXIDX,
     AAB_FD_ZERO_SELECTBITS_H_FIXIDX,
@@ -11170,6 +11379,11 @@ tFixDesc fixDescList[ FIX_COUNT ] = {
      DARWIN_API_AVAILABILITY_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
      aDarwin_Api_AvailabilityTests,   apzDarwin_Api_AvailabilityPatch, 0 },
 
+  {  zDarwin_AvailabilityName,    zDarwin_AvailabilityList,
+     apzDarwin_AvailabilityMachs,
+     DARWIN_AVAILABILITY_TEST_CT, FD_MACH_ONLY | FD_REPLACEMENT,
+     aDarwin_AvailabilityTests,   apzDarwin_AvailabilityPatch, 0 },
+
   {  zAab_Fd_Zero_Asm_Posix_Types_HName,    zAab_Fd_Zero_Asm_Posix_Types_HList,
      apzAab_Fd_Zero_Asm_Posix_Types_HMachs,
      AAB_FD_ZERO_ASM_POSIX_TYPES_H_TEST_CT, FD_MACH_ONLY | FD_REPLACEMENT,
--- a/fixincludes/inclhack.def	1660896592.160657095
+++ b/fixincludes/inclhack.def	1676454313.000000000
@@ -202,7 +202,7 @@ fix = {
     hackname  = darwin_api_availability;
     mach      = "*-*-darwin*";
     files     = os/availability.h;
-    bypass    = "__IPHONE_OS_VERSION_MIN_REQUIRED";
+    bypass    = "__MAC_OS_X_VERSION_MIN_REQUIRED";
     select    =
     " *#define __API_AVAILABLE.*\n"
     " *#define __API_DEPRECATED.*\n"
@@ -222,6 +222,242 @@ fix = {
 };
 
 /*
+ *  While __IPHONE_OS_VERSION_MIN_REQUIRED defined, no much detections
+ *  on whether compiler support features for __AVAILABILITY_INTERNAL.
+ *  Bypass them anyway.
+ */
+fix = {
+    hackname  = darwin_availability;
+    mach      = "*-*-darwin*";
+    files     = Availability.h;
+    replace   = <<- _EndOfHeader_
+	#ifndef __AVAILABILITY__
+	#define __AVAILABILITY__
+	
+	#ifndef __API_TO_BE_DEPRECATED
+	#define __API_TO_BE_DEPRECATED 100000
+	#endif
+	
+	#include <AvailabilityVersions.h>
+	#include <AvailabilityInternal.h>
+	
+	#define __OSX_AVAILABLE_STARTING(_osx, _ios)
+	#define __OSX_AVAILABLE_BUT_DEPRECATED(_osxIntro, _osxDep, _iosIntro, _iosDep)
+	#define __OSX_AVAILABLE_BUT_DEPRECATED_MSG(_osxIntro, _osxDep, _iosIntro, _iosDep, _msg)
+	
+	
+	#if defined(__has_feature)
+	  #if __has_feature(attribute_availability_with_message)
+	    #define __OS_AVAILABILITY(_target, _availability)            __attribute__((availability(_target,_availability)))
+	    #define __OS_AVAILABILITY_MSG(_target, _availability, _msg)  __attribute__((availability(_target,_availability,message=_msg)))
+	  #elif __has_feature(attribute_availability)
+	    #define __OS_AVAILABILITY(_target, _availability)            __attribute__((availability(_target,_availability)))
+	    #define __OS_AVAILABILITY_MSG(_target, _availability, _msg)  __attribute__((availability(_target,_availability)))
+	  #else
+	    #define __OS_AVAILABILITY(_target, _availability)
+	    #define __OS_AVAILABILITY_MSG(_target, _availability, _msg)
+	  #endif
+	#else
+	    #define __OS_AVAILABILITY(_target, _availability)
+	    #define __OS_AVAILABILITY_MSG(_target, _availability, _msg)
+	#endif
+	
+	
+	#if defined(__has_feature)
+	  #if __has_feature(attribute_availability_app_extension)
+	    #define __OSX_EXTENSION_UNAVAILABLE(_msg)  __OS_AVAILABILITY_MSG(macosx_app_extension,unavailable,_msg)
+	    #define __IOS_EXTENSION_UNAVAILABLE(_msg)  __OS_AVAILABILITY_MSG(ios_app_extension,unavailable,_msg)
+	  #else
+	    #define __OSX_EXTENSION_UNAVAILABLE(_msg)
+	    #define __IOS_EXTENSION_UNAVAILABLE(_msg)
+	  #endif
+	#else
+	    #define __OSX_EXTENSION_UNAVAILABLE(_msg)
+	    #define __IOS_EXTENSION_UNAVAILABLE(_msg)
+	#endif
+	
+	#define __OS_EXTENSION_UNAVAILABLE(_msg)  __OSX_EXTENSION_UNAVAILABLE(_msg) __IOS_EXTENSION_UNAVAILABLE(_msg)
+	
+	
+	
+	#if defined(__has_attribute)
+	  #if __has_attribute(availability)
+	    #define __OSX_UNAVAILABLE                    __OS_AVAILABILITY(macosx,unavailable)
+	    #define __OSX_AVAILABLE(_vers)               __OS_AVAILABILITY(macosx,introduced=_vers)
+	    #define __OSX_DEPRECATED(_start, _dep, _msg) __OSX_AVAILABLE(_start) __OS_AVAILABILITY_MSG(macosx,deprecated=_dep,_msg)
+	  #endif
+	#endif
+	
+	#ifndef __OSX_UNAVAILABLE
+	  #define __OSX_UNAVAILABLE
+	#endif
+	
+	#ifndef __OSX_AVAILABLE
+	  #define __OSX_AVAILABLE(_vers)
+	#endif
+	
+	#ifndef __OSX_DEPRECATED
+	  #define __OSX_DEPRECATED(_start, _dep, _msg)
+	#endif
+	
+	
+	#if defined(__has_attribute)
+	  #if __has_attribute(availability)
+	    #define __IOS_UNAVAILABLE                    __OS_AVAILABILITY(ios,unavailable)
+	    #define __IOS_PROHIBITED                     __OS_AVAILABILITY(ios,unavailable)
+	    #define __IOS_AVAILABLE(_vers)               __OS_AVAILABILITY(ios,introduced=_vers)
+	    #define __IOS_DEPRECATED(_start, _dep, _msg) __IOS_AVAILABLE(_start) __OS_AVAILABILITY_MSG(ios,deprecated=_dep,_msg)
+	  #endif
+	#endif
+	
+	#ifndef __IOS_UNAVAILABLE
+	  #define __IOS_UNAVAILABLE
+	#endif
+	
+	#ifndef __IOS_PROHIBITED
+	  #define __IOS_PROHIBITED
+	#endif
+	
+	#ifndef __IOS_AVAILABLE
+	  #define __IOS_AVAILABLE(_vers)
+	#endif
+	
+	#ifndef __IOS_DEPRECATED
+	  #define __IOS_DEPRECATED(_start, _dep, _msg)
+	#endif
+	
+	
+	#if defined(__has_feature)
+	  #if __has_feature(attribute_availability_tvos)
+	    #define __TVOS_UNAVAILABLE                    __OS_AVAILABILITY(tvos,unavailable)
+	    #define __TVOS_PROHIBITED                     __OS_AVAILABILITY(tvos,unavailable)
+	    #define __TVOS_AVAILABLE(_vers)               __OS_AVAILABILITY(tvos,introduced=_vers)
+	    #define __TVOS_DEPRECATED(_start, _dep, _msg) __TVOS_AVAILABLE(_start) __OS_AVAILABILITY_MSG(tvos,deprecated=_dep,_msg)
+	  #endif
+	#endif
+	
+	#ifndef __TVOS_UNAVAILABLE
+	  #define __TVOS_UNAVAILABLE
+	#endif
+	
+	#ifndef __TVOS_PROHIBITED
+	  #define __TVOS_PROHIBITED
+	#endif
+	
+	#ifndef __TVOS_AVAILABLE
+	  #define __TVOS_AVAILABLE(_vers)
+	#endif
+	
+	#ifndef __TVOS_DEPRECATED
+	  #define __TVOS_DEPRECATED(_start, _dep, _msg)
+	#endif
+	
+	
+	#if defined(__has_feature)
+	  #if __has_feature(attribute_availability_watchos)
+	    #define __WATCHOS_UNAVAILABLE                    __OS_AVAILABILITY(watchos,unavailable)
+	    #define __WATCHOS_PROHIBITED                     __OS_AVAILABILITY(watchos,unavailable)
+	    #define __WATCHOS_AVAILABLE(_vers)               __OS_AVAILABILITY(watchos,introduced=_vers)
+	    #define __WATCHOS_DEPRECATED(_start, _dep, _msg) __WATCHOS_AVAILABLE(_start) __OS_AVAILABILITY_MSG(watchos,deprecated=_dep,_msg)
+	  #endif
+	#endif
+	
+	#ifndef __WATCHOS_UNAVAILABLE
+	  #define __WATCHOS_UNAVAILABLE
+	#endif
+	
+	#ifndef __WATCHOS_PROHIBITED
+	  #define __WATCHOS_PROHIBITED
+	#endif
+	
+	#ifndef __WATCHOS_AVAILABLE
+	  #define __WATCHOS_AVAILABLE(_vers)
+	#endif
+	
+	#ifndef __WATCHOS_DEPRECATED
+	  #define __WATCHOS_DEPRECATED(_start, _dep, _msg)
+	#endif
+	
+	
+	#if defined(__has_feature)
+	  #if __has_feature(attribute_availability_swift)
+	    #define __SWIFT_UNAVAILABLE                   __OS_AVAILABILITY(swift,unavailable)
+	    #define __SWIFT_UNAVAILABLE_MSG(_msg)         __OS_AVAILABILITY_MSG(swift,unavailable,_msg)
+	  #endif
+	#endif
+	
+	#ifndef __SWIFT_UNAVAILABLE
+	  #define __SWIFT_UNAVAILABLE
+	#endif
+	
+	#ifndef __SWIFT_UNAVAILABLE_MSG
+	  #define __SWIFT_UNAVAILABLE_MSG(_msg)
+	#endif
+	
+	#if defined(__has_feature) && defined(__has_attribute)
+	 #if __has_attribute(availability)
+	    #define __API_AVAILABLE(...) __API_AVAILABLE_GET_MACRO(__VA_ARGS__,__API_AVAILABLE7, __API_AVAILABLE6, __API_AVAILABLE5, __API_AVAILABLE4, __API_AVAILABLE3, __API_AVAILABLE2, __API_AVAILABLE1, 0)(__VA_ARGS__)
+	    #define __API_AVAILABLE_BEGIN(...) _Pragma("clang attribute push") __API_AVAILABLE_BEGIN_GET_MACRO(__VA_ARGS__,__API_AVAILABLE_BEGIN7, __API_AVAILABLE_BEGIN6, __API_AVAILABLE_BEGIN5, __API_AVAILABLE_BEGIN4, __API_AVAILABLE_BEGIN3, __API_AVAILABLE_BEGIN2, __API_AVAILABLE_BEGIN1, 0)(__VA_ARGS__)
+	    #define __API_AVAILABLE_END _Pragma("clang attribute pop")
+	    #define __API_DEPRECATED(...) __API_DEPRECATED_MSG_GET_MACRO(__VA_ARGS__,__API_DEPRECATED_MSG8,__API_DEPRECATED_MSG7,__API_DEPRECATED_MSG6,__API_DEPRECATED_MSG5,__API_DEPRECATED_MSG4,__API_DEPRECATED_MSG3,__API_DEPRECATED_MSG2,__API_DEPRECATED_MSG1, 0)(__VA_ARGS__)
+	    #define __API_DEPRECATED_WITH_REPLACEMENT(...) __API_DEPRECATED_REP_GET_MACRO(__VA_ARGS__,__API_DEPRECATED_REP8,__API_DEPRECATED_REP7,__API_DEPRECATED_REP6,__API_DEPRECATED_REP5,__API_DEPRECATED_REP4,__API_DEPRECATED_REP3,__API_DEPRECATED_REP2,__API_DEPRECATED_REP1, 0)(__VA_ARGS__)
+	    #define __API_DEPRECATED_BEGIN(...) _Pragma("clang attribute push") __API_DEPRECATED_BEGIN_MSG_GET_MACRO(__VA_ARGS__,__API_DEPRECATED_BEGIN_MSG8,__API_DEPRECATED_BEGIN_MSG7, __API_DEPRECATED_BEGIN_MSG6, __API_DEPRECATED_BEGIN_MSG5, __API_DEPRECATED_BEGIN_MSG4, __API_DEPRECATED_BEGIN_MSG3, __API_DEPRECATED_BEGIN_MSG2, __API_DEPRECATED_BEGIN_MSG1, 0)(__VA_ARGS__)
+	    #define __API_DEPRECATED_END _Pragma("clang attribute pop")
+	    #define __API_DEPRECATED_WITH_REPLACEMENT_BEGIN(...) _Pragma("clang attribute push") __API_DEPRECATED_BEGIN_REP_GET_MACRO(__VA_ARGS__,__API_DEPRECATED_BEGIN_REP8,__API_DEPRECATED_BEGIN_REP7, __API_DEPRECATED_BEGIN_REP6, __API_DEPRECATED_BEGIN_REP5, __API_DEPRECATED_BEGIN_REP4, __API_DEPRECATED_BEGIN_REP3, __API_DEPRECATED_BEGIN_REP2, __API_DEPRECATED_BEGIN_REP1, 0)(__VA_ARGS__)
+	    #define __API_DEPRECATED_WITH_REPLACEMENT_END _Pragma("clang attribute pop")
+	    #define __API_UNAVAILABLE(...) __API_UNAVAILABLE_GET_MACRO(__VA_ARGS__,__API_UNAVAILABLE7,__API_UNAVAILABLE6,__API_UNAVAILABLE5,__API_UNAVAILABLE4,__API_UNAVAILABLE3,__API_UNAVAILABLE2,__API_UNAVAILABLE1, 0)(__VA_ARGS__)
+	    #define __API_UNAVAILABLE_BEGIN(...) _Pragma("clang attribute push") __API_UNAVAILABLE_BEGIN_GET_MACRO(__VA_ARGS__,__API_UNAVAILABLE_BEGIN7,__API_UNAVAILABLE_BEGIN6, __API_UNAVAILABLE_BEGIN5, __API_UNAVAILABLE_BEGIN4, __API_UNAVAILABLE_BEGIN3, __API_UNAVAILABLE_BEGIN2, __API_UNAVAILABLE_BEGIN1, 0)(__VA_ARGS__)
+	    #define __API_UNAVAILABLE_END _Pragma("clang attribute pop")
+	 #else 
+	    #define __API_AVAILABLE(...)
+	    #define __API_AVAILABLE_BEGIN(...)
+	    #define __API_AVAILABLE_END
+	    #define __API_DEPRECATED(...)
+	    #define __API_DEPRECATED_WITH_REPLACEMENT(...)
+	    #define __API_DEPRECATED_BEGIN(...)
+	    #define __API_DEPRECATED_END
+	    #define __API_DEPRECATED_WITH_REPLACEMENT_BEGIN(...)
+	    #define __API_DEPRECATED_WITH_REPLACEMENT_END
+	    #define __API_UNAVAILABLE(...)
+	    #define __API_UNAVAILABLE_BEGIN(...)
+	    #define __API_UNAVAILABLE_END
+	 #endif /* __has_attribute(availability) */
+	#else
+	    #define __API_AVAILABLE(...)
+	    #define __API_AVAILABLE_BEGIN(...)
+	    #define __API_AVAILABLE_END
+	    #define __API_DEPRECATED(...)
+	    #define __API_DEPRECATED_WITH_REPLACEMENT(...)
+	    #define __API_DEPRECATED_BEGIN(...)
+	    #define __API_DEPRECATED_END
+	    #define __API_DEPRECATED_WITH_REPLACEMENT_BEGIN(...)
+	    #define __API_DEPRECATED_WITH_REPLACEMENT_END
+	    #define __API_UNAVAILABLE(...)
+	    #define __API_UNAVAILABLE_BEGIN(...)
+	    #define __API_UNAVAILABLE_END
+	#endif /*  #if defined(__has_feature) && defined(__has_attribute) */
+	
+	#if __has_include(<AvailabilityProhibitedInternal.h>)
+	  #include <AvailabilityProhibitedInternal.h>
+	#endif
+	
+	#ifndef __SPI_AVAILABLE
+	  #define __SPI_AVAILABLE(...)
+	#endif
+	
+	#ifndef __SPI_DEPRECATED
+	  #define __SPI_DEPRECATED(...)
+	#endif
+	
+	#ifndef __SPI_DEPRECATED_WITH_REPLACEMENT
+	  #define __SPI_DEPRECATED_WITH_REPLACEMENT(...)
+	#endif
+	
+	#endif /* __AVAILABILITY__ */
+	_EndOfHeader_;
+};
+
+/*
  *  This fixes __FD_ZERO bug for linux 2.x.y (x <= 2 && y <= some n)
  */
 fix = {
--- a/gcc/ada/adaint.c	1660896592.300658888
+++ b/gcc/ada/adaint.c	1676104157.776834730
@@ -3414,7 +3414,8 @@ __gnat_lwp_self (void)
 #endif
 
 #if defined (__APPLE__)
-# if __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ >= 1060
+# if (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ >= 1060) || \
+     (__ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__ >= 60000)
 #  include <mach/thread_info.h>
 #  include <mach/mach_init.h>
 #  include <mach/thread_act.h>
@@ -3428,7 +3429,8 @@ __gnat_lwp_self (void)
 void *
 __gnat_lwp_self (void)
 {
-#if __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ >= 1060
+#if (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ >= 1060) || \
+    (__ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__ >= 60000)
   thread_identifier_info_data_t data;
   mach_msg_type_number_t count = THREAD_IDENTIFIER_INFO_COUNT;
   kern_return_t kret;
--- a/gcc/ada/raise-gcc.c	1660896592.464660986
+++ b/gcc/ada/raise-gcc.c	1676104286.564752527
@@ -62,7 +62,9 @@
 #ifdef __APPLE__
 /* On MacOS X, versions older than 10.5 don't export _Unwind_GetIPInfo.  */
 #undef HAVE_GETIPINFO
-#if __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ >= 1050
+/* Torrekie: But we are on darwin19+ */
+#if (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ >= 1050) || \
+    (__ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__ >= 60000)
 #define HAVE_GETIPINFO 1
 #endif
 #endif
--- a/gcc/ada/tracebak.c	1660896592.512661601
+++ b/gcc/ada/tracebak.c	1676104233.719679245
@@ -264,9 +264,8 @@ __gnat_backtrace (void **array,
   */
 
 /*------------------- Darwin 8 (OSX 10.4) or newer ----------------------*/
-#if defined (__APPLE__) \
-    && defined (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) \
-    && __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ >= 1040
+// Torrekie: Of cource we are building toward darwin19+
+#if defined (__APPLE__)
 
 #define USE_GCC_UNWINDER
 
--- a/gcc/config/aarch64/darwin.h	1676804196.640483198
+++ b/gcc/config/aarch64/darwin.h	1676114327.770848319
@@ -91,7 +91,7 @@ along with GCC; see the file COPYING3.
 
 #undef ASM_SPEC
 #define ASM_SPEC "-arch %(darwin_arch) "\
-  ASM_OPTIONS " %{static} " ASM_MMACOSX_VERSION_MIN_SPEC
+  ASM_OPTIONS " %{static} " ASM_MIPHONEOS_VERSION_MIN_SPEC
 
 #undef ENDFILE_SPEC
 #define ENDFILE_SPEC \
--- a/gcc/config/darwin-c.cc	1660896592.600662729
+++ b/gcc/config/darwin-c.cc	1676104692.002974177
@@ -673,32 +673,28 @@ version_as_modern_macro (const unsigned
   return result;
 }
 
-/* Return the value of darwin_macosx_version_min, suitably formatted for the
+/* Return the value of darwin_os_version_min, suitably formatted for the
    __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ macro.  Values representing
    OS X 10.9 and earlier are encoded using the legacy four-character format,
    while 10.10 and later use a modern six-character format.  (For example,
    "10.9" produces "1090", and "10.10.1" produces "101001".)  If
-   darwin_macosx_version_min is invalid and cannot be coerced into a valid
+   darwin_os_version_min is invalid and cannot be coerced into a valid
    form, print a warning and return "1000".  */
 
 static const char *
-macosx_version_as_macro (void)
+darwin_version_as_macro (void)
 {
   const unsigned long *version_array;
   const char *version_macro;
 
-  version_array = parse_version (darwin_macosx_version_min);
+  version_array = parse_version (darwin_os_version_min);
   if (!version_array)
     goto fail;
 
-  /* System tools accept up to 99 as a major version.  */
-  if (version_array[MAJOR] < 10 || version_array[MAJOR] > 99)
-    goto fail;
+/* Torrekie: I don't have time to deal with this, let's assume we are doing
+   everything on Darwin19+ */
 
-  if (version_array[MAJOR] == 10 && version_array[MINOR] < 10)
-    version_macro = version_as_legacy_macro (version_array);
-  else
-    version_macro = version_as_modern_macro (version_array);
+  version_macro = version_as_modern_macro (version_array);
 
   if (!version_macro)
     goto fail;
@@ -706,8 +702,8 @@ macosx_version_as_macro (void)
   return version_macro;
 
  fail:
-  error ("unknown value %qs of %<-mmacosx-version-min%>",
-         darwin_macosx_version_min);
+  error ("unknown value %qs of %<-miphoneos-version-min%>",
+         darwin_os_version_min);
   return "1000";
 }
 
@@ -728,8 +724,8 @@ darwin_cpp_builtins (cpp_reader *pfile)
   if (darwin_constant_cfstrings)
     builtin_define ("__CONSTANT_CFSTRINGS__");
 
-  builtin_define_with_value ("__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__",
-			     macosx_version_as_macro(), false);
+  builtin_define_with_value ("__ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__",
+			     darwin_version_as_macro(), false);
 
   /* Since we do not (at 4.6) support ObjC gc for the NeXT runtime, the
      following will cause a syntax error if one tries to compile gc attributed
--- a/gcc/config/darwin-driver.cc	1676804196.643704705
+++ b/gcc/config/darwin-driver.cc	1676108572.017181122
@@ -40,7 +40,7 @@ along with GCC; see the file COPYING3.
 */
 
 static const char *
-validate_macosx_version_min (const char *version_str)
+validate_iphoneos_version_min (const char *version_str)
 {
   size_t version_len;
   unsigned long major, minor = 0, tiny = 0;
@@ -64,23 +64,16 @@ validate_macosx_version_min (const char
 
   major = strtoul (version_str, &end, 10);
 
-  /* macOS 10, 11, and 12 are known. clang accepts up to 99.  */
-  if (major < 10 || major > 99)
+  /* Torrekie: iOS version accepts major < 10 */
+  if (major > 99)
     return NULL;
 
   /* Skip a separating period, if there's one.  */
   version_str = end + ((*end == '.') ? 1 : 0);
 
-  if (major > 10 && *end != '\0' && !ISDIGIT (version_str[0]))
-     /* For macOS 11+, we allow just the major number, but if the minor is
-	there it must be numeric.  */
-    return NULL;
-  else if (major > 10 && *end == '\0')
+  if (*end == '\0')
     /* We will rewrite 11 =>  11.0.0.  */
     need_rewrite = true;
-  else if (major == 10 && (*end == '\0' || !ISDIGIT (version_str[0])))
-    /* Otherwise, minor version components must be present and numeric.  */
-    return NULL;
 
   /* If we have one or more leading zeros on a component, then rewrite the
      version string.  */
@@ -90,8 +83,6 @@ validate_macosx_version_min (const char
 
   minor = strtoul (version_str, &end, 10);
   version_str = end + ((*end == '.') ? 1 : 0);
-  if (minor > 99)
-    return NULL;
 
   /* If 'tiny' is present it must be numeric.  */
   if (*end != '\0' && !ISDIGIT (version_str[0]))
@@ -159,26 +150,27 @@ darwin_find_version_from_kernel (void)
   if (*version_p++ != '.')
     goto parse_failed;
 
-  /* Darwin20 sees a transition to macOS 11.  In this, it seems that the
-     mapping to macOS minor version and patch level is now always 0, 0
-     (at least for macOS 11 and 12).  */
-  if (major_vers >= 20)
+  /* Torrekie: We are doing this for iOS */
+  if (major_vers > 14)
     {
       /* Apple clang doesn't include the minor version or the patch level
 	 in the object file, nor does it pass it to ld  */
-      asprintf (&new_flag, "%d.00.00", major_vers - 9);
+      asprintf (&new_flag, "%d.00.00", major_vers - 6);
     }
-  else if (major_vers - 4 <= 4)
-    /* On 10.4 and earlier, the old linker is used which does not
-       support three-component system versions.
-       FIXME: we should not assume this - a newer linker could be used.  */
-    asprintf (&new_flag, "10.%d", major_vers - 4);
+  else if (major_vers == 14)
+    /* Torrekie: iOS 7 and iOS 8 both using Darwin 14.0.0, set iOS 8 */
+    asprintf (&new_flag, "8.0.0");
+  else if (major_vers == 13)
+    asprintf (&new_flag, "6.0.0");
+  else if (major_vers == 11)
+    /* Torrekie: iOS 4 and iOS 5 both using Darwin 11.0.0, set iOS 5 */
+    asprintf (&new_flag, "5.0.0");
+  else if (major_vers == 10)
+    /* Torrekie: iOS 4.3 upgrades to Darwin 10 */
+    asprintf (&new_flag, "4.0.0");
   else
-    /* Although the newer linker supports three-component system
-       versions, there's no guarantee that the minor version component
-       of the kernel and the system are the same. Apple's clang always
-       uses 0 as the minor version: do the same.  */
-    asprintf (&new_flag, "10.%d.0", major_vers - 4);
+    /* Torrekie: Cannot be lower!!! */
+    asprintf (&new_flag, "3.0.0");
 
   return new_flag;
 
@@ -202,7 +194,7 @@ static const char *
 darwin_default_min_version (void)
 {
   /* Try to retrieve the deployment target from the environment.  */
-  const char *new_flag = getenv ("MACOSX_DEPLOYMENT_TARGET");
+  const char *new_flag = getenv ("IPHONEOS_DEPLOYMENT_TARGET");
 
   /* Apparently, an empty string for MACOSX_DEPLOYMENT_TARGET means
      "use the default".  Or, possibly "use 10.1".  We choose
@@ -215,12 +207,12 @@ darwin_default_min_version (void)
 #else
     /* For cross-compilers, default to a minimum version determined by
        the configuration. */
-    new_flag = DEF_MIN_OSX_VERSION;
+    new_flag = DEF_MIN_IOS_VERSION;
 #endif /* CROSS_DIRECTORY_STRUCTURE */
 
   if (new_flag != NULL)
     {
-      const char *checked = validate_macosx_version_min (new_flag);
+      const char *checked = validate_iphoneos_version_min (new_flag);
       if (checked == NULL)
 	{
 	  warning (0, "could not understand version %qs", new_flag);
@@ -256,7 +248,7 @@ maybe_get_sysroot_from_sdkroot ()
 /* Handle the deduction of m32/m64 from -arch flags and the interactions
    between them (i.e. try to warn a user who thinks that they have a driver
    that can produce multi-slice "FAT" outputs with more than one arch).
-   Default the -mmacosx-version-min flag, which requires a system call on
+   Default the -miphoneos-version-min flag, which requires a system call on
    native hosts.  */
 
 void
@@ -332,12 +324,12 @@ darwin_driver_init (unsigned int *decode
 	  break;
 #endif
 
-	case OPT_mmacosx_version_min_:
+	case OPT_miphoneos_version_min_:
 	  seen_version_min = true;
 	  vers_string =
-	    validate_macosx_version_min ((*decoded_options)[i].arg);
+	    validate_iphoneos_version_min ((*decoded_options)[i].arg);
 	  if (vers_string == NULL)
-	    warning (0, "%qs is not valid for %<-mmacosx-version-min%>",
+	    warning (0, "%qs is not valid for %<-miphoneos-version-min%>",
 		     (*decoded_options)[i].arg);
 	  else if (vers_string == (*decoded_options)[i].arg)
 	    vers_string = xstrndup ((*decoded_options)[i].arg, 32);
@@ -492,7 +484,7 @@ darwin_driver_init (unsigned int *decode
        *decoded_options = XRESIZEVEC (struct cl_decoded_option,
 				      *decoded_options,
 				      *decoded_options_count);
-      generate_option (OPT_mmacosx_version_min_, vers_string, 1, CL_DRIVER,
+      generate_option (OPT_miphoneos_version_min_, vers_string, 1, CL_DRIVER,
 		       &(*decoded_options)[*decoded_options_count - 1]);
 
       char *asm_major = NULL;
@@ -513,7 +505,7 @@ darwin_driver_init (unsigned int *decode
 	  *decoded_options = XRESIZEVEC (struct cl_decoded_option,
 					 *decoded_options,
 					 *decoded_options_count);
-	  generate_option (OPT_asm_macosx_version_min_, asm_major, 1, CL_DRIVER,
+	  generate_option (OPT_asm_iphoneos_version_min_, asm_major, 1, CL_DRIVER,
 			  &(*decoded_options)[*decoded_options_count - 1]);
         }
     }
--- a/gcc/config/darwin.cc	1676804196.645680241
+++ b/gcc/config/darwin.cc	1676104791.321840463
@@ -3249,15 +3249,15 @@ void
 darwin_override_options (void)
 {
   /* Keep track of which (major) version we're generating code for.  */
-  if (darwin_macosx_version_min)
+  if (darwin_os_version_min)
     {
-      if (strverscmp (darwin_macosx_version_min, "10.7") >= 0)
+      if (strverscmp (darwin_os_version_min, "10.7") >= 0)
 	generating_for_darwin_version = 11;
-      else if (strverscmp (darwin_macosx_version_min, "10.6") >= 0)
+      else if (strverscmp (darwin_os_version_min, "10.6") >= 0)
 	generating_for_darwin_version = 10;
-      else if (strverscmp (darwin_macosx_version_min, "10.5") >= 0)
+      else if (strverscmp (darwin_os_version_min, "10.5") >= 0)
 	generating_for_darwin_version = 9;
-      else if (strverscmp (darwin_macosx_version_min, "10.4") >= 0)
+      else if (strverscmp (darwin_os_version_min, "10.4") >= 0)
 	generating_for_darwin_version = 8;
 
       /* Earlier versions are not specifically accounted, until required.  */
@@ -3506,7 +3506,7 @@ darwin_patch_builtins (void)
     darwin_patch_builtin (fncode);
 #define PATCH_BUILTIN_VARIADIC(fncode)				  \
   if (!TARGET_64BIT						  \
-      && (strverscmp (darwin_macosx_version_min, "10.3.9") >= 0)) \
+      && (strverscmp (darwin_os_version_min, "10.3.9") >= 0)) \
     darwin_patch_builtin (fncode);
 #include "darwin-ppc-ldouble-patch.def"
 #undef PATCH_BUILTIN
@@ -3666,14 +3666,14 @@ bool
 darwin_libc_has_function (enum function_class fn_class,
 			  tree type ATTRIBUTE_UNUSED)
 {
-  if (fn_class == function_sincos && darwin_macosx_version_min)
-    return (strverscmp (darwin_macosx_version_min, "10.9") >= 0);
+  if (fn_class == function_sincos && darwin_os_version_min)
+    return (strverscmp (darwin_os_version_min, "10.9") >= 0);
 #if DARWIN_PPC && SUPPORT_DARWIN_LEGACY
   if (fn_class == function_c99_math_complex
       || fn_class == function_c99_misc)
     return (TARGET_64BIT
-	    || (darwin_macosx_version_min &&
-		strverscmp (darwin_macosx_version_min, "10.3") >= 0));
+	    || (darwin_os_version_min &&
+		strverscmp (darwin_os_version_min, "10.3") >= 0));
 #endif
   return default_libc_has_function (fn_class, type);
 }
--- a/gcc/config/darwin.h	1676804196.647355492
+++ b/gcc/config/darwin.h	1676114630.535354936
@@ -283,16 +283,17 @@ extern GTY(()) int darwin_ms_struct;
    ld64 on system versions that default to PIE when mdynamic-no-pic is given.
    FIXME: we should check that the linker supports the -pie and -no_pie.
    options.  */
+/* Torrekie: OS X 10.5 using Darwin9, which corresponds the first iOS */
 #define DARWIN_PIE_SPEC \
 "%{pie|fpie|fPIE:\
    %{mdynamic-no-pic: \
      %n'-mdynamic-no-pic' overrides '-pie', '-fpie' or '-fPIE'; \
-     :%:version-compare(>= 10.5 mmacosx-version-min= -pie) }; \
-   mdynamic-no-pic:%:version-compare(>= 10.7 mmacosx-version-min= -no_pie) } "
+     :%:version-compare(>= 1.0 miphoneos-version-min= -pie) }; \
+   mdynamic-no-pic:%:version-compare(>= 4.3 miphoneos-version-min= -no_pie) } "
 
 #define DARWIN_NOPIE_SPEC \
 "%{no-pie|fno-pie|fno-PIE: \
-   %:version-compare(>= 10.7 mmacosx-version-min= -no_pie) }"
+   %:version-compare(>= 4.3 miphoneos-version-min= -no_pie) }"
 
 #define DARWIN_CC1_SPEC							\
   "%<dynamic %<dynamiclib %<force_cpusubtype_ALL "
@@ -305,8 +306,8 @@ extern GTY(()) int darwin_ms_struct;
 #else
 # define DARWIN_RPATH_LINK ""
 # define DARWIN_SHARED_LIBGCC \
-"%:version-compare(!> 10.11 mmacosx-version-min= -lgcc_s.1.1) \
- %:version-compare(>= 10.11 mmacosx-version-min= -lemutls_w) "
+"%:version-compare(!> 9.0 miphoneos-version-min= -lgcc_s.1.1) \
+ %:version-compare(>= 9.0 miphoneos-version-min= -lemutls_w) "
 #endif
 
 /* We might elect to add a path even when this compiler does not use embedded
@@ -315,8 +316,8 @@ extern GTY(()) int darwin_ms_struct;
 #if DARWIN_DO_EXTRA_RPATH
 # define DARWIN_EXTRA_RPATH \
 "%{!r:%{!nostdlib:%{!nodefaultrpaths:\
-    %:version-compare(>= 10.5 mmacosx-version-min= -rpath) \
-    %:version-compare(>= 10.5 mmacosx-version-min= " DARWIN_ADD_RPATH ") \
+    %:version-compare(>= 1.0 miphoneos-version-min= -rpath) \
+    %:version-compare(>= 1.0 miphoneos-version-min= " DARWIN_ADD_RPATH ") \
   }}}"
 #else
 # define DARWIN_EXTRA_RPATH ""
@@ -355,7 +356,7 @@ extern GTY(()) int darwin_ms_struct;
 */
 
 #define DARWIN_NOCOMPACT_UNWIND \
-" %:version-compare(>= 10.6 mmacosx-version-min= -no_compact_unwind) "
+" %:version-compare(>= 3.0 miphoneos-version-min= -no_compact_unwind) "
 
 /* In Darwin linker specs we can put -lcrt0.o and ld will search the library
    path for crt0.o or -lcrtx.a and it will search for libcrtx.a.  As for
@@ -395,17 +396,17 @@ extern GTY(()) int darwin_ms_struct;
       %{%:sanitize(address): -lasan } \
       %{%:sanitize(undefined): -lubsan } \
       %(link_ssp) \
-      %:version-compare(>< 10.6 10.7 mmacosx-version-min= -ld10-uwfef) \
+      %:version-compare(>< 3.0 4.3 miphoneos-version-min= -ld10-uwfef) \
       %(link_gcc_c_sequence) \
       %{!nodefaultexport:%{dylib|dynamiclib|bundle: \
-	%:version-compare(>= 10.11 asm_macosx_version_min= -U) \
-	%:version-compare(>= 10.11 asm_macosx_version_min= ___emutls_get_address) \
-	%:version-compare(>= 10.11 asm_macosx_version_min= -exported_symbol) \
-	%:version-compare(>= 10.11 asm_macosx_version_min= ___emutls_get_address) \
-	%:version-compare(>= 10.11 asm_macosx_version_min= -U) \
-	%:version-compare(>= 10.11 asm_macosx_version_min= ___emutls_register_common) \
-	%:version-compare(>= 10.11 asm_macosx_version_min= -exported_symbol) \
-	%:version-compare(>= 10.11 asm_macosx_version_min= ___emutls_register_common) \
+	%:version-compare(>= 9.0 asm_iphoneos_version_min= -U) \
+	%:version-compare(>= 9.0 asm_iphoneos_version_min= ___emutls_get_address) \
+	%:version-compare(>= 9.0 asm_iphoneos_version_min= -exported_symbol) \
+	%:version-compare(>= 9.0 asm_iphoneos_version_min= ___emutls_get_address) \
+	%:version-compare(>= 9.0 asm_iphoneos_version_min= -U) \
+	%:version-compare(>= 9.0 asm_iphoneos_version_min= ___emutls_register_common) \
+	%:version-compare(>= 9.0 asm_iphoneos_version_min= -exported_symbol) \
+	%:version-compare(>= 9.0 asm_iphoneos_version_min= ___emutls_register_common) \
       }} \
     }}}\
     %{!r:%{!nostdlib:%{!nostartfiles:%E}}} %{T*} %{F*} "\
@@ -477,10 +478,10 @@ extern GTY(()) int darwin_ms_struct;
    %{force_cpusubtype_ALL:-arch %(darwin_arch)} \
    %{!force_cpusubtype_ALL:-arch %(darwin_subarch)} "\
    LINK_SYSROOT_SPEC \
-  "%{mmacosx-version-min=*:-macosx_version_min %*} \
+  "%{miphoneos-version-min=*:-iphoneos_version_min %*} \
    %{!multiply_defined*:%{shared-libgcc: \
-     %:version-compare(< 10.5 mmacosx-version-min= -multiply_defined) \
-     %:version-compare(< 10.5 mmacosx-version-min= suppress) }} \
+     %:version-compare(< 1.0 miphoneos-version-min= -multiply_defined) \
+     %:version-compare(< 1.0 miphoneos-version-min= suppress) }} \
    %{sectalign*} %{sectcreate*} %{sectobjectsymbols*}  %{sectorder*} \
    %{segaddr*} %{segcreate*} %{segprot*} "
 
@@ -523,13 +524,10 @@ extern GTY(()) int darwin_ms_struct;
 #undef REAL_LIBGCC_SPEC
 #define REAL_LIBGCC_SPEC \
 "%{static-libgcc|static:						  \
-    %:version-compare(!> 10.6 mmacosx-version-min= -lgcc_eh)		  \
-    %:version-compare(>= 10.6 mmacosx-version-min= -lemutls_w);		  \
+    %:version-compare(!> 3.0 miphoneos-version-min= -lgcc_eh)		  \
+    %:version-compare(>= 3.0 miphoneos-version-min= -lemutls_w);		  \
    shared-libgcc|fexceptions|fobjc-exceptions|fgnu-runtime:		  \
-   " DARWIN_SHARED_LIBGCC "						  \
-    %:version-compare(!> 10.3.9 mmacosx-version-min= -lgcc_eh)		  \
-    %:version-compare(>< 10.3.9 10.5 mmacosx-version-min= -lgcc_s.10.4)   \
-    %:version-compare(>< 10.5 10.6 mmacosx-version-min= -lgcc_s.10.5);	  \
+   " DARWIN_SHARED_LIBGCC ";						  \
    : -lemutls_w								  \
   } -lgcc "
 
@@ -543,7 +541,7 @@ extern GTY(()) int darwin_ms_struct;
                      %{!static:%{object:-lgcrt0.o}			    \
                                %{!object:%{preload:-lgcrt0.o}		    \
                                  %{!preload:-lgcrt1.o                       \
-                                 %:version-compare(>= 10.8 mmacosx-version-min= -no_new_main) \
+                                 %:version-compare(>= 6.0 miphoneos-version-min= -no_new_main) \
                                  %(darwin_crt2)}}}}    \
                 %{!pg:%{static:-lcrt0.o}				    \
                       %{!static:%{object:-lcrt0.o}			    \
@@ -565,10 +563,7 @@ extern GTY(()) int darwin_ms_struct;
   { "darwin_rpaths", DARWIN_RPATH_SPEC },
 
 #define DARWIN_CRT1_SPEC						\
-  "%:version-compare(!> 10.5 mmacosx-version-min= -lcrt1.o)		\
-   %:version-compare(>< 10.5 10.6 mmacosx-version-min= -lcrt1.10.5.o)	\
-   %:version-compare(>< 10.6 10.8 mmacosx-version-min= -lcrt1.10.6.o)	\
-   %{fgnu-tm: -lcrttms.o}"
+   "%{fgnu-tm: -lcrttms.o}"
 
 #define DARWIN_CRT2_SPEC ""
 
@@ -577,35 +572,38 @@ extern GTY(()) int darwin_ms_struct;
    requires passing -shared-libgcc, key off that to avoid unnecessarily
    adding a destructor to every program built for 10.4 or earlier.  */
 
+/* Torrekie: What extent we could do something on an iOS version which lower
+   than 1.0 ? */
 #define DARWIN_CRT3_SPEC \
-"%{shared-libgcc:%:version-compare(< 10.5 mmacosx-version-min= crt3.o%s)}"
+"%{shared-libgcc:%:version-compare(< 1.0 miphoneos-version-min= crt3.o%s)}"
 
 #define DARWIN_DYLIB1_SPEC						\
-  "%:version-compare(!> 10.5 mmacosx-version-min= -ldylib1.o)		\
-   %:version-compare(>< 10.5 10.6 mmacosx-version-min= -ldylib1.10.5.o)"
+  "%:version-compare(!> 1.0 miphoneos-version-min= -ldylib1.o)		\
+   %:version-compare(>< 1.0 3.0 miphoneos-version-min= -ldylib1.10.5.o)"
 
 #define DARWIN_BUNDLE1_SPEC \
-"%{!static:%:version-compare(< 10.6 mmacosx-version-min= -lbundle1.o)	\
+"%{!static:%:version-compare(< 3.0 miphoneos-version-min= -lbundle1.o)	\
 	   %{fgnu-tm: -lcrttms.o}}"
 
 #if DARWIN_AT_RPATH
 /* A default rpath, that picks up dependent libraries installed in the same 
    director as one being loaded.  */
 #define DARWIN_RPATH_SPEC \
-  "%:version-compare(>= 10.5 mmacosx-version-min= -rpath) \
-   %:version-compare(>= 10.5 mmacosx-version-min= @loader_path) \
+  "%:version-compare(>= 1.0 miphoneos-version-min= -rpath) \
+   %:version-compare(>= 1.0 miphoneos-version-min= @loader_path) \
    %P "
 #else
 #define DARWIN_RPATH_SPEC ""
 #endif
 
-#ifdef HAVE_AS_MMACOSX_VERSION_MIN_OPTION
+/* Torrekie: No I don't like this */
+#ifdef HAVE_AS_MIPHONEOS_VERSION_MIN_OPTION
 /* Emit macosx version (but only major).  */
-#define ASM_MMACOSX_VERSION_MIN_SPEC \
-"%{asm_macosx_version_min=*: -mmacosx-version-min=%* } \
-   %<asm_macosx_version_min=* "
+#define ASM_MIPHONEOS_VERSION_MIN_SPEC \
+"%{asm_miphoneos_version_min=*: -miphoneos-version-min=%* } \
+   %<asm_miphoneos_version_min=* "
 #else
-#define ASM_MMACOSX_VERSION_MIN_SPEC " %<asm_macosx_version_min=* "
+#define ASM_MIPHONEOS_VERSION_MIN_SPEC " %<asm_iphoneos_version_min=* "
 #endif
 
 #if HAVE_GNU_AS
@@ -620,7 +618,7 @@ extern GTY(()) int darwin_ms_struct;
 /* Default Darwin ASM_SPEC, very simple. */
 #define ASM_SPEC \
 "%{static} -arch %(darwin_arch) " \
-ASM_OPTIONS ASM_MMACOSX_VERSION_MIN_SPEC
+ASM_OPTIONS ASM_IPHONEOS_MIN_SPEC
 
 #ifdef HAVE_AS_STABS_DIRECTIVE
 /* We only pass a debug option to the assembler if that supports stabs, since
@@ -1228,12 +1226,9 @@ extern void darwin_driver_init (unsigned
 #undef STACK_CHECK_STATIC_BUILTIN
 #define STACK_CHECK_STATIC_BUILTIN 1
 
-/* When building cross-compilers (and native crosses) we shall default to 
-   providing an osx-version-min of this unless overridden by the User.
-   10.5 is the only version that fully supports all our archs so that's the
-   fall-back default.  */
-#ifndef DEF_MIN_OSX_VERSION
-#define DEF_MIN_OSX_VERSION "10.5"
+/* Torrekie: Fuck */
+#ifndef DEF_MIN_IOS_VERSION
+#define DEF_MIN_IOS_VERSION "11.0"
 #endif
 
 /* Later versions of ld64 support coalescing weak code/data without requiring
--- a/gcc/config/darwin.opt	1676804196.648030726
+++ b/gcc/config/darwin.opt	1676104875.195094165
@@ -62,13 +62,9 @@ mkernel
 Target Var(flag_mkernel)
 Generate code for the kernel or loadable kernel extensions.
 
-; The Init here is for the convenience of GCC developers, so that cc1
-; and cc1plus don't crash if no -mmacosx-version-min is passed.  The
-; driver will always pass a -mmacosx-version-min, so in normal use the
-; Init is never used.
-mmacosx-version-min=
-Target RejectNegative Joined Var(darwin_macosx_version_min) Init(DEF_MIN_OSX_VERSION)
-The earliest macOS version on which this program will run.
+miphoneos-version-min=
+Target RejectNegative Joined Var(darwin_os_version_min) Init(DEF_MIN_IOS_VERSION)
+The earliest iOS version on which this program will run.
 
 ; Really, only relevant to PowerPC which has a 4 byte bool by default.
 mone-byte-bool
@@ -105,9 +101,9 @@ arch_errors_fatal
 Driver RejectNegative
 Mismatches between file architecture and one specified by \"-arch\" are errors instead of warnings.
 
-asm_macosx_version_min=
+asm_iphoneos_version_min=
 Driver RejectNegative Joined
-The earliest macOS version on which this program will run (formatted for the assembler).
+The earliest iOS version on which this program will run (formatted for the assembler).
 
 bind_at_load
 Driver RejectNegative
--- a/gcc/config/rs6000/darwin7.h	1660896592.688663855
+++ b/gcc/config/rs6000/darwin7.h	1676105044.061951513
@@ -23,5 +23,5 @@ along with GCC; see the file COPYING3.
 #define TARGET_WEAK_NOT_IN_ARCHIVE_TOC 1
 
 /* Default to the last version, with most support for C++.  */
-#undef DEF_MIN_OSX_VERSION
-#define DEF_MIN_OSX_VERSION "10.3.9"
+#undef DEF_MIN_IOS_VERSION
+#define DEF_MIN_IOS_VERSION "10.0"
--- a/gcc/config.gcc	1676804196.615793913
+++ b/gcc/config.gcc	1676109503.472777765
@@ -702,11 +702,11 @@ case ${target} in
   case ${target} in
       # Darwin 4 to 19 correspond to macOS 10.0 to 10.15
       *-*-darwin[4-9]* | *-*-darwin1[0-9]*)
-        macos_min=`expr $darwin_maj - 4`
+        macos_min=`expr $darwin_maj - 6`
         ;;
       *-*-darwin2*)
-        # Darwin 20 corresponds to macOS 11, Darwin 21 to macOS 12.
-        macos_maj=`expr $darwin_maj - 9`
+        # Darwin 20 corresponds to iOS 14, Darwin 21 to iOS 15.
+        macos_maj=`expr $darwin_maj - 6`
         def_ld64=609.0
         ;;
       *-*-darwin)
@@ -730,7 +730,7 @@ case ${target} in
         exit 1
         ;;
   esac
-  tm_defines="$tm_defines DEF_MIN_OSX_VERSION=\\\"${macos_maj}.${macos_min}\\\""
+  tm_defines="$tm_defines DEF_MIN_IOS_VERSION=\\\"${macos_maj}.${macos_min}\\\""
   tm_defines="$tm_defines DEF_LD64=\\\"${def_ld64}\\\""
   tm_file="${tm_file} ${cpu_type}/darwin.h"
   tm_p_file="${tm_p_file} darwin-protos.h"
--- a/gcc/config.in	1676804196.617231254
+++ b/gcc/config.in	1676107321.680365032
@@ -643,10 +643,10 @@
 #endif
 
 
-/* Define if your Mac OS X assembler supports the -mmacos-version-min option.
+/* Define if your Darwin assembler supports the -miphoneos-version-min option.
    */
 #ifndef USED_FOR_TARGET
-#undef HAVE_AS_MMACOSX_VERSION_MIN_OPTION
+#undef HAVE_AS_MIPHONEOS_VERSION_MIN_OPTION
 #endif
 
 
--- a/gcc/configure.ac	1676804196.672264272
+++ b/gcc/configure.ac	1676107437.502060893
@@ -4333,11 +4333,11 @@ AC_MSG_RESULT($gcc_cv_lto_plugin)
 
 case "$target_os" in
   darwin*)
-    gcc_GAS_CHECK_FEATURE([-mmacosx-version-min option],
-      gcc_cv_as_mmacosx_version_min,
-      [-mmacosx-version-min=10.1], [.text],,
-      [AC_DEFINE(HAVE_AS_MMACOSX_VERSION_MIN_OPTION, 1,
-	[Define if your Mac OS X assembler supports the -mmacos-version-min option.])])
+    gcc_GAS_CHECK_FEATURE([-miphoneos-version-min option],
+      gcc_cv_as_miphoneos_version_min,
+      [-miphoneos-version-min=10.0], [.text],,
+      [AC_DEFINE(HAVE_AS_MIPHONEOS_VERSION_MIN_OPTION, 1,
+	[Define if your Darwin assembler supports the -miphoneos-version-min option.])])
     ;;
 esac
 
@@ -6393,10 +6393,8 @@ if test x"$ld64_flag" = x"yes"; then
     AC_MSG_RESULT($gcc_cv_ld64_export_dynamic)
 
     AC_MSG_CHECKING(linker for -platform_version support)
+    # Torrekie: Don't check this, assume we support it
     gcc_cv_ld64_platform_version=1
-    if $gcc_cv_ld -platform_version macos 10.5 0.0 < /dev/null 2>&1 | grep 'unknown option' > /dev/null; then
-      gcc_cv_ld64_platform_version=0
-    fi
     AC_MSG_RESULT($gcc_cv_ld64_platform_version)
   fi
 
--- a/libbacktrace/backtrace.c	1676804196.802238832
+++ b/libbacktrace/backtrace.c	1676103739.666150418
@@ -72,7 +72,8 @@ unwind (struct _Unwind_Context *context,
 
 #ifdef __APPLE__
 # undef HAVE_GETIPINFO
-# if __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ >= 1050
+# if (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ >= 1050) || \
+     (__ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__ >= 60000)
 #  define HAVE_GETIPINFO 1
 # endif
 #endif
--- a/libbacktrace/simple.c	1676804196.808879924
+++ b/libbacktrace/simple.c	1676103797.785599509
@@ -67,7 +67,8 @@ simple_unwind (struct _Unwind_Context *c
 
 #ifdef __APPLE__
 # undef HAVE_GETIPINFO
-# if __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ >= 1050
+# if (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ >= 1050) || \
+     (__ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__ >= 60000)
 #  define HAVE_GETIPINFO 1
 # endif
 #endif
--- a/libgcc/config/aarch64/heap-trampoline.c	1676804196.827772972
+++ b/libgcc/config/aarch64/heap-trampoline.c	1676110004.513866573
@@ -7,7 +7,7 @@
 #include <stdio.h>
 #include <string.h>
 
-#if __APPLE__
+#if __APPLE__ && __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ >= 110000
 /* For pthread_jit_write_protect_np */
 #include <pthread.h>
 #endif
@@ -72,11 +72,11 @@ void *
 allocate_trampoline_page (void)
 {
   void *page;
-
-#if defined(__gnu_linux__)
+  /* Torrekie: No pthread_jit api on Embedded */
+#if defined(__gnu_linux__) || defined(__ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__)
   page = mmap (0, getpagesize (), PROT_WRITE | PROT_EXEC,
 	       MAP_ANON | MAP_PRIVATE, 0, 0);
-#elif __APPLE__
+#elif __APPLE__ && __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ >= 110000
   page = mmap (0, getpagesize (), PROT_WRITE | PROT_EXEC,
 	       MAP_ANON | MAP_PRIVATE | MAP_JIT, 0, 0);
 #else
@@ -127,7 +127,7 @@ __builtin_nested_func_ptr_created (void
     = &tramp_ctrl_curr->trampolines[get_trampolines_per_page ()
 				    - tramp_ctrl_curr->free_trampolines];
 
-#if __APPLE__
+#if __APPLE__ && __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ >= 110000
   /* Disable write protection for the MAP_JIT regions in this thread (see
      https://developer.apple.com/documentation/apple-silicon/porting-just-in-time-compilers-to-apple-silicon) */
   pthread_jit_write_protect_np (0);
@@ -138,7 +138,7 @@ __builtin_nested_func_ptr_created (void
   trampoline->func_ptr = func;
   trampoline->chain_ptr = chain;
 
-#if __APPLE__
+#if __APPLE__ && __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ >= 110000
   /* Re-enable write protection.  */
   pthread_jit_write_protect_np (1);
 #endif
--- a/libgcc/config/aarch64/t-darwin	1676804196.829153272
+++ b/libgcc/config/aarch64/t-darwin	1676622270.619859935
@@ -1,7 +1,5 @@
 # Ensure we have a suitable minimum OS version.
 
-HOST_LIBGCC2_CFLAGS += -mmacosx-version-min=11.0
-
 LIB2_SIDITI_CONV_FUNCS = yes
 
 BUILD_LIBGCCS1 =
--- a/libgcc/config/aarch64/t-heap-trampoline	1676804196.829480431
+++ b/libgcc/config/aarch64/t-heap-trampoline	1676622256.686350326
@@ -17,4 +17,3 @@
 # <http://www.gnu.org/licenses/>.
 
 LIB2ADD += $(srcdir)/config/aarch64/heap-trampoline.c
-HOST_LIBGCC2_CFLAGS += -mmacosx-version-min=11.0
--- a/libgcc/config/i386/t-heap-trampoline	1676804196.830378868
+++ b/libgcc/config/i386/t-heap-trampoline	1676106898.091526232
@@ -1,20 +0,0 @@
-# Copyright The GNU Toolchain Authors.
-
-# This file is part of GCC.
-#
-# GCC is free software; you can redistribute it and/or modify it
-# under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 3, or (at your option)
-# any later version.
-#
-# GCC is distributed in the hope that it will be useful, but
-# WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-# General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with GCC; see the file COPYING3.  If not see
-# <http://www.gnu.org/licenses/>.
-
-LIB2ADD += $(srcdir)/config/i386/heap-trampoline.c
-HOST_LIBGCC2_CFLAGS += -mmacosx-version-min=10.8
--- a/libgcc/config/rs6000/t-darwin	1660896594.720689865
+++ b/libgcc/config/rs6000/t-darwin	1676106919.287371609
@@ -1,11 +1,11 @@
 
 crt2.o: $(srcdir)/config/rs6000/darwin-crt2.c
-	$(crt_compile) -mmacosx-version-min=10.1 -c $<
+	$(crt_compile)  -c $<
 
 # The sources for this indicate that there are some parts that
 # don't apply >= 10.4
 crt3_2.o: $(srcdir)/config/darwin-crt3.c
-	$(crt_compile) -mmacosx-version-min=10.1 -c $<
+	$(crt_compile)  -c $<
 
 # The outlined register save/restore functions need to run anywhere, and
 # they must be leaf functions suitable for use in an endfile.
@@ -21,13 +21,13 @@ PPC_ENDFILE_OBJS = \
  darwin-vecsave.o
 
 darwin-gpsave.o: $(srcdir)/config/rs6000/darwin-gpsave.S
-	$(crt_compile) -mmacosx-version-min=10.1 -c $<
+	$(crt_compile)  -c $<
 
 darwin-fpsave.o: $(srcdir)/config/rs6000/darwin-fpsave.S
-	$(crt_compile) -mmacosx-version-min=10.1 -c $<
+	$(crt_compile)  -c $<
 
 darwin-vecsave.o: $(srcdir)/config/rs6000/darwin-vecsave.S
-	$(crt_compile) -mmacosx-version-min=10.1 -c $<
+	$(crt_compile)  -c $<
 
 # We build these into a library, so that they are only linked as needed and not
 # forced into every object.
@@ -37,7 +37,7 @@ libef_ppc.a: $(PPC_ENDFILE_OBJS)
 	$(RANLIB_FOR_TARGET) $@
 
 dw_ppc.o: $(srcdir)/config/rs6000/darwin-world.S
-	$(crt_compile) -mmacosx-version-min=10.1 -c $<
+	$(crt_compile)  -c $<
 
 LIB2ADD = $(srcdir)/config/rs6000/darwin-tramp.S \
 	  $(srcdir)/config/darwin-64.c \
--- a/libgcc/config/t-darwin	1676804196.830855523
+++ b/libgcc/config/t-darwin	1676107031.066784154
@@ -27,7 +27,7 @@ libemutls_w.a: emutls_s.o
 # This has to be built for 10.6, even if the toolchain will not target that
 # version
 d10-uwfef.o: $(srcdir)/config/darwin10-unwind-find-enc-func.c libgcc_tm.h
-	$(crt_compile) -mmacosx-version-min=10.6 -c $<
+	$(crt_compile)  -c $<
 
 # Using this crt as a library means that it will not be added to an exe
 # (or module) unless needed.
--- a/libgcc/config/t-darwin-min-1	1676804196.831090601
+++ b/libgcc/config/t-darwin-min-1	1676106885.074526532
@@ -1,3 +1,2 @@
-# Support building with -mmacosx-version-min back to 10.1.
-DARWIN_MIN_LIB_VERSION = -mmacosx-version-min=10.4
-DARWIN_MIN_CRT_VERSION = -mmacosx-version-min=10.1
+DARWIN_MIN_LIB_VERSION =
+DARWIN_MIN_CRT_VERSION =
--- a/libgcc/config/t-darwin-min-4	1676804196.831354344
+++ b/libgcc/config/t-darwin-min-4	1676106954.921525328
@@ -1,3 +1,2 @@
-# Support building with -mmacosx-version-min back to 10.4.
-DARWIN_MIN_LIB_VERSION = -mmacosx-version-min=10.4
-DARWIN_MIN_CRT_VERSION = -mmacosx-version-min=10.4
+DARWIN_MIN_LIB_VERSION =
+DARWIN_MIN_CRT_VERSION =
--- a/libgcc/config/t-darwin-min-5	1676804196.831614963
+++ b/libgcc/config/t-darwin-min-5	1676106936.489472490
@@ -1,3 +1,2 @@
-# Support building with -mmacosx-version-min back to 10.5.
-DARWIN_MIN_LIB_VERSION = -mmacosx-version-min=10.5
-DARWIN_MIN_CRT_VERSION = -mmacosx-version-min=10.5
+DARWIN_MIN_LIB_VERSION =
+DARWIN_MIN_CRT_VERSION =
--- a/libgcc/config/t-darwin-min-8	1676804196.831892623
+++ b/libgcc/config/t-darwin-min-8	1676106871.670478770
@@ -1,3 +1,2 @@
-# Support building with -mmacosx-version-min back to 10.8.
-DARWIN_MIN_LIB_VERSION = -mmacosx-version-min=10.8
-DARWIN_MIN_CRT_VERSION = -mmacosx-version-min=10.8
+DARWIN_MIN_LIB_VERSION =
+DARWIN_MIN_CRT_VERSION =
--- a/libgo/config/libtool.m4	1660896594.776690581
+++ b/libgo/config/libtool.m4	1676108640.529889553
@@ -1004,17 +1004,8 @@ _LT_EOF
       _lt_dar_allow_undefined='${wl}-undefined ${wl}suppress' ;;
     darwin1.*)
       _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;
-    darwin*) # darwin 5.x on
-      # if running on 10.5 or later, the deployment target defaults
-      # to the OS version, if on x86, and 10.4, the deployment
-      # target defaults to 10.4. Don't you love it?
-      case ${MACOSX_DEPLOYMENT_TARGET-10.0},$host in
-	10.0,*86*-darwin8*|10.0,*-darwin[[91]]*)
-	  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;
-	10.[[012]][[,.]]*)
-	  _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;
-	10.*)
-	  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;
+    darwin*) # Torrekie: force this flag
+      _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;
       esac
     ;;
   esac
--- a/libgo/go/cmd/go/internal/work/security_test.go	1660896594.800690888
+++ b/libgo/go/cmd/go/internal/work/security_test.go	1676109566.169273299
@@ -53,7 +53,7 @@ var goodCompilerFlags = [][]string{
 	{"-mtune=happybirthday"},
 	{"-mstack-overflow"},
 	{"-mno-stack-overflow"},
-	{"-mmacosx-version"},
+	{"-miphoneos-version"},
 	{"-mnop-fun-dllimport"},
 	{"-pthread"},
 	{"-std=c99"},
--- a/libsanitizer/sanitizer_common/sanitizer_internal_defs.h	1660896595.352697955
+++ b/libsanitizer/sanitizer_common/sanitizer_internal_defs.h	1676103924.715716871
@@ -74,7 +74,8 @@
 // weak symbols.  Mac OS X 10.9/Darwin 13 is the first release only supported
 // by Xcode >= 4.5.
 #elif SANITIZER_MAC && \
-    __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ >= 1090 && !SANITIZER_GO
+    ((__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ >= 1090) || \
+    (__ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__ >= 60000)) && !SANITIZER_GO
 # define SANITIZER_SUPPORTS_WEAK_HOOKS 1
 #else
 # define SANITIZER_SUPPORTS_WEAK_HOOKS 0
--- a/libsanitizer/sanitizer_common/sanitizer_platform_interceptors.h	1660896595.356698006
+++ b/libsanitizer/sanitizer_common/sanitizer_platform_interceptors.h	1676103970.069254701
@@ -160,12 +160,8 @@
       ((SI_POSIX && _GNU_SOURCE) || SI_NETBSD || SI_FREEBSD)
 #define SANITIZER_INTERCEPT_STRNDUP SI_POSIX
 #define SANITIZER_INTERCEPT___STRNDUP SI_GLIBC
-#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && \
-    __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ < 1070
-#define SI_MAC_DEPLOYMENT_BELOW_10_7 1
-#else
+// Torrekie: Of course not
 #define SI_MAC_DEPLOYMENT_BELOW_10_7 0
-#endif
 // memmem on Darwin doesn't exist on 10.6
 // FIXME: enable memmem on Windows.
 #define SANITIZER_INTERCEPT_MEMMEM (SI_POSIX && !SI_MAC_DEPLOYMENT_BELOW_10_7)
