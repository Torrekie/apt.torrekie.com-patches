--- a/sys/osxaudio/gstosxaudio.c	1709596302.000000000
+++ b/sys/osxaudio/gstosxaudio.c	1709975456.410598747
@@ -30,9 +30,9 @@
 #include "gstosxaudioelement.h"
 #include "gstosxaudiosink.h"
 #include "gstosxaudiosrc.h"
-#ifndef HAVE_IOS
+//#ifndef HAVE_IOS
 #include "gstosxaudiodeviceprovider.h"
-#endif
+//#endif
 
 static gboolean
 plugin_init (GstPlugin * plugin)
@@ -41,9 +41,9 @@ plugin_init (GstPlugin * plugin)
 
   ret |= GST_ELEMENT_REGISTER (osxaudiosrc, plugin);
   ret |= GST_ELEMENT_REGISTER (osxaudiosink, plugin);
-#ifndef HAVE_IOS
+//#ifndef HAVE_IOS
   ret |= GST_DEVICE_PROVIDER_REGISTER (osxaudiodeviceprovider, plugin);
-#endif
+//#endif
 
   return ret;
 }
--- a/sys/osxaudio/gstosxaudiodeviceprovider.c	1709596302.000000000
+++ b/sys/osxaudio/gstosxaudiodeviceprovider.c	1709975430.125783623
@@ -110,10 +110,11 @@ _audio_device_get_name (AudioDeviceID de
   OSStatus status = noErr;
   UInt32 propertySize = 0;
   gchar *device_name = NULL;
+  CFStringRef device_name_cfstr = NULL;
   AudioObjectPropertyScope prop_scope;
 
   AudioObjectPropertyAddress deviceNameAddress = {
-    kAudioDevicePropertyDeviceName,
+    kAudioDevicePropertyDeviceNameCFString,
     kAudioDevicePropertyScopeOutput,
     kAudioObjectPropertyElementMain
   };
@@ -133,11 +134,12 @@ _audio_device_get_name (AudioDeviceID de
   /* Get the name of the device */
   device_name = (gchar *) g_malloc (propertySize);
   status = AudioObjectGetPropertyData (device_id,
-      &deviceNameAddress, 0, NULL, &propertySize, device_name);
+      &deviceNameAddress, 0, NULL, &propertySize, &device_name_cfstr);
   if (status != noErr) {
     g_free (device_name);
     device_name = NULL;
   }
+  device_name = strdup(CFStringGetCStringPtr(device_name_cfstr, kCFStringEncodingUTF8));
 
 beach:
   return device_name;
--- a/sys/osxaudio/gstosxaudioelement.h	1709596302.000000000
+++ b/sys/osxaudio/gstosxaudioelement.h	1709975430.126333323
@@ -54,7 +54,7 @@
 #endif
 
 #include <gst/gst.h>
-#ifdef HAVE_IOS
+#ifdef TARGET_OS_EMBEDDED
 #include <CoreAudio/CoreAudioTypes.h>
 #else
 #include <CoreAudio/CoreAudio.h>
--- a/sys/osxaudio/gstosxaudiosink.c	1709596302.000000000
+++ b/sys/osxaudio/gstosxaudiosink.c	1709975430.126984230
@@ -172,11 +172,11 @@ gst_osx_audio_sink_class_init (GstOsxAud
   gstelement_class->change_state =
       GST_DEBUG_FUNCPTR (gst_osx_audio_sink_change_state);
 
-#ifndef HAVE_IOS
+//#ifndef HAVE_IOS
   g_object_class_install_property (gobject_class, ARG_DEVICE,
       g_param_spec_int ("device", "Device ID", "Device ID of output device",
           0, G_MAXINT, 0, G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
-#endif
+//#endif
 
   gstbasesink_class->query = GST_DEBUG_FUNCPTR (gst_osx_audio_sink_query);
 
@@ -215,11 +215,11 @@ gst_osx_audio_sink_set_property (GObject
   GstOsxAudioSink *sink = GST_OSX_AUDIO_SINK (object);
 
   switch (prop_id) {
-#ifndef HAVE_IOS
+//#ifndef HAVE_IOS
     case ARG_DEVICE:
       sink->device_id = g_value_get_int (value);
       break;
-#endif
+//#endif
     case ARG_VOLUME:
       sink->volume = g_value_get_double (value);
       gst_osx_audio_sink_set_volume (sink);
@@ -275,11 +275,11 @@ gst_osx_audio_sink_get_property (GObject
 {
   GstOsxAudioSink *sink = GST_OSX_AUDIO_SINK (object);
   switch (prop_id) {
-#ifndef HAVE_IOS
+//#ifndef HAVE_IOS
     case ARG_DEVICE:
       g_value_set_int (value, sink->device_id);
       break;
-#endif
+//#endif
     case ARG_VOLUME:
       g_value_set_double (value, sink->volume);
       break;
--- a/sys/osxaudio/gstosxcoreaudio.c	1709596302.000000000
+++ b/sys/osxaudio/gstosxcoreaudio.c	1709975475.476600673
@@ -29,7 +29,7 @@ GST_DEBUG_CATEGORY (osx_coreaudio_debug)
 
 G_DEFINE_TYPE (GstCoreAudio, gst_core_audio, G_TYPE_OBJECT);
 
-#ifdef HAVE_IOS
+#ifdef TARGET_OS_EMBEDDED
 #include "gstosxcoreaudioremoteio.c"
 #else
 #include "gstosxcoreaudiohal.c"
@@ -60,10 +60,10 @@ gst_core_audio_init (GstCoreAudio * core
   core_audio->audiounit = NULL;
   core_audio->cached_caps = NULL;
   core_audio->cached_caps_valid = FALSE;
-#ifndef HAVE_IOS
+//#ifndef HAVE_IOS
   core_audio->hog_pid = -1;
   core_audio->disabled_mixing = FALSE;
-#endif
+//#endif
 
   g_mutex_init (&core_audio->timing_lock);
 }
@@ -799,7 +799,7 @@ gst_core_audio_probe_caps (GstCoreAudio
         gst_structure_remove_field (out_s, "channel-mask");
       }
 
-#ifndef HAVE_IOS
+//#ifndef HAVE_IOS
       if (core_audio->is_src && got_outer_asbd
           && outer_asbd.mSampleRate != kAudioStreamAnyRate) {
         /* According to Core Audio engineer, AUHAL does not support sample rate conversion.
@@ -812,7 +812,7 @@ gst_core_audio_probe_caps (GstCoreAudio
         gst_structure_set (out_s, "rate", G_TYPE_INT,
             (gint) outer_asbd.mSampleRate, NULL);
       }
-#endif
+//#endif
 
       /* Special cases for upmixing and downmixing.
        * Other than that, the AUs don't upmix or downmix multi-channel audio,
--- a/sys/osxaudio/gstosxcoreaudio.h	1709596302.000000000
+++ b/sys/osxaudio/gstosxcoreaudio.h	1709975494.893704694
@@ -26,24 +26,14 @@
 #  include <config.h>
 #endif
 
+#include <TargetConditionals.h>
 #include <gst/gst.h>
 #include <gst/audio/audio-channels.h>
-#ifdef HAVE_IOS
   #include <CoreAudio/CoreAudioTypes.h>
-  #define AudioDeviceID gint
-  #define kAudioDeviceUnknown 0
-#else
+//  #define AudioDeviceID gint
+//  #define kAudioDeviceUnknown 0
   #include <CoreAudio/CoreAudio.h>
   #include <AudioToolbox/AudioToolbox.h>
-  #if MAC_OS_X_VERSION_MIN_REQUIRED < 1060
-    #include <CoreServices/CoreServices.h>
-    #define AudioComponentFindNext FindNextComponent
-    #define AudioComponentInstanceNew OpenAComponent
-    #define AudioComponentInstanceDispose CloseComponent
-    #define AudioComponent Component
-    #define AudioComponentDescription ComponentDescription
-  #endif
-#endif
 #include <AudioUnit/AudioUnit.h>
 #include "gstosxaudioelement.h"
 
@@ -101,7 +91,7 @@ struct _GstCoreAudio
   UInt32 recBufferSize; /* AudioUnitRender clobbers mDataByteSize */
   AudioBufferList *recBufferList;
 
-#ifndef HAVE_IOS
+//#ifndef HAVE_IOS
   /* For SPDIF out */
   pid_t hog_pid;
   gboolean disabled_mixing;
@@ -109,7 +99,7 @@ struct _GstCoreAudio
   gboolean revert_format;
   AudioStreamBasicDescription original_format, stream_format;
   AudioDeviceIOProcID procID;
-#endif
+//#endif
 
   GMutex timing_lock;
   uint64_t anchor_hosttime;
--- a/sys/osxaudio/meson.build	1709596302.000000000
+++ b/sys/osxaudio/meson.build	1709975430.129375361
@@ -16,9 +16,9 @@ endif
 
 if host_system == 'darwin'
   # TODO: https://github.com/mesonbuild/meson/issues/3940
-  have_osxaudio = cc.has_header('CoreAudio/CoreAudio.h')
+#  have_osxaudio = cc.has_header('CoreAudio/CoreAudio.h')
   osxaudio_sources += ['gstosxaudiodeviceprovider.c']
-elif host_system == 'ios'
+#elif host_system == 'ios'
   have_osxaudio = cc.has_header('CoreAudio/CoreAudioTypes.h')
 endif
 
@@ -27,10 +27,10 @@ if not have_osxaudio and osxaudio_option
 endif
 
 if have_osxaudio
-  modules = ['CoreAudio', 'AudioToolbox']
-  if host_system == 'darwin'
-    modules += ['AudioUnit', 'CoreServices']
-  endif
+  modules = ['CoreAudio', 'AudioToolbox', 'CoreFoundation']
+#  if host_system == 'darwin'
+#    modules += ['AudioUnit', 'CoreServices']
+#  endif
   osxaudio_dep = dependency('appleframeworks', modules : modules)
 
   gstosxaudio = library('gstosxaudio',
--- a/sys/osxvideo/meson.build	1709596302.000000000
+++ b/sys/osxvideo/meson.build	1709975430.130053767
@@ -1,9 +1,9 @@
 osxvideo_sources = ['osxvideosink.m', 'cocoawindow.m']
 
 have_osxvideo = false
-if host_system != 'darwin'
+#if host_system != 'darwin'
   subdir_done()
-endif
+#endif
 
 osxvideo_opengl_dep = dependency('appleframeworks', modules : ['OpenGL'], required : get_option('osxvideo'))
 osxvideo_cocoa_dep = dependency('appleframeworks', modules : ['Cocoa'], required : get_option('osxvideo'))
